
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000262c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000262c  000026a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c5c  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000caa  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000050fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000526e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000970b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 89 12 	call	0x2512	; 0x2512 <main>
      7a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_private.h"



void CLCD_voidSendCommand(uint8 Copy_Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e9 97       	sbiw	r28, 0x39	; 57
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin to low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , PIN_LOW);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

	/*Set RW pin to low for write*/
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , PIN_LOW);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Command,7));
     b60:	89 ad       	ldd	r24, Y+57	; 0x39
     b62:	98 2f       	mov	r25, r24
     b64:	99 1f       	adc	r25, r25
     b66:	99 27       	eor	r25, r25
     b68:	99 1f       	adc	r25, r25
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	49 2f       	mov	r20, r25
     b70:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Command,6));
     b74:	89 ad       	ldd	r24, Y+57	; 0x39
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	80 74       	andi	r24, 0x40	; 64
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	08 2e       	mov	r0, r24
     b80:	89 2f       	mov	r24, r25
     b82:	00 0c       	add	r0, r0
     b84:	88 1f       	adc	r24, r24
     b86:	99 0b       	sbc	r25, r25
     b88:	00 0c       	add	r0, r0
     b8a:	88 1f       	adc	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	98 2f       	mov	r25, r24
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	62 e0       	ldi	r22, 0x02	; 2
     b94:	49 2f       	mov	r20, r25
     b96:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Command,5));
     b9a:	89 ad       	ldd	r24, Y+57	; 0x39
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	80 72       	andi	r24, 0x20	; 32
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	95 95       	asr	r25
     ba6:	87 95       	ror	r24
     ba8:	95 95       	asr	r25
     baa:	87 95       	ror	r24
     bac:	95 95       	asr	r25
     bae:	87 95       	ror	r24
     bb0:	95 95       	asr	r25
     bb2:	87 95       	ror	r24
     bb4:	95 95       	asr	r25
     bb6:	87 95       	ror	r24
     bb8:	98 2f       	mov	r25, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	49 2f       	mov	r20, r25
     bc0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Command,4));
     bc4:	89 ad       	ldd	r24, Y+57	; 0x39
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	80 71       	andi	r24, 0x10	; 16
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	95 95       	asr	r25
     bd4:	87 95       	ror	r24
     bd6:	95 95       	asr	r25
     bd8:	87 95       	ror	r24
     bda:	95 95       	asr	r25
     bdc:	87 95       	ror	r24
     bde:	98 2f       	mov	r25, r24
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	49 2f       	mov	r20, r25
     be6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>


	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	62 e0       	ldi	r22, 0x02	; 2
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e4       	ldi	r27, 0x40	; 64
     bfc:	8d ab       	std	Y+53, r24	; 0x35
     bfe:	9e ab       	std	Y+54, r25	; 0x36
     c00:	af ab       	std	Y+55, r26	; 0x37
     c02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c04:	6d a9       	ldd	r22, Y+53	; 0x35
     c06:	7e a9       	ldd	r23, Y+54	; 0x36
     c08:	8f a9       	ldd	r24, Y+55	; 0x37
     c0a:	98 ad       	ldd	r25, Y+56	; 0x38
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	4a e7       	ldi	r20, 0x7A	; 122
     c12:	53 e4       	ldi	r21, 0x43	; 67
     c14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	89 ab       	std	Y+49, r24	; 0x31
     c1e:	9a ab       	std	Y+50, r25	; 0x32
     c20:	ab ab       	std	Y+51, r26	; 0x33
     c22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c24:	69 a9       	ldd	r22, Y+49	; 0x31
     c26:	7a a9       	ldd	r23, Y+50	; 0x32
     c28:	8b a9       	ldd	r24, Y+51	; 0x33
     c2a:	9c a9       	ldd	r25, Y+52	; 0x34
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e8       	ldi	r20, 0x80	; 128
     c32:	5f e3       	ldi	r21, 0x3F	; 63
     c34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c38:	88 23       	and	r24, r24
     c3a:	2c f4       	brge	.+10     	; 0xc46 <CLCD_voidSendCommand+0x110>
		__ticks = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	98 ab       	std	Y+48, r25	; 0x30
     c42:	8f a7       	std	Y+47, r24	; 0x2f
     c44:	3f c0       	rjmp	.+126    	; 0xcc4 <CLCD_voidSendCommand+0x18e>
	else if (__tmp > 65535)
     c46:	69 a9       	ldd	r22, Y+49	; 0x31
     c48:	7a a9       	ldd	r23, Y+50	; 0x32
     c4a:	8b a9       	ldd	r24, Y+51	; 0x33
     c4c:	9c a9       	ldd	r25, Y+52	; 0x34
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	3f ef       	ldi	r19, 0xFF	; 255
     c52:	4f e7       	ldi	r20, 0x7F	; 127
     c54:	57 e4       	ldi	r21, 0x47	; 71
     c56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c5a:	18 16       	cp	r1, r24
     c5c:	4c f5       	brge	.+82     	; 0xcb0 <CLCD_voidSendCommand+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5e:	6d a9       	ldd	r22, Y+53	; 0x35
     c60:	7e a9       	ldd	r23, Y+54	; 0x36
     c62:	8f a9       	ldd	r24, Y+55	; 0x37
     c64:	98 ad       	ldd	r25, Y+56	; 0x38
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	98 ab       	std	Y+48, r25	; 0x30
     c84:	8f a7       	std	Y+47, r24	; 0x2f
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <CLCD_voidSendCommand+0x170>
     c88:	89 e1       	ldi	r24, 0x19	; 25
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9e a7       	std	Y+46, r25	; 0x2e
     c8e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c90:	8d a5       	ldd	r24, Y+45	; 0x2d
     c92:	9e a5       	ldd	r25, Y+46	; 0x2e
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <CLCD_voidSendCommand+0x15e>
     c98:	9e a7       	std	Y+46, r25	; 0x2e
     c9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c9e:	98 a9       	ldd	r25, Y+48	; 0x30
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	98 ab       	std	Y+48, r25	; 0x30
     ca4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ca8:	98 a9       	ldd	r25, Y+48	; 0x30
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	69 f7       	brne	.-38     	; 0xc88 <CLCD_voidSendCommand+0x152>
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <CLCD_voidSendCommand+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb0:	69 a9       	ldd	r22, Y+49	; 0x31
     cb2:	7a a9       	ldd	r23, Y+50	; 0x32
     cb4:	8b a9       	ldd	r24, Y+51	; 0x33
     cb6:	9c a9       	ldd	r25, Y+52	; 0x34
     cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	98 ab       	std	Y+48, r25	; 0x30
     cc2:	8f a7       	std	Y+47, r24	; 0x2f
     cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
     cc6:	98 a9       	ldd	r25, Y+48	; 0x30
     cc8:	9c a7       	std	Y+44, r25	; 0x2c
     cca:	8b a7       	std	Y+43, r24	; 0x2b
     ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
     cce:	9c a5       	ldd	r25, Y+44	; 0x2c
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <CLCD_voidSendCommand+0x19a>
     cd4:	9c a7       	std	Y+44, r25	; 0x2c
     cd6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	62 e0       	ldi	r22, 0x02	; 2
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e4       	ldi	r27, 0x40	; 64
     cea:	8f a3       	std	Y+39, r24	; 0x27
     cec:	98 a7       	std	Y+40, r25	; 0x28
     cee:	a9 a7       	std	Y+41, r26	; 0x29
     cf0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	6f a1       	ldd	r22, Y+39	; 0x27
     cf4:	78 a5       	ldd	r23, Y+40	; 0x28
     cf6:	89 a5       	ldd	r24, Y+41	; 0x29
     cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a e7       	ldi	r20, 0x7A	; 122
     d00:	53 e4       	ldi	r21, 0x43	; 67
     d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8b a3       	std	Y+35, r24	; 0x23
     d0c:	9c a3       	std	Y+36, r25	; 0x24
     d0e:	ad a3       	std	Y+37, r26	; 0x25
     d10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d12:	6b a1       	ldd	r22, Y+35	; 0x23
     d14:	7c a1       	ldd	r23, Y+36	; 0x24
     d16:	8d a1       	ldd	r24, Y+37	; 0x25
     d18:	9e a1       	ldd	r25, Y+38	; 0x26
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <CLCD_voidSendCommand+0x1fe>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9a a3       	std	Y+34, r25	; 0x22
     d30:	89 a3       	std	Y+33, r24	; 0x21
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <CLCD_voidSendCommand+0x27c>
	else if (__tmp > 65535)
     d34:	6b a1       	ldd	r22, Y+35	; 0x23
     d36:	7c a1       	ldd	r23, Y+36	; 0x24
     d38:	8d a1       	ldd	r24, Y+37	; 0x25
     d3a:	9e a1       	ldd	r25, Y+38	; 0x26
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <CLCD_voidSendCommand+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	6f a1       	ldd	r22, Y+39	; 0x27
     d4e:	78 a5       	ldd	r23, Y+40	; 0x28
     d50:	89 a5       	ldd	r24, Y+41	; 0x29
     d52:	9a a5       	ldd	r25, Y+42	; 0x2a
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9a a3       	std	Y+34, r25	; 0x22
     d72:	89 a3       	std	Y+33, r24	; 0x21
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <CLCD_voidSendCommand+0x25e>
     d76:	89 e1       	ldi	r24, 0x19	; 25
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	98 a3       	std	Y+32, r25	; 0x20
     d7c:	8f 8f       	std	Y+31, r24	; 0x1f
     d7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d80:	98 a1       	ldd	r25, Y+32	; 0x20
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <CLCD_voidSendCommand+0x24c>
     d86:	98 a3       	std	Y+32, r25	; 0x20
     d88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	89 a1       	ldd	r24, Y+33	; 0x21
     d8c:	9a a1       	ldd	r25, Y+34	; 0x22
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9a a3       	std	Y+34, r25	; 0x22
     d92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	89 a1       	ldd	r24, Y+33	; 0x21
     d96:	9a a1       	ldd	r25, Y+34	; 0x22
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <CLCD_voidSendCommand+0x240>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <CLCD_voidSendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6b a1       	ldd	r22, Y+35	; 0x23
     da0:	7c a1       	ldd	r23, Y+36	; 0x24
     da2:	8d a1       	ldd	r24, Y+37	; 0x25
     da4:	9e a1       	ldd	r25, Y+38	; 0x26
     da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9a a3       	std	Y+34, r25	; 0x22
     db0:	89 a3       	std	Y+33, r24	; 0x21
     db2:	89 a1       	ldd	r24, Y+33	; 0x21
     db4:	9a a1       	ldd	r25, Y+34	; 0x22
     db6:	9e 8f       	std	Y+30, r25	; 0x1e
     db8:	8d 8f       	std	Y+29, r24	; 0x1d
     dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <CLCD_voidSendCommand+0x288>
     dc2:	9e 8f       	std	Y+30, r25	; 0x1e
     dc4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Command,PIN3));
     dc6:	89 ad       	ldd	r24, Y+57	; 0x39
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	88 70       	andi	r24, 0x08	; 8
     dce:	90 70       	andi	r25, 0x00	; 0
     dd0:	95 95       	asr	r25
     dd2:	87 95       	ror	r24
     dd4:	95 95       	asr	r25
     dd6:	87 95       	ror	r24
     dd8:	95 95       	asr	r25
     dda:	87 95       	ror	r24
     ddc:	98 2f       	mov	r25, r24
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	49 2f       	mov	r20, r25
     de4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Command,PIN2));
     de8:	89 ad       	ldd	r24, Y+57	; 0x39
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	84 70       	andi	r24, 0x04	; 4
     df0:	90 70       	andi	r25, 0x00	; 0
     df2:	95 95       	asr	r25
     df4:	87 95       	ror	r24
     df6:	95 95       	asr	r25
     df8:	87 95       	ror	r24
     dfa:	98 2f       	mov	r25, r24
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	49 2f       	mov	r20, r25
     e02:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Command,PIN1));
     e06:	89 ad       	ldd	r24, Y+57	; 0x39
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	82 70       	andi	r24, 0x02	; 2
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	95 95       	asr	r25
     e12:	87 95       	ror	r24
     e14:	98 2f       	mov	r25, r24
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	49 2f       	mov	r20, r25
     e1c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Command,PIN0));
     e20:	89 ad       	ldd	r24, Y+57	; 0x39
     e22:	98 2f       	mov	r25, r24
     e24:	91 70       	andi	r25, 0x01	; 1
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	49 2f       	mov	r20, r25
     e2c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	62 e0       	ldi	r22, 0x02	; 2
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	b0 e4       	ldi	r27, 0x40	; 64
     e42:	89 8f       	std	Y+25, r24	; 0x19
     e44:	9a 8f       	std	Y+26, r25	; 0x1a
     e46:	ab 8f       	std	Y+27, r26	; 0x1b
     e48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4a:	69 8d       	ldd	r22, Y+25	; 0x19
     e4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	4a e7       	ldi	r20, 0x7A	; 122
     e58:	53 e4       	ldi	r21, 0x43	; 67
     e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	8d 8b       	std	Y+21, r24	; 0x15
     e64:	9e 8b       	std	Y+22, r25	; 0x16
     e66:	af 8b       	std	Y+23, r26	; 0x17
     e68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e6a:	6d 89       	ldd	r22, Y+21	; 0x15
     e6c:	7e 89       	ldd	r23, Y+22	; 0x16
     e6e:	8f 89       	ldd	r24, Y+23	; 0x17
     e70:	98 8d       	ldd	r25, Y+24	; 0x18
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e8       	ldi	r20, 0x80	; 128
     e78:	5f e3       	ldi	r21, 0x3F	; 63
     e7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e7e:	88 23       	and	r24, r24
     e80:	2c f4       	brge	.+10     	; 0xe8c <CLCD_voidSendCommand+0x356>
		__ticks = 1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9c 8b       	std	Y+20, r25	; 0x14
     e88:	8b 8b       	std	Y+19, r24	; 0x13
     e8a:	3f c0       	rjmp	.+126    	; 0xf0a <CLCD_voidSendCommand+0x3d4>
	else if (__tmp > 65535)
     e8c:	6d 89       	ldd	r22, Y+21	; 0x15
     e8e:	7e 89       	ldd	r23, Y+22	; 0x16
     e90:	8f 89       	ldd	r24, Y+23	; 0x17
     e92:	98 8d       	ldd	r25, Y+24	; 0x18
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	3f ef       	ldi	r19, 0xFF	; 255
     e98:	4f e7       	ldi	r20, 0x7F	; 127
     e9a:	57 e4       	ldi	r21, 0x47	; 71
     e9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ea0:	18 16       	cp	r1, r24
     ea2:	4c f5       	brge	.+82     	; 0xef6 <CLCD_voidSendCommand+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea4:	69 8d       	ldd	r22, Y+25	; 0x19
     ea6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e2       	ldi	r20, 0x20	; 32
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	9c 8b       	std	Y+20, r25	; 0x14
     eca:	8b 8b       	std	Y+19, r24	; 0x13
     ecc:	0f c0       	rjmp	.+30     	; 0xeec <CLCD_voidSendCommand+0x3b6>
     ece:	89 e1       	ldi	r24, 0x19	; 25
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9a 8b       	std	Y+18, r25	; 0x12
     ed4:	89 8b       	std	Y+17, r24	; 0x11
     ed6:	89 89       	ldd	r24, Y+17	; 0x11
     ed8:	9a 89       	ldd	r25, Y+18	; 0x12
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <CLCD_voidSendCommand+0x3a4>
     ede:	9a 8b       	std	Y+18, r25	; 0x12
     ee0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee2:	8b 89       	ldd	r24, Y+19	; 0x13
     ee4:	9c 89       	ldd	r25, Y+20	; 0x14
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eec:	8b 89       	ldd	r24, Y+19	; 0x13
     eee:	9c 89       	ldd	r25, Y+20	; 0x14
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	69 f7       	brne	.-38     	; 0xece <CLCD_voidSendCommand+0x398>
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <CLCD_voidSendCommand+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef6:	6d 89       	ldd	r22, Y+21	; 0x15
     ef8:	7e 89       	ldd	r23, Y+22	; 0x16
     efa:	8f 89       	ldd	r24, Y+23	; 0x17
     efc:	98 8d       	ldd	r25, Y+24	; 0x18
     efe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9c 8b       	std	Y+20, r25	; 0x14
     f08:	8b 8b       	std	Y+19, r24	; 0x13
     f0a:	8b 89       	ldd	r24, Y+19	; 0x13
     f0c:	9c 89       	ldd	r25, Y+20	; 0x14
     f0e:	98 8b       	std	Y+16, r25	; 0x10
     f10:	8f 87       	std	Y+15, r24	; 0x0f
     f12:	8f 85       	ldd	r24, Y+15	; 0x0f
     f14:	98 89       	ldd	r25, Y+16	; 0x10
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <CLCD_voidSendCommand+0x3e0>
     f1a:	98 8b       	std	Y+16, r25	; 0x10
     f1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	62 e0       	ldi	r22, 0x02	; 2
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e4       	ldi	r27, 0x40	; 64
     f30:	8b 87       	std	Y+11, r24	; 0x0b
     f32:	9c 87       	std	Y+12, r25	; 0x0c
     f34:	ad 87       	std	Y+13, r26	; 0x0d
     f36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a e7       	ldi	r20, 0x7A	; 122
     f46:	53 e4       	ldi	r21, 0x43	; 67
     f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	a9 87       	std	Y+9, r26	; 0x09
     f56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f58:	6f 81       	ldd	r22, Y+7	; 0x07
     f5a:	78 85       	ldd	r23, Y+8	; 0x08
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <CLCD_voidSendCommand+0x444>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <CLCD_voidSendCommand+0x4c2>
	else if (__tmp > 65535)
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <CLCD_voidSendCommand+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6b 85       	ldd	r22, Y+11	; 0x0b
     f94:	7c 85       	ldd	r23, Y+12	; 0x0c
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	0f c0       	rjmp	.+30     	; 0xfda <CLCD_voidSendCommand+0x4a4>
     fbc:	89 e1       	ldi	r24, 0x19	; 25
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <CLCD_voidSendCommand+0x492>
     fcc:	9c 83       	std	Y+4, r25	; 0x04
     fce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <CLCD_voidSendCommand+0x486>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <CLCD_voidSendCommand+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <CLCD_voidSendCommand+0x4ce>
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    100c:	e9 96       	adiw	r28, 0x39	; 57
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <CLCD_voidSendData>:

/***************************************************************************/

void CLCD_voidSendData(uint8 Copy_Data)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	e9 97       	sbiw	r28, 0x39	; 57
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	89 af       	std	Y+57, r24	; 0x39

	/*Set RS pin to high for data*/
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , PIN_HIGH);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

	/*Set RW pin to low for write*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN, PIN_LOW);
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Data,PIN7));
    1048:	89 ad       	ldd	r24, Y+57	; 0x39
    104a:	98 2f       	mov	r25, r24
    104c:	99 1f       	adc	r25, r25
    104e:	99 27       	eor	r25, r25
    1050:	99 1f       	adc	r25, r25
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	63 e0       	ldi	r22, 0x03	; 3
    1056:	49 2f       	mov	r20, r25
    1058:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Data,PIN6));
    105c:	89 ad       	ldd	r24, Y+57	; 0x39
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	80 74       	andi	r24, 0x40	; 64
    1064:	90 70       	andi	r25, 0x00	; 0
    1066:	08 2e       	mov	r0, r24
    1068:	89 2f       	mov	r24, r25
    106a:	00 0c       	add	r0, r0
    106c:	88 1f       	adc	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	00 0c       	add	r0, r0
    1072:	88 1f       	adc	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	98 2f       	mov	r25, r24
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	62 e0       	ldi	r22, 0x02	; 2
    107c:	49 2f       	mov	r20, r25
    107e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Data,PIN5));
    1082:	89 ad       	ldd	r24, Y+57	; 0x39
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	80 72       	andi	r24, 0x20	; 32
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	95 95       	asr	r25
    108e:	87 95       	ror	r24
    1090:	95 95       	asr	r25
    1092:	87 95       	ror	r24
    1094:	95 95       	asr	r25
    1096:	87 95       	ror	r24
    1098:	95 95       	asr	r25
    109a:	87 95       	ror	r24
    109c:	95 95       	asr	r25
    109e:	87 95       	ror	r24
    10a0:	98 2f       	mov	r25, r24
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	49 2f       	mov	r20, r25
    10a8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Data,PIN4));
    10ac:	89 ad       	ldd	r24, Y+57	; 0x39
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	80 71       	andi	r24, 0x10	; 16
    10b4:	90 70       	andi	r25, 0x00	; 0
    10b6:	95 95       	asr	r25
    10b8:	87 95       	ror	r24
    10ba:	95 95       	asr	r25
    10bc:	87 95       	ror	r24
    10be:	95 95       	asr	r25
    10c0:	87 95       	ror	r24
    10c2:	95 95       	asr	r25
    10c4:	87 95       	ror	r24
    10c6:	98 2f       	mov	r25, r24
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	49 2f       	mov	r20, r25
    10ce:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>


	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	62 e0       	ldi	r22, 0x02	; 2
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e4       	ldi	r27, 0x40	; 64
    10e4:	8d ab       	std	Y+53, r24	; 0x35
    10e6:	9e ab       	std	Y+54, r25	; 0x36
    10e8:	af ab       	std	Y+55, r26	; 0x37
    10ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	6d a9       	ldd	r22, Y+53	; 0x35
    10ee:	7e a9       	ldd	r23, Y+54	; 0x36
    10f0:	8f a9       	ldd	r24, Y+55	; 0x37
    10f2:	98 ad       	ldd	r25, Y+56	; 0x38
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	53 e4       	ldi	r21, 0x43	; 67
    10fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	89 ab       	std	Y+49, r24	; 0x31
    1106:	9a ab       	std	Y+50, r25	; 0x32
    1108:	ab ab       	std	Y+51, r26	; 0x33
    110a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    110c:	69 a9       	ldd	r22, Y+49	; 0x31
    110e:	7a a9       	ldd	r23, Y+50	; 0x32
    1110:	8b a9       	ldd	r24, Y+51	; 0x33
    1112:	9c a9       	ldd	r25, Y+52	; 0x34
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <CLCD_voidSendData+0x110>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	98 ab       	std	Y+48, r25	; 0x30
    112a:	8f a7       	std	Y+47, r24	; 0x2f
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <CLCD_voidSendData+0x18e>
	else if (__tmp > 65535)
    112e:	69 a9       	ldd	r22, Y+49	; 0x31
    1130:	7a a9       	ldd	r23, Y+50	; 0x32
    1132:	8b a9       	ldd	r24, Y+51	; 0x33
    1134:	9c a9       	ldd	r25, Y+52	; 0x34
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	4c f5       	brge	.+82     	; 0x1198 <CLCD_voidSendData+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	6d a9       	ldd	r22, Y+53	; 0x35
    1148:	7e a9       	ldd	r23, Y+54	; 0x36
    114a:	8f a9       	ldd	r24, Y+55	; 0x37
    114c:	98 ad       	ldd	r25, Y+56	; 0x38
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	98 ab       	std	Y+48, r25	; 0x30
    116c:	8f a7       	std	Y+47, r24	; 0x2f
    116e:	0f c0       	rjmp	.+30     	; 0x118e <CLCD_voidSendData+0x170>
    1170:	89 e1       	ldi	r24, 0x19	; 25
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9e a7       	std	Y+46, r25	; 0x2e
    1176:	8d a7       	std	Y+45, r24	; 0x2d
    1178:	8d a5       	ldd	r24, Y+45	; 0x2d
    117a:	9e a5       	ldd	r25, Y+46	; 0x2e
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <CLCD_voidSendData+0x15e>
    1180:	9e a7       	std	Y+46, r25	; 0x2e
    1182:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8f a5       	ldd	r24, Y+47	; 0x2f
    1186:	98 a9       	ldd	r25, Y+48	; 0x30
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	98 ab       	std	Y+48, r25	; 0x30
    118c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1190:	98 a9       	ldd	r25, Y+48	; 0x30
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <CLCD_voidSendData+0x152>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <CLCD_voidSendData+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	69 a9       	ldd	r22, Y+49	; 0x31
    119a:	7a a9       	ldd	r23, Y+50	; 0x32
    119c:	8b a9       	ldd	r24, Y+51	; 0x33
    119e:	9c a9       	ldd	r25, Y+52	; 0x34
    11a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	98 ab       	std	Y+48, r25	; 0x30
    11aa:	8f a7       	std	Y+47, r24	; 0x2f
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	9c a7       	std	Y+44, r25	; 0x2c
    11b2:	8b a7       	std	Y+43, r24	; 0x2b
    11b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <CLCD_voidSendData+0x19a>
    11bc:	9c a7       	std	Y+44, r25	; 0x2c
    11be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e4       	ldi	r27, 0x40	; 64
    11d2:	8f a3       	std	Y+39, r24	; 0x27
    11d4:	98 a7       	std	Y+40, r25	; 0x28
    11d6:	a9 a7       	std	Y+41, r26	; 0x29
    11d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11da:	6f a1       	ldd	r22, Y+39	; 0x27
    11dc:	78 a5       	ldd	r23, Y+40	; 0x28
    11de:	89 a5       	ldd	r24, Y+41	; 0x29
    11e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4a e7       	ldi	r20, 0x7A	; 122
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	8b a3       	std	Y+35, r24	; 0x23
    11f4:	9c a3       	std	Y+36, r25	; 0x24
    11f6:	ad a3       	std	Y+37, r26	; 0x25
    11f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11fa:	6b a1       	ldd	r22, Y+35	; 0x23
    11fc:	7c a1       	ldd	r23, Y+36	; 0x24
    11fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1200:	9e a1       	ldd	r25, Y+38	; 0x26
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f e3       	ldi	r21, 0x3F	; 63
    120a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    120e:	88 23       	and	r24, r24
    1210:	2c f4       	brge	.+10     	; 0x121c <CLCD_voidSendData+0x1fe>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	89 a3       	std	Y+33, r24	; 0x21
    121a:	3f c0       	rjmp	.+126    	; 0x129a <CLCD_voidSendData+0x27c>
	else if (__tmp > 65535)
    121c:	6b a1       	ldd	r22, Y+35	; 0x23
    121e:	7c a1       	ldd	r23, Y+36	; 0x24
    1220:	8d a1       	ldd	r24, Y+37	; 0x25
    1222:	9e a1       	ldd	r25, Y+38	; 0x26
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	3f ef       	ldi	r19, 0xFF	; 255
    1228:	4f e7       	ldi	r20, 0x7F	; 127
    122a:	57 e4       	ldi	r21, 0x47	; 71
    122c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1230:	18 16       	cp	r1, r24
    1232:	4c f5       	brge	.+82     	; 0x1286 <CLCD_voidSendData+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1234:	6f a1       	ldd	r22, Y+39	; 0x27
    1236:	78 a5       	ldd	r23, Y+40	; 0x28
    1238:	89 a5       	ldd	r24, Y+41	; 0x29
    123a:	9a a5       	ldd	r25, Y+42	; 0x2a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e2       	ldi	r20, 0x20	; 32
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9a a3       	std	Y+34, r25	; 0x22
    125a:	89 a3       	std	Y+33, r24	; 0x21
    125c:	0f c0       	rjmp	.+30     	; 0x127c <CLCD_voidSendData+0x25e>
    125e:	89 e1       	ldi	r24, 0x19	; 25
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	98 a3       	std	Y+32, r25	; 0x20
    1264:	8f 8f       	std	Y+31, r24	; 0x1f
    1266:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1268:	98 a1       	ldd	r25, Y+32	; 0x20
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <CLCD_voidSendData+0x24c>
    126e:	98 a3       	std	Y+32, r25	; 0x20
    1270:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1272:	89 a1       	ldd	r24, Y+33	; 0x21
    1274:	9a a1       	ldd	r25, Y+34	; 0x22
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	9a a3       	std	Y+34, r25	; 0x22
    127a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127c:	89 a1       	ldd	r24, Y+33	; 0x21
    127e:	9a a1       	ldd	r25, Y+34	; 0x22
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	69 f7       	brne	.-38     	; 0x125e <CLCD_voidSendData+0x240>
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <CLCD_voidSendData+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1286:	6b a1       	ldd	r22, Y+35	; 0x23
    1288:	7c a1       	ldd	r23, Y+36	; 0x24
    128a:	8d a1       	ldd	r24, Y+37	; 0x25
    128c:	9e a1       	ldd	r25, Y+38	; 0x26
    128e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	9a a3       	std	Y+34, r25	; 0x22
    1298:	89 a3       	std	Y+33, r24	; 0x21
    129a:	89 a1       	ldd	r24, Y+33	; 0x21
    129c:	9a a1       	ldd	r25, Y+34	; 0x22
    129e:	9e 8f       	std	Y+30, r25	; 0x1e
    12a0:	8d 8f       	std	Y+29, r24	; 0x1d
    12a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <CLCD_voidSendData+0x288>
    12aa:	9e 8f       	std	Y+30, r25	; 0x1e
    12ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Data,PIN3));
    12ae:	89 ad       	ldd	r24, Y+57	; 0x39
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	88 70       	andi	r24, 0x08	; 8
    12b6:	90 70       	andi	r25, 0x00	; 0
    12b8:	95 95       	asr	r25
    12ba:	87 95       	ror	r24
    12bc:	95 95       	asr	r25
    12be:	87 95       	ror	r24
    12c0:	95 95       	asr	r25
    12c2:	87 95       	ror	r24
    12c4:	98 2f       	mov	r25, r24
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	63 e0       	ldi	r22, 0x03	; 3
    12ca:	49 2f       	mov	r20, r25
    12cc:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Data,PIN2));
    12d0:	89 ad       	ldd	r24, Y+57	; 0x39
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	84 70       	andi	r24, 0x04	; 4
    12d8:	90 70       	andi	r25, 0x00	; 0
    12da:	95 95       	asr	r25
    12dc:	87 95       	ror	r24
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	98 2f       	mov	r25, r24
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	62 e0       	ldi	r22, 0x02	; 2
    12e8:	49 2f       	mov	r20, r25
    12ea:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Data,PIN1));
    12ee:	89 ad       	ldd	r24, Y+57	; 0x39
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	82 70       	andi	r24, 0x02	; 2
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	95 95       	asr	r25
    12fa:	87 95       	ror	r24
    12fc:	98 2f       	mov	r25, r24
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	49 2f       	mov	r20, r25
    1304:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Data,PIN0));
    1308:	89 ad       	ldd	r24, Y+57	; 0x39
    130a:	98 2f       	mov	r25, r24
    130c:	91 70       	andi	r25, 0x01	; 1
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	49 2f       	mov	r20, r25
    1314:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	62 e0       	ldi	r22, 0x02	; 2
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 e0       	ldi	r26, 0x00	; 0
    1328:	b0 e4       	ldi	r27, 0x40	; 64
    132a:	89 8f       	std	Y+25, r24	; 0x19
    132c:	9a 8f       	std	Y+26, r25	; 0x1a
    132e:	ab 8f       	std	Y+27, r26	; 0x1b
    1330:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1332:	69 8d       	ldd	r22, Y+25	; 0x19
    1334:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1336:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1338:	9c 8d       	ldd	r25, Y+28	; 0x1c
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a e7       	ldi	r20, 0x7A	; 122
    1340:	53 e4       	ldi	r21, 0x43	; 67
    1342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8d 8b       	std	Y+21, r24	; 0x15
    134c:	9e 8b       	std	Y+22, r25	; 0x16
    134e:	af 8b       	std	Y+23, r26	; 0x17
    1350:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1352:	6d 89       	ldd	r22, Y+21	; 0x15
    1354:	7e 89       	ldd	r23, Y+22	; 0x16
    1356:	8f 89       	ldd	r24, Y+23	; 0x17
    1358:	98 8d       	ldd	r25, Y+24	; 0x18
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e8       	ldi	r20, 0x80	; 128
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1366:	88 23       	and	r24, r24
    1368:	2c f4       	brge	.+10     	; 0x1374 <CLCD_voidSendData+0x356>
		__ticks = 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9c 8b       	std	Y+20, r25	; 0x14
    1370:	8b 8b       	std	Y+19, r24	; 0x13
    1372:	3f c0       	rjmp	.+126    	; 0x13f2 <CLCD_voidSendData+0x3d4>
	else if (__tmp > 65535)
    1374:	6d 89       	ldd	r22, Y+21	; 0x15
    1376:	7e 89       	ldd	r23, Y+22	; 0x16
    1378:	8f 89       	ldd	r24, Y+23	; 0x17
    137a:	98 8d       	ldd	r25, Y+24	; 0x18
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	3f ef       	ldi	r19, 0xFF	; 255
    1380:	4f e7       	ldi	r20, 0x7F	; 127
    1382:	57 e4       	ldi	r21, 0x47	; 71
    1384:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1388:	18 16       	cp	r1, r24
    138a:	4c f5       	brge	.+82     	; 0x13de <CLCD_voidSendData+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138c:	69 8d       	ldd	r22, Y+25	; 0x19
    138e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e2       	ldi	r20, 0x20	; 32
    139a:	51 e4       	ldi	r21, 0x41	; 65
    139c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9c 8b       	std	Y+20, r25	; 0x14
    13b2:	8b 8b       	std	Y+19, r24	; 0x13
    13b4:	0f c0       	rjmp	.+30     	; 0x13d4 <CLCD_voidSendData+0x3b6>
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9a 8b       	std	Y+18, r25	; 0x12
    13bc:	89 8b       	std	Y+17, r24	; 0x11
    13be:	89 89       	ldd	r24, Y+17	; 0x11
    13c0:	9a 89       	ldd	r25, Y+18	; 0x12
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <CLCD_voidSendData+0x3a4>
    13c6:	9a 8b       	std	Y+18, r25	; 0x12
    13c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	9c 8b       	std	Y+20, r25	; 0x14
    13d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d4:	8b 89       	ldd	r24, Y+19	; 0x13
    13d6:	9c 89       	ldd	r25, Y+20	; 0x14
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	69 f7       	brne	.-38     	; 0x13b6 <CLCD_voidSendData+0x398>
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <CLCD_voidSendData+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13de:	6d 89       	ldd	r22, Y+21	; 0x15
    13e0:	7e 89       	ldd	r23, Y+22	; 0x16
    13e2:	8f 89       	ldd	r24, Y+23	; 0x17
    13e4:	98 8d       	ldd	r25, Y+24	; 0x18
    13e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9c 8b       	std	Y+20, r25	; 0x14
    13f0:	8b 8b       	std	Y+19, r24	; 0x13
    13f2:	8b 89       	ldd	r24, Y+19	; 0x13
    13f4:	9c 89       	ldd	r25, Y+20	; 0x14
    13f6:	98 8b       	std	Y+16, r25	; 0x10
    13f8:	8f 87       	std	Y+15, r24	; 0x0f
    13fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fc:	98 89       	ldd	r25, Y+16	; 0x10
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <CLCD_voidSendData+0x3e0>
    1402:	98 8b       	std	Y+16, r25	; 0x10
    1404:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	62 e0       	ldi	r22, 0x02	; 2
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e4       	ldi	r27, 0x40	; 64
    1418:	8b 87       	std	Y+11, r24	; 0x0b
    141a:	9c 87       	std	Y+12, r25	; 0x0c
    141c:	ad 87       	std	Y+13, r26	; 0x0d
    141e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6b 85       	ldd	r22, Y+11	; 0x0b
    1422:	7c 85       	ldd	r23, Y+12	; 0x0c
    1424:	8d 85       	ldd	r24, Y+13	; 0x0d
    1426:	9e 85       	ldd	r25, Y+14	; 0x0e
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a e7       	ldi	r20, 0x7A	; 122
    142e:	53 e4       	ldi	r21, 0x43	; 67
    1430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	8f 83       	std	Y+7, r24	; 0x07
    143a:	98 87       	std	Y+8, r25	; 0x08
    143c:	a9 87       	std	Y+9, r26	; 0x09
    143e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <CLCD_voidSendData+0x444>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <CLCD_voidSendData+0x4c2>
	else if (__tmp > 65535)
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <CLCD_voidSendData+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6b 85       	ldd	r22, Y+11	; 0x0b
    147c:	7c 85       	ldd	r23, Y+12	; 0x0c
    147e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1480:	9e 85       	ldd	r25, Y+14	; 0x0e
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <CLCD_voidSendData+0x4a4>
    14a4:	89 e1       	ldi	r24, 0x19	; 25
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <CLCD_voidSendData+0x492>
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <CLCD_voidSendData+0x486>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <CLCD_voidSendData+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <CLCD_voidSendData+0x4ce>
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    14f4:	e9 96       	adiw	r28, 0x39	; 57
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <CLCD_voidInit>:


/***************************************************************************/

void CLCD_voidInit(void)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	e8 97       	sbiw	r28, 0x38	; 56
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a0 e2       	ldi	r26, 0x20	; 32
    1520:	b2 e4       	ldi	r27, 0x42	; 66
    1522:	8d ab       	std	Y+53, r24	; 0x35
    1524:	9e ab       	std	Y+54, r25	; 0x36
    1526:	af ab       	std	Y+55, r26	; 0x37
    1528:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152a:	6d a9       	ldd	r22, Y+53	; 0x35
    152c:	7e a9       	ldd	r23, Y+54	; 0x36
    152e:	8f a9       	ldd	r24, Y+55	; 0x37
    1530:	98 ad       	ldd	r25, Y+56	; 0x38
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	4a e7       	ldi	r20, 0x7A	; 122
    1538:	53 e4       	ldi	r21, 0x43	; 67
    153a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	89 ab       	std	Y+49, r24	; 0x31
    1544:	9a ab       	std	Y+50, r25	; 0x32
    1546:	ab ab       	std	Y+51, r26	; 0x33
    1548:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    154a:	69 a9       	ldd	r22, Y+49	; 0x31
    154c:	7a a9       	ldd	r23, Y+50	; 0x32
    154e:	8b a9       	ldd	r24, Y+51	; 0x33
    1550:	9c a9       	ldd	r25, Y+52	; 0x34
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e8       	ldi	r20, 0x80	; 128
    1558:	5f e3       	ldi	r21, 0x3F	; 63
    155a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    155e:	88 23       	and	r24, r24
    1560:	2c f4       	brge	.+10     	; 0x156c <CLCD_voidInit+0x66>
		__ticks = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	98 ab       	std	Y+48, r25	; 0x30
    1568:	8f a7       	std	Y+47, r24	; 0x2f
    156a:	3f c0       	rjmp	.+126    	; 0x15ea <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    156c:	69 a9       	ldd	r22, Y+49	; 0x31
    156e:	7a a9       	ldd	r23, Y+50	; 0x32
    1570:	8b a9       	ldd	r24, Y+51	; 0x33
    1572:	9c a9       	ldd	r25, Y+52	; 0x34
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	3f ef       	ldi	r19, 0xFF	; 255
    1578:	4f e7       	ldi	r20, 0x7F	; 127
    157a:	57 e4       	ldi	r21, 0x47	; 71
    157c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1580:	18 16       	cp	r1, r24
    1582:	4c f5       	brge	.+82     	; 0x15d6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1584:	6d a9       	ldd	r22, Y+53	; 0x35
    1586:	7e a9       	ldd	r23, Y+54	; 0x36
    1588:	8f a9       	ldd	r24, Y+55	; 0x37
    158a:	98 ad       	ldd	r25, Y+56	; 0x38
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e2       	ldi	r20, 0x20	; 32
    1592:	51 e4       	ldi	r21, 0x41	; 65
    1594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	98 ab       	std	Y+48, r25	; 0x30
    15aa:	8f a7       	std	Y+47, r24	; 0x2f
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <CLCD_voidInit+0xc6>
    15ae:	89 e1       	ldi	r24, 0x19	; 25
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9e a7       	std	Y+46, r25	; 0x2e
    15b4:	8d a7       	std	Y+45, r24	; 0x2d
    15b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <CLCD_voidInit+0xb4>
    15be:	9e a7       	std	Y+46, r25	; 0x2e
    15c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c4:	98 a9       	ldd	r25, Y+48	; 0x30
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	98 ab       	std	Y+48, r25	; 0x30
    15ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ce:	98 a9       	ldd	r25, Y+48	; 0x30
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	69 f7       	brne	.-38     	; 0x15ae <CLCD_voidInit+0xa8>
    15d4:	14 c0       	rjmp	.+40     	; 0x15fe <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d6:	69 a9       	ldd	r22, Y+49	; 0x31
    15d8:	7a a9       	ldd	r23, Y+50	; 0x32
    15da:	8b a9       	ldd	r24, Y+51	; 0x33
    15dc:	9c a9       	ldd	r25, Y+52	; 0x34
    15de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	98 ab       	std	Y+48, r25	; 0x30
    15e8:	8f a7       	std	Y+47, r24	; 0x2f
    15ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ec:	98 a9       	ldd	r25, Y+48	; 0x30
    15ee:	9c a7       	std	Y+44, r25	; 0x2c
    15f0:	8b a7       	std	Y+43, r24	; 0x2b
    15f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <CLCD_voidInit+0xf0>
    15fa:	9c a7       	std	Y+44, r25	; 0x2c
    15fc:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set */
	DIO_SetPinDirection(CLCD_CTRL_PORT ,CLCD_RS_PIN , OUTPUT_PIN);
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT ,CLCD_EN_PIN , OUTPUT_PIN);
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	62 e0       	ldi	r22, 0x02	; 2
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT ,CLCD_RW_PIN , OUTPUT_PIN);
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D4_PIN , OUTPUT_PIN);
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D5_PIN , OUTPUT_PIN);
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D6_PIN , OUTPUT_PIN);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	62 e0       	ldi	r22, 0x02	; 2
    1634:	41 e0       	ldi	r20, 0x01	; 1
    1636:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D7_PIN , OUTPUT_PIN);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	63 e0       	ldi	r22, 0x03	; 3
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>

	CLCD_voidSendCommand(0x33);
    1644:	83 e3       	ldi	r24, 0x33	; 51
    1646:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x32);
    164a:	82 e3       	ldi	r24, 0x32	; 50
    164c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x28);
    1650:	88 e2       	ldi	r24, 0x28	; 40
    1652:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e8       	ldi	r26, 0x80	; 128
    165c:	bf e3       	ldi	r27, 0x3F	; 63
    165e:	8f a3       	std	Y+39, r24	; 0x27
    1660:	98 a7       	std	Y+40, r25	; 0x28
    1662:	a9 a7       	std	Y+41, r26	; 0x29
    1664:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6f a1       	ldd	r22, Y+39	; 0x27
    1668:	78 a5       	ldd	r23, Y+40	; 0x28
    166a:	89 a5       	ldd	r24, Y+41	; 0x29
    166c:	9a a5       	ldd	r25, Y+42	; 0x2a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a e7       	ldi	r20, 0x7A	; 122
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8b a3       	std	Y+35, r24	; 0x23
    1680:	9c a3       	std	Y+36, r25	; 0x24
    1682:	ad a3       	std	Y+37, r26	; 0x25
    1684:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1686:	6b a1       	ldd	r22, Y+35	; 0x23
    1688:	7c a1       	ldd	r23, Y+36	; 0x24
    168a:	8d a1       	ldd	r24, Y+37	; 0x25
    168c:	9e a1       	ldd	r25, Y+38	; 0x26
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <CLCD_voidInit+0x1a2>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9a a3       	std	Y+34, r25	; 0x22
    16a4:	89 a3       	std	Y+33, r24	; 0x21
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    16a8:	6b a1       	ldd	r22, Y+35	; 0x23
    16aa:	7c a1       	ldd	r23, Y+36	; 0x24
    16ac:	8d a1       	ldd	r24, Y+37	; 0x25
    16ae:	9e a1       	ldd	r25, Y+38	; 0x26
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6f a1       	ldd	r22, Y+39	; 0x27
    16c2:	78 a5       	ldd	r23, Y+40	; 0x28
    16c4:	89 a5       	ldd	r24, Y+41	; 0x29
    16c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9a a3       	std	Y+34, r25	; 0x22
    16e6:	89 a3       	std	Y+33, r24	; 0x21
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <CLCD_voidInit+0x202>
    16ea:	89 e1       	ldi	r24, 0x19	; 25
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	98 a3       	std	Y+32, r25	; 0x20
    16f0:	8f 8f       	std	Y+31, r24	; 0x1f
    16f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f4:	98 a1       	ldd	r25, Y+32	; 0x20
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <CLCD_voidInit+0x1f0>
    16fa:	98 a3       	std	Y+32, r25	; 0x20
    16fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1700:	9a a1       	ldd	r25, Y+34	; 0x22
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9a a3       	std	Y+34, r25	; 0x22
    1706:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	89 a1       	ldd	r24, Y+33	; 0x21
    170a:	9a a1       	ldd	r25, Y+34	; 0x22
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <CLCD_voidInit+0x1e4>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9a a3       	std	Y+34, r25	; 0x22
    1724:	89 a3       	std	Y+33, r24	; 0x21
    1726:	89 a1       	ldd	r24, Y+33	; 0x21
    1728:	9a a1       	ldd	r25, Y+34	; 0x22
    172a:	9e 8f       	std	Y+30, r25	; 0x1e
    172c:	8d 8f       	std	Y+29, r24	; 0x1d
    172e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1730:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <CLCD_voidInit+0x22c>
    1736:	9e 8f       	std	Y+30, r25	; 0x1e
    1738:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0x0c);  //LCD display on
    173a:	8c e0       	ldi	r24, 0x0C	; 12
    173c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	89 8f       	std	Y+25, r24	; 0x19
    174a:	9a 8f       	std	Y+26, r25	; 0x1a
    174c:	ab 8f       	std	Y+27, r26	; 0x1b
    174e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	69 8d       	ldd	r22, Y+25	; 0x19
    1752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a e7       	ldi	r20, 0x7A	; 122
    175e:	53 e4       	ldi	r21, 0x43	; 67
    1760:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	8d 8b       	std	Y+21, r24	; 0x15
    176a:	9e 8b       	std	Y+22, r25	; 0x16
    176c:	af 8b       	std	Y+23, r26	; 0x17
    176e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1784:	88 23       	and	r24, r24
    1786:	2c f4       	brge	.+10     	; 0x1792 <CLCD_voidInit+0x28c>
		__ticks = 1;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	9c 8b       	std	Y+20, r25	; 0x14
    178e:	8b 8b       	std	Y+19, r24	; 0x13
    1790:	3f c0       	rjmp	.+126    	; 0x1810 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	4c f5       	brge	.+82     	; 0x17fc <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17aa:	69 8d       	ldd	r22, Y+25	; 0x19
    17ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <CLCD_voidInit+0x2ec>
    17d4:	89 e1       	ldi	r24, 0x19	; 25
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9a 8b       	std	Y+18, r25	; 0x12
    17da:	89 8b       	std	Y+17, r24	; 0x11
    17dc:	89 89       	ldd	r24, Y+17	; 0x11
    17de:	9a 89       	ldd	r25, Y+18	; 0x12
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <CLCD_voidInit+0x2da>
    17e4:	9a 8b       	std	Y+18, r25	; 0x12
    17e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ea:	9c 89       	ldd	r25, Y+20	; 0x14
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	8b 89       	ldd	r24, Y+19	; 0x13
    17f4:	9c 89       	ldd	r25, Y+20	; 0x14
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f7       	brne	.-38     	; 0x17d4 <CLCD_voidInit+0x2ce>
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fc:	6d 89       	ldd	r22, Y+21	; 0x15
    17fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1800:	8f 89       	ldd	r24, Y+23	; 0x17
    1802:	98 8d       	ldd	r25, Y+24	; 0x18
    1804:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
    1810:	8b 89       	ldd	r24, Y+19	; 0x13
    1812:	9c 89       	ldd	r25, Y+20	; 0x14
    1814:	98 8b       	std	Y+16, r25	; 0x10
    1816:	8f 87       	std	Y+15, r24	; 0x0f
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
    181a:	98 89       	ldd	r25, Y+16	; 0x10
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <CLCD_voidInit+0x316>
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0x02);  //LCD return home
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e8       	ldi	r26, 0x80	; 128
    1830:	bf e3       	ldi	r27, 0x3F	; 63
    1832:	8b 87       	std	Y+11, r24	; 0x0b
    1834:	9c 87       	std	Y+12, r25	; 0x0c
    1836:	ad 87       	std	Y+13, r26	; 0x0d
    1838:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a e7       	ldi	r20, 0x7A	; 122
    1848:	53 e4       	ldi	r21, 0x43	; 67
    184a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8f 83       	std	Y+7, r24	; 0x07
    1854:	98 87       	std	Y+8, r25	; 0x08
    1856:	a9 87       	std	Y+9, r26	; 0x09
    1858:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	2c f4       	brge	.+10     	; 0x187c <CLCD_voidInit+0x376>
		__ticks = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	3f c0       	rjmp	.+126    	; 0x18fa <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	4c f5       	brge	.+82     	; 0x18e6 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	6b 85       	ldd	r22, Y+11	; 0x0b
    1896:	7c 85       	ldd	r23, Y+12	; 0x0c
    1898:	8d 85       	ldd	r24, Y+13	; 0x0d
    189a:	9e 85       	ldd	r25, Y+14	; 0x0e
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e2       	ldi	r20, 0x20	; 32
    18a2:	51 e4       	ldi	r21, 0x41	; 65
    18a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <CLCD_voidInit+0x3d6>
    18be:	89 e1       	ldi	r24, 0x19	; 25
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <CLCD_voidInit+0x3c4>
    18ce:	9c 83       	std	Y+4, r25	; 0x04
    18d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	69 f7       	brne	.-38     	; 0x18be <CLCD_voidInit+0x3b8>
    18e4:	14 c0       	rjmp	.+40     	; 0x190e <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <CLCD_voidInit+0x400>
    190a:	9a 83       	std	Y+2, r25	; 0x02
    190c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_voidSendCommand(0x01);  //LCD clear
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1914:	e8 96       	adiw	r28, 0x38	; 56
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <CLCD_voidWrite_String>:

/***************************************************************************/

void CLCD_voidWrite_String(uint8 *String)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <CLCD_voidWrite_String+0x6>
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	9b 83       	std	Y+3, r25	; 0x03
    1934:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    1936:	19 82       	std	Y+1, r1	; 0x01
    1938:	0e c0       	rjmp	.+28     	; 0x1956 <CLCD_voidWrite_String+0x30>
	while(String[counter] != '\0')
	{
		CLCD_voidSendData(String[counter]);
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	fc 01       	movw	r30, r24
    1946:	e2 0f       	add	r30, r18
    1948:	f3 1f       	adc	r31, r19
    194a:	80 81       	ld	r24, Z
    194c:	0e 94 0f 08 	call	0x101e	; 0x101e <CLCD_voidSendData>
		counter++;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	89 83       	std	Y+1, r24	; 0x01
/***************************************************************************/

void CLCD_voidWrite_String(uint8 *String)
{
	uint8 counter = 0;
	while(String[counter] != '\0')
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	fc 01       	movw	r30, r24
    1962:	e2 0f       	add	r30, r18
    1964:	f3 1f       	adc	r31, r19
    1966:	80 81       	ld	r24, Z
    1968:	88 23       	and	r24, r24
    196a:	39 f7       	brne	.-50     	; 0x193a <CLCD_voidWrite_String+0x14>
	{
		CLCD_voidSendData(String[counter]);
		counter++;
	}
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <CLCD_voidWrite_Number>:

/***************************************************************************/

void CLCD_voidWrite_Number(sint32 Number)
{
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	6a 97       	sbiw	r28, 0x1a	; 26
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	6f 8b       	std	Y+23, r22	; 0x17
    1992:	78 8f       	std	Y+24, r23	; 0x18
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
	sint16 counter = 0;
    1998:	1a 82       	std	Y+2, r1	; 0x02
    199a:	19 82       	std	Y+1, r1	; 0x01
	uint16 arr[10] = {0};
    199c:	84 e1       	ldi	r24, 0x14	; 20
    199e:	fe 01       	movw	r30, r28
    19a0:	33 96       	adiw	r30, 0x03	; 3
    19a2:	df 01       	movw	r26, r30
    19a4:	98 2f       	mov	r25, r24
    19a6:	1d 92       	st	X+, r1
    19a8:	9a 95       	dec	r25
    19aa:	e9 f7       	brne	.-6      	; 0x19a6 <CLCD_voidWrite_Number+0x2e>
	if(Number < 0)
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	a9 8d       	ldd	r26, Y+25	; 0x19
    19b2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19b4:	bb 23       	and	r27, r27
    19b6:	94 f4       	brge	.+36     	; 0x19dc <CLCD_voidWrite_Number+0x64>
	{
		Number = Number * -1;
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	a9 8d       	ldd	r26, Y+25	; 0x19
    19be:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19c0:	b0 95       	com	r27
    19c2:	a0 95       	com	r26
    19c4:	90 95       	com	r25
    19c6:	81 95       	neg	r24
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ca:	af 4f       	sbci	r26, 0xFF	; 255
    19cc:	bf 4f       	sbci	r27, 0xFF	; 255
    19ce:	8f 8b       	std	Y+23, r24	; 0x17
    19d0:	98 8f       	std	Y+24, r25	; 0x18
    19d2:	a9 8f       	std	Y+25, r26	; 0x19
    19d4:	ba 8f       	std	Y+26, r27	; 0x1a
		CLCD_voidSendData('-');
    19d6:	8d e2       	ldi	r24, 0x2D	; 45
    19d8:	0e 94 0f 08 	call	0x101e	; 0x101e <CLCD_voidSendData>
	}

	do
	{
		arr[counter] = Number % 10;
    19dc:	09 81       	ldd	r16, Y+1	; 0x01
    19de:	1a 81       	ldd	r17, Y+2	; 0x02
    19e0:	8f 89       	ldd	r24, Y+23	; 0x17
    19e2:	98 8d       	ldd	r25, Y+24	; 0x18
    19e4:	a9 8d       	ldd	r26, Y+25	; 0x19
    19e6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19e8:	2a e0       	ldi	r18, 0x0A	; 10
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 a0 12 	call	0x2540	; 0x2540 <__divmodsi4>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	98 01       	movw	r18, r16
    1a00:	22 0f       	add	r18, r18
    1a02:	33 1f       	adc	r19, r19
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	82 0f       	add	r24, r18
    1a0a:	93 1f       	adc	r25, r19
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	32 96       	adiw	r30, 0x02	; 2
    1a10:	51 83       	std	Z+1, r21	; 0x01
    1a12:	40 83       	st	Z, r20
		Number = Number / 10;
    1a14:	8f 89       	ldd	r24, Y+23	; 0x17
    1a16:	98 8d       	ldd	r25, Y+24	; 0x18
    1a18:	a9 8d       	ldd	r26, Y+25	; 0x19
    1a1a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a1c:	2a e0       	ldi	r18, 0x0A	; 10
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 a0 12 	call	0x2540	; 0x2540 <__divmodsi4>
    1a2c:	da 01       	movw	r26, r20
    1a2e:	c9 01       	movw	r24, r18
    1a30:	8f 8b       	std	Y+23, r24	; 0x17
    1a32:	98 8f       	std	Y+24, r25	; 0x18
    1a34:	a9 8f       	std	Y+25, r26	; 0x19
    1a36:	ba 8f       	std	Y+26, r27	; 0x1a
		counter++;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
	}while(Number != 0);
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	a9 8d       	ldd	r26, Y+25	; 0x19
    1a48:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	a1 05       	cpc	r26, r1
    1a4e:	b1 05       	cpc	r27, r1
    1a50:	29 f6       	brne	.-118    	; 0x19dc <CLCD_voidWrite_Number+0x64>
    1a52:	15 c0       	rjmp	.+42     	; 0x1a7e <CLCD_voidWrite_Number+0x106>

	while(counter > 0)
	{
		CLCD_voidSendData(arr[--counter] + '0');
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	9c 01       	movw	r18, r24
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	ce 01       	movw	r24, r28
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	82 0f       	add	r24, r18
    1a6e:	93 1f       	adc	r25, r19
    1a70:	fc 01       	movw	r30, r24
    1a72:	32 96       	adiw	r30, 0x02	; 2
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	80 5d       	subi	r24, 0xD0	; 208
    1a7a:	0e 94 0f 08 	call	0x101e	; 0x101e <CLCD_voidSendData>
		arr[counter] = Number % 10;
		Number = Number / 10;
		counter++;
	}while(Number != 0);

	while(counter > 0)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	18 16       	cp	r1, r24
    1a84:	19 06       	cpc	r1, r25
    1a86:	34 f3       	brlt	.-52     	; 0x1a54 <CLCD_voidWrite_Number+0xdc>
	{
		CLCD_voidSendData(arr[--counter] + '0');
	}
}
    1a88:	6a 96       	adiw	r28, 0x1a	; 26
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <CLCD_voidClear>:

/***************************************************************************/

void CLCD_voidClear()
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0x01); //lcd clear command
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <CLCD_voidReturn_Home>:

/***************************************************************************/

void CLCD_voidReturn_Home()
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0x02); //lcd set cursor to zero
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <DIO_SetPinDirection>:
#include "../LIB/Bit_Math.h"
#include "DIO_register.h"
#include "DIO_interface.h"


uint8 DIO_SetPinDirection(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Direction){
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	2a 97       	sbiw	r28, 0x0a	; 10
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	8a 83       	std	Y+2, r24	; 0x02
    1adc:	6b 83       	std	Y+3, r22	; 0x03
    1ade:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_ErrorState = 0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 30       	cpi	r24, 0x08	; 8
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <DIO_SetPinDirection+0x24>
    1ae8:	b9 c1       	rjmp	.+882    	; 0x1e5c <DIO_SetPinDirection+0x396>

		if(Copy_Direction == INPUT_PIN)
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	88 23       	and	r24, r24
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <DIO_SetPinDirection+0x2c>
    1af0:	77 c0       	rjmp	.+238    	; 0x1be0 <DIO_SetPinDirection+0x11a>
		{
			switch(Copy_Port)
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	3a 87       	std	Y+10, r19	; 0x0a
    1afa:	29 87       	std	Y+9, r18	; 0x09
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 05       	cpc	r25, r1
    1b04:	59 f1       	breq	.+86     	; 0x1b5c <DIO_SetPinDirection+0x96>
    1b06:	29 85       	ldd	r18, Y+9	; 0x09
    1b08:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <DIO_SetPinDirection+0x54>
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f0       	breq	.+26     	; 0x1b32 <DIO_SetPinDirection+0x6c>
    1b18:	60 c0       	rjmp	.+192    	; 0x1bda <DIO_SetPinDirection+0x114>
    1b1a:	29 85       	ldd	r18, Y+9	; 0x09
    1b1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	89 f1       	breq	.+98     	; 0x1b86 <DIO_SetPinDirection+0xc0>
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	83 30       	cpi	r24, 0x03	; 3
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <DIO_SetPinDirection+0x6a>
    1b2e:	40 c0       	rjmp	.+128    	; 0x1bb0 <DIO_SetPinDirection+0xea>
    1b30:	54 c0       	rjmp	.+168    	; 0x1bda <DIO_SetPinDirection+0x114>
			{
			case PORT_A:   CLR_BIT(DDRA,Copy_Pin);  break;
    1b32:	aa e3       	ldi	r26, 0x3A	; 58
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ea e3       	ldi	r30, 0x3A	; 58
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <DIO_SetPinDirection+0x8a>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <DIO_SetPinDirection+0x86>
    1b54:	80 95       	com	r24
    1b56:	84 23       	and	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	82 c1       	rjmp	.+772    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			case PORT_B:   CLR_BIT(DDRB,Copy_Pin);  break;
    1b5c:	a7 e3       	ldi	r26, 0x37	; 55
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e7 e3       	ldi	r30, 0x37	; 55
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_SetPinDirection+0xb4>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <DIO_SetPinDirection+0xb0>
    1b7e:	80 95       	com	r24
    1b80:	84 23       	and	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	6d c1       	rjmp	.+730    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			case PORT_C:   CLR_BIT(DDRC,Copy_Pin);  break;
    1b86:	a4 e3       	ldi	r26, 0x34	; 52
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e4 e3       	ldi	r30, 0x34	; 52
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_SetPinDirection+0xde>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_SetPinDirection+0xda>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	58 c1       	rjmp	.+688    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			case PORT_D:   CLR_BIT(DDRD,Copy_Pin);  break;
    1bb0:	a1 e3       	ldi	r26, 0x31	; 49
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e1 e3       	ldi	r30, 0x31	; 49
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_SetPinDirection+0x108>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_SetPinDirection+0x104>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	43 c1       	rjmp	.+646    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	40 c1       	rjmp	.+640    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == OUTPUT_PIN)
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <DIO_SetPinDirection+0x122>
    1be6:	72 c0       	rjmp	.+228    	; 0x1ccc <DIO_SetPinDirection+0x206>
		{
			switch(Copy_Port)
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	38 87       	std	Y+8, r19	; 0x08
    1bf0:	2f 83       	std	Y+7, r18	; 0x07
    1bf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf4:	98 85       	ldd	r25, Y+8	; 0x08
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	49 f1       	breq	.+82     	; 0x1c4e <DIO_SetPinDirection+0x188>
    1bfc:	2f 81       	ldd	r18, Y+7	; 0x07
    1bfe:	38 85       	ldd	r19, Y+8	; 0x08
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <DIO_SetPinDirection+0x14a>
    1c06:	8f 81       	ldd	r24, Y+7	; 0x07
    1c08:	98 85       	ldd	r25, Y+8	; 0x08
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	61 f0       	breq	.+24     	; 0x1c26 <DIO_SetPinDirection+0x160>
    1c0e:	5b c0       	rjmp	.+182    	; 0x1cc6 <DIO_SetPinDirection+0x200>
    1c10:	2f 81       	ldd	r18, Y+7	; 0x07
    1c12:	38 85       	ldd	r19, Y+8	; 0x08
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	71 f1       	breq	.+92     	; 0x1c76 <DIO_SetPinDirection+0x1b0>
    1c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1c:	98 85       	ldd	r25, Y+8	; 0x08
    1c1e:	83 30       	cpi	r24, 0x03	; 3
    1c20:	91 05       	cpc	r25, r1
    1c22:	e9 f1       	breq	.+122    	; 0x1c9e <DIO_SetPinDirection+0x1d8>
    1c24:	50 c0       	rjmp	.+160    	; 0x1cc6 <DIO_SetPinDirection+0x200>
			{
			case PORT_A:    SET_BIT(DDRA,Copy_Pin); break;
    1c26:	aa e3       	ldi	r26, 0x3A	; 58
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ea e3       	ldi	r30, 0x3A	; 58
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <DIO_SetPinDirection+0x17e>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <DIO_SetPinDirection+0x17a>
    1c48:	84 2b       	or	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	09 c1       	rjmp	.+530    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			case PORT_B:    SET_BIT(DDRB,Copy_Pin); break;
    1c4e:	a7 e3       	ldi	r26, 0x37	; 55
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e7 e3       	ldi	r30, 0x37	; 55
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_SetPinDirection+0x1a6>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_SetPinDirection+0x1a2>
    1c70:	84 2b       	or	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	f5 c0       	rjmp	.+490    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			case PORT_C:    SET_BIT(DDRC,Copy_Pin); break;
    1c76:	a4 e3       	ldi	r26, 0x34	; 52
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e4 e3       	ldi	r30, 0x34	; 52
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_SetPinDirection+0x1ce>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <DIO_SetPinDirection+0x1ca>
    1c98:	84 2b       	or	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	e1 c0       	rjmp	.+450    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			case PORT_D:    SET_BIT(DDRD,Copy_Pin); break;
    1c9e:	a1 e3       	ldi	r26, 0x31	; 49
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e1 e3       	ldi	r30, 0x31	; 49
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_SetPinDirection+0x1f6>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <DIO_SetPinDirection+0x1f2>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	cd c0       	rjmp	.+410    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	ca c0       	rjmp	.+404    	; 0x1e60 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == INPUT_PULLUP_PIN)
    1ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <DIO_SetPinDirection+0x20e>
    1cd2:	c1 c0       	rjmp	.+386    	; 0x1e56 <DIO_SetPinDirection+0x390>
		{
			switch(Copy_Port)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3e 83       	std	Y+6, r19	; 0x06
    1cdc:	2d 83       	std	Y+5, r18	; 0x05
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <DIO_SetPinDirection+0x224>
    1ce8:	3e c0       	rjmp	.+124    	; 0x1d66 <DIO_SetPinDirection+0x2a0>
    1cea:	2d 81       	ldd	r18, Y+5	; 0x05
    1cec:	3e 81       	ldd	r19, Y+6	; 0x06
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <DIO_SetPinDirection+0x238>
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	71 f0       	breq	.+28     	; 0x1d18 <DIO_SetPinDirection+0x252>
    1cfc:	a9 c0       	rjmp	.+338    	; 0x1e50 <DIO_SetPinDirection+0x38a>
    1cfe:	2d 81       	ldd	r18, Y+5	; 0x05
    1d00:	3e 81       	ldd	r19, Y+6	; 0x06
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <DIO_SetPinDirection+0x244>
    1d08:	55 c0       	rjmp	.+170    	; 0x1db4 <DIO_SetPinDirection+0x2ee>
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <DIO_SetPinDirection+0x250>
    1d14:	76 c0       	rjmp	.+236    	; 0x1e02 <DIO_SetPinDirection+0x33c>
    1d16:	9c c0       	rjmp	.+312    	; 0x1e50 <DIO_SetPinDirection+0x38a>
			{
			case PORT_A:
				CLR_BIT(DDRA,Copy_Pin);
    1d18:	aa e3       	ldi	r26, 0x3A	; 58
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ea e3       	ldi	r30, 0x3A	; 58
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <DIO_SetPinDirection+0x26e>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	2a 95       	dec	r18
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <DIO_SetPinDirection+0x26a>
    1d38:	80 95       	com	r24
    1d3a:	84 23       	and	r24, r20
    1d3c:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_Pin);
    1d3e:	ab e3       	ldi	r26, 0x3B	; 59
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	eb e3       	ldi	r30, 0x3B	; 59
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_SetPinDirection+0x296>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_SetPinDirection+0x292>
    1d60:	84 2b       	or	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	7d c0       	rjmp	.+250    	; 0x1e60 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_B:
				CLR_BIT(DDRB,Copy_Pin);
    1d66:	a7 e3       	ldi	r26, 0x37	; 55
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e7 e3       	ldi	r30, 0x37	; 55
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_SetPinDirection+0x2bc>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	2a 95       	dec	r18
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_SetPinDirection+0x2b8>
    1d86:	80 95       	com	r24
    1d88:	84 23       	and	r24, r20
    1d8a:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_Pin);
    1d8c:	a8 e3       	ldi	r26, 0x38	; 56
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e8 e3       	ldi	r30, 0x38	; 56
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_SetPinDirection+0x2e4>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_SetPinDirection+0x2e0>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	56 c0       	rjmp	.+172    	; 0x1e60 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_C:
				CLR_BIT(DDRC,Copy_Pin);
    1db4:	a4 e3       	ldi	r26, 0x34	; 52
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e4 e3       	ldi	r30, 0x34	; 52
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_SetPinDirection+0x30a>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	2a 95       	dec	r18
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_SetPinDirection+0x306>
    1dd4:	80 95       	com	r24
    1dd6:	84 23       	and	r24, r20
    1dd8:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_Pin);
    1dda:	a5 e3       	ldi	r26, 0x35	; 53
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e3       	ldi	r30, 0x35	; 53
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_SetPinDirection+0x332>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <DIO_SetPinDirection+0x32e>
    1dfc:	84 2b       	or	r24, r20
    1dfe:	8c 93       	st	X, r24
    1e00:	2f c0       	rjmp	.+94     	; 0x1e60 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_D:
				CLR_BIT(DDRD,Copy_Pin);
    1e02:	a1 e3       	ldi	r26, 0x31	; 49
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e1 e3       	ldi	r30, 0x31	; 49
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_SetPinDirection+0x358>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	2a 95       	dec	r18
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_SetPinDirection+0x354>
    1e22:	80 95       	com	r24
    1e24:	84 23       	and	r24, r20
    1e26:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_Pin);
    1e28:	a2 e3       	ldi	r26, 0x32	; 50
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e2 e3       	ldi	r30, 0x32	; 50
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_SetPinDirection+0x380>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_SetPinDirection+0x37c>
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <DIO_SetPinDirection+0x39a>
				break;
			default:	   Local_ErrorState = 1;    break;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <DIO_SetPinDirection+0x39a>
			}
		}
		else {
			Local_ErrorState = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_SetPinDirection+0x39a>
		}
	}

	else {
		Local_ErrorState = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e62:	2a 96       	adiw	r28, 0x0a	; 10
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <DIO_SetPortDirection>:

/***************************************************************************/

uint8 DIO_SetPortDirection(uint8 Copy_Port, uint8 Copy_Direction){
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <DIO_SetPortDirection+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <DIO_SetPortDirection+0x8>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
    1e86:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	91 05       	cpc	r25, r1
    1e9a:	d1 f0       	breq	.+52     	; 0x1ed0 <DIO_SetPortDirection+0x5c>
    1e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <DIO_SetPortDirection+0x3c>
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	61 f0       	breq	.+24     	; 0x1ec6 <DIO_SetPortDirection+0x52>
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <DIO_SetPortDirection+0x7a>
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	81 f0       	breq	.+32     	; 0x1eda <DIO_SetPortDirection+0x66>
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <DIO_SetPortDirection+0x70>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <DIO_SetPortDirection+0x7a>
	case PORT_A:    DDRA = Copy_Direction; break;
    1ec6:	ea e3       	ldi	r30, 0x3A	; 58
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	80 83       	st	Z, r24
    1ece:	11 c0       	rjmp	.+34     	; 0x1ef2 <DIO_SetPortDirection+0x7e>
	case PORT_B:    DDRB = Copy_Direction; break;
    1ed0:	e7 e3       	ldi	r30, 0x37	; 55
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	80 83       	st	Z, r24
    1ed8:	0c c0       	rjmp	.+24     	; 0x1ef2 <DIO_SetPortDirection+0x7e>
	case PORT_C:    DDRC = Copy_Direction; break;
    1eda:	e4 e3       	ldi	r30, 0x34	; 52
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	80 83       	st	Z, r24
    1ee2:	07 c0       	rjmp	.+14     	; 0x1ef2 <DIO_SetPortDirection+0x7e>
	case PORT_D:    DDRD = Copy_Direction; break;
    1ee4:	e1 e3       	ldi	r30, 0x31	; 49
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	80 83       	st	Z, r24
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_SetPortDirection+0x7e>
	default:	   Local_ErrorState = 1;   break;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_ErrorState;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <DIO_SetPinValue>:


/***************************************************************************/

uint8 DIO_SetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Value){
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	28 97       	sbiw	r28, 0x08	; 8
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	6b 83       	std	Y+3, r22	; 0x03
    1f1c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
    1f1e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	88 30       	cpi	r24, 0x08	; 8
    1f24:	08 f0       	brcs	.+2      	; 0x1f28 <DIO_SetPinValue+0x24>
    1f26:	f1 c0       	rjmp	.+482    	; 0x210a <DIO_SetPinValue+0x206>

		if(Copy_Value == PIN_LOW)
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	88 23       	and	r24, r24
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <DIO_SetPinValue+0x2c>
    1f2e:	77 c0       	rjmp	.+238    	; 0x201e <DIO_SetPinValue+0x11a>
		{
			switch(Copy_Port)
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	38 87       	std	Y+8, r19	; 0x08
    1f38:	2f 83       	std	Y+7, r18	; 0x07
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	91 05       	cpc	r25, r1
    1f42:	59 f1       	breq	.+86     	; 0x1f9a <DIO_SetPinValue+0x96>
    1f44:	2f 81       	ldd	r18, Y+7	; 0x07
    1f46:	38 85       	ldd	r19, Y+8	; 0x08
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <DIO_SetPinValue+0x54>
    1f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f50:	98 85       	ldd	r25, Y+8	; 0x08
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f0       	breq	.+26     	; 0x1f70 <DIO_SetPinValue+0x6c>
    1f56:	60 c0       	rjmp	.+192    	; 0x2018 <DIO_SetPinValue+0x114>
    1f58:	2f 81       	ldd	r18, Y+7	; 0x07
    1f5a:	38 85       	ldd	r19, Y+8	; 0x08
    1f5c:	22 30       	cpi	r18, 0x02	; 2
    1f5e:	31 05       	cpc	r19, r1
    1f60:	89 f1       	breq	.+98     	; 0x1fc4 <DIO_SetPinValue+0xc0>
    1f62:	8f 81       	ldd	r24, Y+7	; 0x07
    1f64:	98 85       	ldd	r25, Y+8	; 0x08
    1f66:	83 30       	cpi	r24, 0x03	; 3
    1f68:	91 05       	cpc	r25, r1
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <DIO_SetPinValue+0x6a>
    1f6c:	40 c0       	rjmp	.+128    	; 0x1fee <DIO_SetPinValue+0xea>
    1f6e:	54 c0       	rjmp	.+168    	; 0x2018 <DIO_SetPinValue+0x114>
			{
			case PORT_A:   CLR_BIT(PORTA,Copy_Pin);  break;
    1f70:	ab e3       	ldi	r26, 0x3B	; 59
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	eb e3       	ldi	r30, 0x3B	; 59
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_SetPinValue+0x8a>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <DIO_SetPinValue+0x86>
    1f92:	80 95       	com	r24
    1f94:	84 23       	and	r24, r20
    1f96:	8c 93       	st	X, r24
    1f98:	ba c0       	rjmp	.+372    	; 0x210e <DIO_SetPinValue+0x20a>
			case PORT_B:   CLR_BIT(PORTB,Copy_Pin);  break;
    1f9a:	a8 e3       	ldi	r26, 0x38	; 56
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e8 e3       	ldi	r30, 0x38	; 56
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	48 2f       	mov	r20, r24
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	02 2e       	mov	r0, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <DIO_SetPinValue+0xb4>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	0a 94       	dec	r0
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <DIO_SetPinValue+0xb0>
    1fbc:	80 95       	com	r24
    1fbe:	84 23       	and	r24, r20
    1fc0:	8c 93       	st	X, r24
    1fc2:	a5 c0       	rjmp	.+330    	; 0x210e <DIO_SetPinValue+0x20a>
			case PORT_C:   CLR_BIT(PORTC,Copy_Pin);  break;
    1fc4:	a5 e3       	ldi	r26, 0x35	; 53
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e5 e3       	ldi	r30, 0x35	; 53
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	48 2f       	mov	r20, r24
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 2e       	mov	r0, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <DIO_SetPinValue+0xde>
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	0a 94       	dec	r0
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <DIO_SetPinValue+0xda>
    1fe6:	80 95       	com	r24
    1fe8:	84 23       	and	r24, r20
    1fea:	8c 93       	st	X, r24
    1fec:	90 c0       	rjmp	.+288    	; 0x210e <DIO_SetPinValue+0x20a>
			case PORT_D:   CLR_BIT(PORTD,Copy_Pin);  break;
    1fee:	a2 e3       	ldi	r26, 0x32	; 50
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e2 e3       	ldi	r30, 0x32	; 50
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <DIO_SetPinValue+0x108>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <DIO_SetPinValue+0x104>
    2010:	80 95       	com	r24
    2012:	84 23       	and	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	7b c0       	rjmp	.+246    	; 0x210e <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	78 c0       	rjmp	.+240    	; 0x210e <DIO_SetPinValue+0x20a>
			}
		}

		else if(Copy_Value == PIN_HIGH)
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	09 f0       	breq	.+2      	; 0x2026 <DIO_SetPinValue+0x122>
    2024:	74 c0       	rjmp	.+232    	; 0x210e <DIO_SetPinValue+0x20a>
		{
			switch(Copy_Port)
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	3e 83       	std	Y+6, r19	; 0x06
    202e:	2d 83       	std	Y+5, r18	; 0x05
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	91 05       	cpc	r25, r1
    2038:	49 f1       	breq	.+82     	; 0x208c <DIO_SetPinValue+0x188>
    203a:	2d 81       	ldd	r18, Y+5	; 0x05
    203c:	3e 81       	ldd	r19, Y+6	; 0x06
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 05       	cpc	r19, r1
    2042:	2c f4       	brge	.+10     	; 0x204e <DIO_SetPinValue+0x14a>
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	61 f0       	breq	.+24     	; 0x2064 <DIO_SetPinValue+0x160>
    204c:	5b c0       	rjmp	.+182    	; 0x2104 <DIO_SetPinValue+0x200>
    204e:	2d 81       	ldd	r18, Y+5	; 0x05
    2050:	3e 81       	ldd	r19, Y+6	; 0x06
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	71 f1       	breq	.+92     	; 0x20b4 <DIO_SetPinValue+0x1b0>
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	9e 81       	ldd	r25, Y+6	; 0x06
    205c:	83 30       	cpi	r24, 0x03	; 3
    205e:	91 05       	cpc	r25, r1
    2060:	e9 f1       	breq	.+122    	; 0x20dc <DIO_SetPinValue+0x1d8>
    2062:	50 c0       	rjmp	.+160    	; 0x2104 <DIO_SetPinValue+0x200>
			{
			case PORT_A:    SET_BIT(PORTA,Copy_Pin); break;
    2064:	ab e3       	ldi	r26, 0x3B	; 59
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	eb e3       	ldi	r30, 0x3B	; 59
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_SetPinValue+0x17e>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_SetPinValue+0x17a>
    2086:	84 2b       	or	r24, r20
    2088:	8c 93       	st	X, r24
    208a:	41 c0       	rjmp	.+130    	; 0x210e <DIO_SetPinValue+0x20a>
			case PORT_B:    SET_BIT(PORTB,Copy_Pin); break;
    208c:	a8 e3       	ldi	r26, 0x38	; 56
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e8 e3       	ldi	r30, 0x38	; 56
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	48 2f       	mov	r20, r24
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	02 2e       	mov	r0, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <DIO_SetPinValue+0x1a6>
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	0a 94       	dec	r0
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <DIO_SetPinValue+0x1a2>
    20ae:	84 2b       	or	r24, r20
    20b0:	8c 93       	st	X, r24
    20b2:	2d c0       	rjmp	.+90     	; 0x210e <DIO_SetPinValue+0x20a>
			case PORT_C:    SET_BIT(PORTC,Copy_Pin); break;
    20b4:	a5 e3       	ldi	r26, 0x35	; 53
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e5 e3       	ldi	r30, 0x35	; 53
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	48 2f       	mov	r20, r24
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_SetPinValue+0x1ce>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_SetPinValue+0x1ca>
    20d6:	84 2b       	or	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	19 c0       	rjmp	.+50     	; 0x210e <DIO_SetPinValue+0x20a>
			case PORT_D:    SET_BIT(PORTD,Copy_Pin); break;
    20dc:	a2 e3       	ldi	r26, 0x32	; 50
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e2 e3       	ldi	r30, 0x32	; 50
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_SetPinValue+0x1f6>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_SetPinValue+0x1f2>
    20fe:	84 2b       	or	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	05 c0       	rjmp	.+10     	; 0x210e <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_SetPinValue+0x20a>
			}
		}
	}
	else {
		Local_ErrorState = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2110:	28 96       	adiw	r28, 0x08	; 8
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <DIO_SetPortValue>:


/***************************************************************************/

uint8 DIO_SetPortValue(uint8 Copy_Port, uint8 Copy_Value){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <DIO_SetPortValue+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <DIO_SetPortValue+0x8>
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
    2134:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3d 83       	std	Y+5, r19	; 0x05
    213e:	2c 83       	std	Y+4, r18	; 0x04
    2140:	8c 81       	ldd	r24, Y+4	; 0x04
    2142:	9d 81       	ldd	r25, Y+5	; 0x05
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	d1 f0       	breq	.+52     	; 0x217e <DIO_SetPortValue+0x5c>
    214a:	2c 81       	ldd	r18, Y+4	; 0x04
    214c:	3d 81       	ldd	r19, Y+5	; 0x05
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	2c f4       	brge	.+10     	; 0x215e <DIO_SetPortValue+0x3c>
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	61 f0       	breq	.+24     	; 0x2174 <DIO_SetPortValue+0x52>
    215c:	1f c0       	rjmp	.+62     	; 0x219c <DIO_SetPortValue+0x7a>
    215e:	2c 81       	ldd	r18, Y+4	; 0x04
    2160:	3d 81       	ldd	r19, Y+5	; 0x05
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	81 f0       	breq	.+32     	; 0x2188 <DIO_SetPortValue+0x66>
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	91 05       	cpc	r25, r1
    2170:	81 f0       	breq	.+32     	; 0x2192 <DIO_SetPortValue+0x70>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <DIO_SetPortValue+0x7a>
	case PORT_A:    PORTA = Copy_Value; break;
    2174:	eb e3       	ldi	r30, 0x3B	; 59
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	80 83       	st	Z, r24
    217c:	11 c0       	rjmp	.+34     	; 0x21a0 <DIO_SetPortValue+0x7e>
	case PORT_B:    PORTB = Copy_Value; break;
    217e:	e8 e3       	ldi	r30, 0x38	; 56
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	80 83       	st	Z, r24
    2186:	0c c0       	rjmp	.+24     	; 0x21a0 <DIO_SetPortValue+0x7e>
	case PORT_C:    PORTC = Copy_Value; break;
    2188:	e5 e3       	ldi	r30, 0x35	; 53
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	80 83       	st	Z, r24
    2190:	07 c0       	rjmp	.+14     	; 0x21a0 <DIO_SetPortValue+0x7e>
	case PORT_D:    PORTD = Copy_Value; break;
    2192:	e2 e3       	ldi	r30, 0x32	; 50
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	80 83       	st	Z, r24
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <DIO_SetPortValue+0x7e>
	default:	    Local_ErrorState = 1;   break;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <DIO_GetPinValue>:

/***************************************************************************/

uint8 DIO_GetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8* Return_PValue){
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	27 97       	sbiw	r28, 0x07	; 7
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	6b 83       	std	Y+3, r22	; 0x03
    21ca:	5d 83       	std	Y+5, r21	; 0x05
    21cc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
    21ce:	19 82       	std	Y+1, r1	; 0x01
	if((Return_PValue != NULL) && (Copy_Pin <= 7 && Copy_Pin >= 0)){
    21d0:	8c 81       	ldd	r24, Y+4	; 0x04
    21d2:	9d 81       	ldd	r25, Y+5	; 0x05
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	09 f4       	brne	.+2      	; 0x21da <DIO_GetPinValue+0x28>
    21d8:	a9 c0       	rjmp	.+338    	; 0x232c <DIO_GetPinValue+0x17a>
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	88 30       	cpi	r24, 0x08	; 8
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <DIO_GetPinValue+0x30>
    21e0:	a5 c0       	rjmp	.+330    	; 0x232c <DIO_GetPinValue+0x17a>
		switch(Copy_Port){
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	3f 83       	std	Y+7, r19	; 0x07
    21ea:	2e 83       	std	Y+6, r18	; 0x06
    21ec:	4e 81       	ldd	r20, Y+6	; 0x06
    21ee:	5f 81       	ldd	r21, Y+7	; 0x07
    21f0:	41 30       	cpi	r20, 0x01	; 1
    21f2:	51 05       	cpc	r21, r1
    21f4:	c1 f1       	breq	.+112    	; 0x2266 <DIO_GetPinValue+0xb4>
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	9f 81       	ldd	r25, Y+7	; 0x07
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	91 05       	cpc	r25, r1
    21fe:	34 f4       	brge	.+12     	; 0x220c <DIO_GetPinValue+0x5a>
    2200:	2e 81       	ldd	r18, Y+6	; 0x06
    2202:	3f 81       	ldd	r19, Y+7	; 0x07
    2204:	21 15       	cp	r18, r1
    2206:	31 05       	cpc	r19, r1
    2208:	71 f0       	breq	.+28     	; 0x2226 <DIO_GetPinValue+0x74>
    220a:	8d c0       	rjmp	.+282    	; 0x2326 <DIO_GetPinValue+0x174>
    220c:	4e 81       	ldd	r20, Y+6	; 0x06
    220e:	5f 81       	ldd	r21, Y+7	; 0x07
    2210:	42 30       	cpi	r20, 0x02	; 2
    2212:	51 05       	cpc	r21, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <DIO_GetPinValue+0x66>
    2216:	47 c0       	rjmp	.+142    	; 0x22a6 <DIO_GetPinValue+0xf4>
    2218:	8e 81       	ldd	r24, Y+6	; 0x06
    221a:	9f 81       	ldd	r25, Y+7	; 0x07
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <DIO_GetPinValue+0x72>
    2222:	61 c0       	rjmp	.+194    	; 0x22e6 <DIO_GetPinValue+0x134>
    2224:	80 c0       	rjmp	.+256    	; 0x2326 <DIO_GetPinValue+0x174>
		case PORT_A:    *Return_PValue = GET_BIT(PINA,Copy_Pin); break;
    2226:	e9 e3       	ldi	r30, 0x39	; 57
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_GetPinValue+0x8e>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	2a 95       	dec	r18
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_GetPinValue+0x8a>
    2244:	9a 01       	movw	r18, r20
    2246:	28 23       	and	r18, r24
    2248:	39 23       	and	r19, r25
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a9 01       	movw	r20, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_GetPinValue+0xa6>
    2254:	55 95       	asr	r21
    2256:	47 95       	ror	r20
    2258:	8a 95       	dec	r24
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <DIO_GetPinValue+0xa2>
    225c:	ca 01       	movw	r24, r20
    225e:	ec 81       	ldd	r30, Y+4	; 0x04
    2260:	fd 81       	ldd	r31, Y+5	; 0x05
    2262:	80 83       	st	Z, r24
    2264:	65 c0       	rjmp	.+202    	; 0x2330 <DIO_GetPinValue+0x17e>
		case PORT_B:    *Return_PValue = GET_BIT(PINB,Copy_Pin); break;
    2266:	e6 e3       	ldi	r30, 0x36	; 54
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	48 2f       	mov	r20, r24
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <DIO_GetPinValue+0xce>
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	2a 95       	dec	r18
    2282:	e2 f7       	brpl	.-8      	; 0x227c <DIO_GetPinValue+0xca>
    2284:	9a 01       	movw	r18, r20
    2286:	28 23       	and	r18, r24
    2288:	39 23       	and	r19, r25
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a9 01       	movw	r20, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <DIO_GetPinValue+0xe6>
    2294:	55 95       	asr	r21
    2296:	47 95       	ror	r20
    2298:	8a 95       	dec	r24
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <DIO_GetPinValue+0xe2>
    229c:	ca 01       	movw	r24, r20
    229e:	ec 81       	ldd	r30, Y+4	; 0x04
    22a0:	fd 81       	ldd	r31, Y+5	; 0x05
    22a2:	80 83       	st	Z, r24
    22a4:	45 c0       	rjmp	.+138    	; 0x2330 <DIO_GetPinValue+0x17e>
		case PORT_C:    *Return_PValue = GET_BIT(PINC,Copy_Pin); break;
    22a6:	e3 e3       	ldi	r30, 0x33	; 51
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DIO_GetPinValue+0x10e>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	2a 95       	dec	r18
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DIO_GetPinValue+0x10a>
    22c4:	9a 01       	movw	r18, r20
    22c6:	28 23       	and	r18, r24
    22c8:	39 23       	and	r19, r25
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a9 01       	movw	r20, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <DIO_GetPinValue+0x126>
    22d4:	55 95       	asr	r21
    22d6:	47 95       	ror	r20
    22d8:	8a 95       	dec	r24
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <DIO_GetPinValue+0x122>
    22dc:	ca 01       	movw	r24, r20
    22de:	ec 81       	ldd	r30, Y+4	; 0x04
    22e0:	fd 81       	ldd	r31, Y+5	; 0x05
    22e2:	80 83       	st	Z, r24
    22e4:	25 c0       	rjmp	.+74     	; 0x2330 <DIO_GetPinValue+0x17e>
		case PORT_D:    *Return_PValue = GET_BIT(PIND,Copy_Pin); break;
    22e6:	e0 e3       	ldi	r30, 0x30	; 48
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	48 2f       	mov	r20, r24
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <DIO_GetPinValue+0x14e>
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	2a 95       	dec	r18
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <DIO_GetPinValue+0x14a>
    2304:	9a 01       	movw	r18, r20
    2306:	28 23       	and	r18, r24
    2308:	39 23       	and	r19, r25
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a9 01       	movw	r20, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <DIO_GetPinValue+0x166>
    2314:	55 95       	asr	r21
    2316:	47 95       	ror	r20
    2318:	8a 95       	dec	r24
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <DIO_GetPinValue+0x162>
    231c:	ca 01       	movw	r24, r20
    231e:	ec 81       	ldd	r30, Y+4	; 0x04
    2320:	fd 81       	ldd	r31, Y+5	; 0x05
    2322:	80 83       	st	Z, r24
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <DIO_GetPinValue+0x17e>
		default:	    Local_ErrorState = 1;   break;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <DIO_GetPinValue+0x17e>
		}
	}
	else {
		Local_ErrorState = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
}
    2332:	27 96       	adiw	r28, 0x07	; 7
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <KeyPad_Init>:
#include "Keypad_config.h"
#include "Keypad_private.h"
#include "Keypad_interface.h"


void KeyPad_Init(void){
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62

	//Init Rows Pins
	DIO_SetPinDirection(KEYPAD_ROW_PORT , KEYPAD_R0_PIN , OUTPUT_PIN);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW_PORT , KEYPAD_R1_PIN , OUTPUT_PIN);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW_PORT , KEYPAD_R2_PIN , OUTPUT_PIN);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW_PORT , KEYPAD_R3_PIN , OUTPUT_PIN);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	63 e0       	ldi	r22, 0x03	; 3
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>

	//Init Cols Pins
	DIO_SetPinDirection(KEYPAD_COL_PORT , KEYPAD_C0_PIN , INPUT_PULLUP_PIN);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	64 e0       	ldi	r22, 0x04	; 4
    2378:	42 e0       	ldi	r20, 0x02	; 2
    237a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL_PORT , KEYPAD_C1_PIN , INPUT_PULLUP_PIN);
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	65 e0       	ldi	r22, 0x05	; 5
    2382:	42 e0       	ldi	r20, 0x02	; 2
    2384:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL_PORT , KEYPAD_C2_PIN , INPUT_PULLUP_PIN);
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	66 e0       	ldi	r22, 0x06	; 6
    238c:	42 e0       	ldi	r20, 0x02	; 2
    238e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL_PORT , KEYPAD_C3_PIN , INPUT_PULLUP_PIN);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	67 e0       	ldi	r22, 0x07	; 7
    2396:	42 e0       	ldi	r20, 0x02	; 2
    2398:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_SetPinDirection>

}
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <KeyPad_GetKey>:

/************************************************************************/

uint8 KeyPad_GetKey(void){
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	a3 97       	sbiw	r28, 0x23	; 35
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61

	uint8 Button_State = HIGH;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Rows_Arr[]= ROW_PINS;
    23ba:	1e 82       	std	Y+6, r1	; 0x06
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8f 83       	std	Y+7, r24	; 0x07
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	88 87       	std	Y+8, r24	; 0x08
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	89 87       	std	Y+9, r24	; 0x09
	uint8 Cols_Arr[]= COLS_PINS;
    23c8:	84 e0       	ldi	r24, 0x04	; 4
    23ca:	8a 87       	std	Y+10, r24	; 0x0a
    23cc:	85 e0       	ldi	r24, 0x05	; 5
    23ce:	8b 87       	std	Y+11, r24	; 0x0b
    23d0:	86 e0       	ldi	r24, 0x06	; 6
    23d2:	8c 87       	std	Y+12, r24	; 0x0c
    23d4:	87 e0       	ldi	r24, 0x07	; 7
    23d6:	8d 87       	std	Y+13, r24	; 0x0d
	uint8 Keys[ROWS_NUM][COLS_NUM] = KEYPAD_MAP;
    23d8:	ce 01       	movw	r24, r28
    23da:	0e 96       	adiw	r24, 0x0e	; 14
    23dc:	98 a3       	std	Y+32, r25	; 0x20
    23de:	8f 8f       	std	Y+31, r24	; 0x1f
    23e0:	e8 e6       	ldi	r30, 0x68	; 104
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	fa a3       	std	Y+34, r31	; 0x22
    23e6:	e9 a3       	std	Y+33, r30	; 0x21
    23e8:	f0 e1       	ldi	r31, 0x10	; 16
    23ea:	fb a3       	std	Y+35, r31	; 0x23
    23ec:	e9 a1       	ldd	r30, Y+33	; 0x21
    23ee:	fa a1       	ldd	r31, Y+34	; 0x22
    23f0:	00 80       	ld	r0, Z
    23f2:	89 a1       	ldd	r24, Y+33	; 0x21
    23f4:	9a a1       	ldd	r25, Y+34	; 0x22
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	9a a3       	std	Y+34, r25	; 0x22
    23fa:	89 a3       	std	Y+33, r24	; 0x21
    23fc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    23fe:	f8 a1       	ldd	r31, Y+32	; 0x20
    2400:	00 82       	st	Z, r0
    2402:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2404:	98 a1       	ldd	r25, Y+32	; 0x20
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	98 a3       	std	Y+32, r25	; 0x20
    240a:	8f 8f       	std	Y+31, r24	; 0x1f
    240c:	9b a1       	ldd	r25, Y+35	; 0x23
    240e:	91 50       	subi	r25, 0x01	; 1
    2410:	9b a3       	std	Y+35, r25	; 0x23
    2412:	eb a1       	ldd	r30, Y+35	; 0x23
    2414:	ee 23       	and	r30, r30
    2416:	51 f7       	brne	.-44     	; 0x23ec <KeyPad_GetKey+0x4a>

	for(int i = 0 ; i < ROWS_NUM ; i++){
    2418:	1c 82       	std	Y+4, r1	; 0x04
    241a:	1b 82       	std	Y+3, r1	; 0x03
    241c:	68 c0       	rjmp	.+208    	; 0x24ee <KeyPad_GetKey+0x14c>

		DIO_SetPinValue(KEYPAD_ROW_PORT ,Rows_Arr[i], PIN_LOW);
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	ce 01       	movw	r24, r28
    2424:	06 96       	adiw	r24, 0x06	; 6
    2426:	fc 01       	movw	r30, r24
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	90 81       	ld	r25, Z
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	69 2f       	mov	r22, r25
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>

		for(int j = 0 ; j < COLS_NUM ; j++){
    2438:	1a 82       	std	Y+2, r1	; 0x02
    243a:	19 82       	std	Y+1, r1	; 0x01
    243c:	40 c0       	rjmp	.+128    	; 0x24be <KeyPad_GetKey+0x11c>

			DIO_GetPinValue(KEYPAD_COL_PORT , Cols_Arr[j] , &Button_State);
    243e:	29 81       	ldd	r18, Y+1	; 0x01
    2440:	3a 81       	ldd	r19, Y+2	; 0x02
    2442:	ce 01       	movw	r24, r28
    2444:	0a 96       	adiw	r24, 0x0a	; 10
    2446:	fc 01       	movw	r30, r24
    2448:	e2 0f       	add	r30, r18
    244a:	f3 1f       	adc	r31, r19
    244c:	90 81       	ld	r25, Z
    244e:	9e 01       	movw	r18, r28
    2450:	2b 5f       	subi	r18, 0xFB	; 251
    2452:	3f 4f       	sbci	r19, 0xFF	; 255
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	69 2f       	mov	r22, r25
    2458:	a9 01       	movw	r20, r18
    245a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_GetPinValue>
						{DIO_GetPinValue(KEYPAD_COL_PORT , Cols_Arr[j] , &Button_State);}
						return  Keys[i][j];
					}
				}*/

			if(Button_State == LOW){
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	88 23       	and	r24, r24
    2462:	41 f5       	brne	.+80     	; 0x24b4 <KeyPad_GetKey+0x112>
    2464:	10 c0       	rjmp	.+32     	; 0x2486 <KeyPad_GetKey+0xe4>
				while(Button_State == LOW){
					DIO_GetPinValue(KEYPAD_COL_PORT , Cols_Arr[j] , &Button_State);
    2466:	29 81       	ldd	r18, Y+1	; 0x01
    2468:	3a 81       	ldd	r19, Y+2	; 0x02
    246a:	ce 01       	movw	r24, r28
    246c:	0a 96       	adiw	r24, 0x0a	; 10
    246e:	fc 01       	movw	r30, r24
    2470:	e2 0f       	add	r30, r18
    2472:	f3 1f       	adc	r31, r19
    2474:	90 81       	ld	r25, Z
    2476:	9e 01       	movw	r18, r28
    2478:	2b 5f       	subi	r18, 0xFB	; 251
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	69 2f       	mov	r22, r25
    2480:	a9 01       	movw	r20, r18
    2482:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_GetPinValue>
						return  Keys[i][j];
					}
				}*/

			if(Button_State == LOW){
				while(Button_State == LOW){
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	88 23       	and	r24, r24
    248a:	69 f3       	breq	.-38     	; 0x2466 <KeyPad_GetKey+0xc4>
					DIO_GetPinValue(KEYPAD_COL_PORT , Cols_Arr[j] , &Button_State);
				}
				return Keys[i][j];
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	49 81       	ldd	r20, Y+1	; 0x01
    2492:	5a 81       	ldd	r21, Y+2	; 0x02
    2494:	9c 01       	movw	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	84 0f       	add	r24, r20
    24a8:	95 1f       	adc	r25, r21
    24aa:	fc 01       	movw	r30, r24
    24ac:	3d 96       	adiw	r30, 0x0d	; 13
    24ae:	80 81       	ld	r24, Z
    24b0:	8e 8f       	std	Y+30, r24	; 0x1e
    24b2:	25 c0       	rjmp	.+74     	; 0x24fe <KeyPad_GetKey+0x15c>

	for(int i = 0 ; i < ROWS_NUM ; i++){

		DIO_SetPinValue(KEYPAD_ROW_PORT ,Rows_Arr[i], PIN_LOW);

		for(int j = 0 ; j < COLS_NUM ; j++){
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	84 30       	cpi	r24, 0x04	; 4
    24c4:	91 05       	cpc	r25, r1
    24c6:	0c f4       	brge	.+2      	; 0x24ca <KeyPad_GetKey+0x128>
    24c8:	ba cf       	rjmp	.-140    	; 0x243e <KeyPad_GetKey+0x9c>
				}
				return Keys[i][j];
			}
		}

		DIO_SetPinValue(KEYPAD_ROW_PORT ,Rows_Arr[i], PIN_HIGH);
    24ca:	2b 81       	ldd	r18, Y+3	; 0x03
    24cc:	3c 81       	ldd	r19, Y+4	; 0x04
    24ce:	ce 01       	movw	r24, r28
    24d0:	06 96       	adiw	r24, 0x06	; 6
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	90 81       	ld	r25, Z
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	69 2f       	mov	r22, r25
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_SetPinValue>
	uint8 Button_State = HIGH;
	uint8 Rows_Arr[]= ROW_PINS;
	uint8 Cols_Arr[]= COLS_PINS;
	uint8 Keys[ROWS_NUM][COLS_NUM] = KEYPAD_MAP;

	for(int i = 0 ; i < ROWS_NUM ; i++){
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	84 30       	cpi	r24, 0x04	; 4
    24f4:	91 05       	cpc	r25, r1
    24f6:	0c f4       	brge	.+2      	; 0x24fa <KeyPad_GetKey+0x158>
    24f8:	92 cf       	rjmp	.-220    	; 0x241e <KeyPad_GetKey+0x7c>
			}
		}

		DIO_SetPinValue(KEYPAD_ROW_PORT ,Rows_Arr[i], PIN_HIGH);
	}
	return NO_PRESSED_KEY;
    24fa:	9e e6       	ldi	r25, 0x6E	; 110
    24fc:	9e 8f       	std	Y+30, r25	; 0x1e
    24fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    2500:	a3 96       	adiw	r28, 0x23	; 35
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <main>:
#include "DIO/DIO_interface.h"

#include "Keypad_interface.h"
#include "LCD/CLCD_interface.h"

int main(){
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	0f 92       	push	r0
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	CLCD_voidInit();
    251c:	0e 94 83 0a 	call	0x1506	; 0x1506 <CLCD_voidInit>
	KeyPad_Init();
    2520:	0e 94 a2 11 	call	0x2344	; 0x2344 <KeyPad_Init>

	while(1){
		key = KeyPad_GetKey();
    2524:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <KeyPad_GetKey>
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	03 c0       	rjmp	.+6      	; 0x2532 <main+0x20>
		while (key == 'n'){
			key = KeyPad_GetKey();
    252c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <KeyPad_GetKey>
    2530:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidInit();
	KeyPad_Init();

	while(1){
		key = KeyPad_GetKey();
		while (key == 'n'){
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	8e 36       	cpi	r24, 0x6E	; 110
    2536:	d1 f3       	breq	.-12     	; 0x252c <main+0x1a>
			key = KeyPad_GetKey();
		}
		CLCD_voidSendData(key);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	0e 94 0f 08 	call	0x101e	; 0x101e <CLCD_voidSendData>
    253e:	f2 cf       	rjmp	.-28     	; 0x2524 <main+0x12>

00002540 <__divmodsi4>:
    2540:	97 fb       	bst	r25, 7
    2542:	09 2e       	mov	r0, r25
    2544:	05 26       	eor	r0, r21
    2546:	0e d0       	rcall	.+28     	; 0x2564 <__divmodsi4_neg1>
    2548:	57 fd       	sbrc	r21, 7
    254a:	04 d0       	rcall	.+8      	; 0x2554 <__divmodsi4_neg2>
    254c:	14 d0       	rcall	.+40     	; 0x2576 <__udivmodsi4>
    254e:	0a d0       	rcall	.+20     	; 0x2564 <__divmodsi4_neg1>
    2550:	00 1c       	adc	r0, r0
    2552:	38 f4       	brcc	.+14     	; 0x2562 <__divmodsi4_exit>

00002554 <__divmodsi4_neg2>:
    2554:	50 95       	com	r21
    2556:	40 95       	com	r20
    2558:	30 95       	com	r19
    255a:	21 95       	neg	r18
    255c:	3f 4f       	sbci	r19, 0xFF	; 255
    255e:	4f 4f       	sbci	r20, 0xFF	; 255
    2560:	5f 4f       	sbci	r21, 0xFF	; 255

00002562 <__divmodsi4_exit>:
    2562:	08 95       	ret

00002564 <__divmodsi4_neg1>:
    2564:	f6 f7       	brtc	.-4      	; 0x2562 <__divmodsi4_exit>
    2566:	90 95       	com	r25
    2568:	80 95       	com	r24
    256a:	70 95       	com	r23
    256c:	61 95       	neg	r22
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	8f 4f       	sbci	r24, 0xFF	; 255
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	08 95       	ret

00002576 <__udivmodsi4>:
    2576:	a1 e2       	ldi	r26, 0x21	; 33
    2578:	1a 2e       	mov	r1, r26
    257a:	aa 1b       	sub	r26, r26
    257c:	bb 1b       	sub	r27, r27
    257e:	fd 01       	movw	r30, r26
    2580:	0d c0       	rjmp	.+26     	; 0x259c <__udivmodsi4_ep>

00002582 <__udivmodsi4_loop>:
    2582:	aa 1f       	adc	r26, r26
    2584:	bb 1f       	adc	r27, r27
    2586:	ee 1f       	adc	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	a2 17       	cp	r26, r18
    258c:	b3 07       	cpc	r27, r19
    258e:	e4 07       	cpc	r30, r20
    2590:	f5 07       	cpc	r31, r21
    2592:	20 f0       	brcs	.+8      	; 0x259c <__udivmodsi4_ep>
    2594:	a2 1b       	sub	r26, r18
    2596:	b3 0b       	sbc	r27, r19
    2598:	e4 0b       	sbc	r30, r20
    259a:	f5 0b       	sbc	r31, r21

0000259c <__udivmodsi4_ep>:
    259c:	66 1f       	adc	r22, r22
    259e:	77 1f       	adc	r23, r23
    25a0:	88 1f       	adc	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	1a 94       	dec	r1
    25a6:	69 f7       	brne	.-38     	; 0x2582 <__udivmodsi4_loop>
    25a8:	60 95       	com	r22
    25aa:	70 95       	com	r23
    25ac:	80 95       	com	r24
    25ae:	90 95       	com	r25
    25b0:	9b 01       	movw	r18, r22
    25b2:	ac 01       	movw	r20, r24
    25b4:	bd 01       	movw	r22, r26
    25b6:	cf 01       	movw	r24, r30
    25b8:	08 95       	ret

000025ba <__prologue_saves__>:
    25ba:	2f 92       	push	r2
    25bc:	3f 92       	push	r3
    25be:	4f 92       	push	r4
    25c0:	5f 92       	push	r5
    25c2:	6f 92       	push	r6
    25c4:	7f 92       	push	r7
    25c6:	8f 92       	push	r8
    25c8:	9f 92       	push	r9
    25ca:	af 92       	push	r10
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	ca 1b       	sub	r28, r26
    25e4:	db 0b       	sbc	r29, r27
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	09 94       	ijmp

000025f2 <__epilogue_restores__>:
    25f2:	2a 88       	ldd	r2, Y+18	; 0x12
    25f4:	39 88       	ldd	r3, Y+17	; 0x11
    25f6:	48 88       	ldd	r4, Y+16	; 0x10
    25f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    25fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2600:	9b 84       	ldd	r9, Y+11	; 0x0b
    2602:	aa 84       	ldd	r10, Y+10	; 0x0a
    2604:	b9 84       	ldd	r11, Y+9	; 0x09
    2606:	c8 84       	ldd	r12, Y+8	; 0x08
    2608:	df 80       	ldd	r13, Y+7	; 0x07
    260a:	ee 80       	ldd	r14, Y+6	; 0x06
    260c:	fd 80       	ldd	r15, Y+5	; 0x05
    260e:	0c 81       	ldd	r16, Y+4	; 0x04
    2610:	1b 81       	ldd	r17, Y+3	; 0x03
    2612:	aa 81       	ldd	r26, Y+2	; 0x02
    2614:	b9 81       	ldd	r27, Y+1	; 0x01
    2616:	ce 0f       	add	r28, r30
    2618:	d1 1d       	adc	r29, r1
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	ed 01       	movw	r28, r26
    2626:	08 95       	ret

00002628 <_exit>:
    2628:	f8 94       	cli

0000262a <__stop_program>:
    262a:	ff cf       	rjmp	.-2      	; 0x262a <__stop_program>
