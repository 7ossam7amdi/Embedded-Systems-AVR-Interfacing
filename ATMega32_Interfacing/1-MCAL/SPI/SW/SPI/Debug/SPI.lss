
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a92  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000bb8  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000005a7  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 05 	call	0xa7c	; 0xa7c <main>
  64:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
#include "../LIB/Bit_Math.h"
#include "DIO_register.h"
#include "DIO_interface.h"


uint8 DIO_SetPinDirection(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Direction){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_ErrorState = 0;
  86:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <DIO_SetPinDirection+0x24>
  8e:	b9 c1       	rjmp	.+882    	; 0x402 <DIO_SetPinDirection+0x396>

		if(Copy_Direction == INPUT_PIN)
  90:	8c 81       	ldd	r24, Y+4	; 0x04
  92:	88 23       	and	r24, r24
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_SetPinDirection+0x2c>
  96:	77 c0       	rjmp	.+238    	; 0x186 <DIO_SetPinDirection+0x11a>
		{
			switch(Copy_Port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	3a 87       	std	Y+10, r19	; 0x0a
  a0:	29 87       	std	Y+9, r18	; 0x09
  a2:	89 85       	ldd	r24, Y+9	; 0x09
  a4:	9a 85       	ldd	r25, Y+10	; 0x0a
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	59 f1       	breq	.+86     	; 0x102 <DIO_SetPinDirection+0x96>
  ac:	29 85       	ldd	r18, Y+9	; 0x09
  ae:	3a 85       	ldd	r19, Y+10	; 0x0a
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_SetPinDirection+0x54>
  b6:	89 85       	ldd	r24, Y+9	; 0x09
  b8:	9a 85       	ldd	r25, Y+10	; 0x0a
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_SetPinDirection+0x6c>
  be:	60 c0       	rjmp	.+192    	; 0x180 <DIO_SetPinDirection+0x114>
  c0:	29 85       	ldd	r18, Y+9	; 0x09
  c2:	3a 85       	ldd	r19, Y+10	; 0x0a
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	89 f1       	breq	.+98     	; 0x12c <DIO_SetPinDirection+0xc0>
  ca:	89 85       	ldd	r24, Y+9	; 0x09
  cc:	9a 85       	ldd	r25, Y+10	; 0x0a
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_SetPinDirection+0x6a>
  d4:	40 c0       	rjmp	.+128    	; 0x156 <DIO_SetPinDirection+0xea>
  d6:	54 c0       	rjmp	.+168    	; 0x180 <DIO_SetPinDirection+0x114>
			{
			case PORT_A:   CLR_BIT(DDRA,Copy_Pin);  break;
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_SetPinDirection+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_SetPinDirection+0x86>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	8c 93       	st	X, r24
 100:	82 c1       	rjmp	.+772    	; 0x406 <DIO_SetPinDirection+0x39a>
			case PORT_B:   CLR_BIT(DDRB,Copy_Pin);  break;
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	6d c1       	rjmp	.+730    	; 0x406 <DIO_SetPinDirection+0x39a>
			case PORT_C:   CLR_BIT(DDRC,Copy_Pin);  break;
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	58 c1       	rjmp	.+688    	; 0x406 <DIO_SetPinDirection+0x39a>
			case PORT_D:   CLR_BIT(DDRD,Copy_Pin);  break;
 156:	a1 e3       	ldi	r26, 0x31	; 49
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e1 e3       	ldi	r30, 0x31	; 49
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinDirection+0x108>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinDirection+0x104>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	43 c1       	rjmp	.+646    	; 0x406 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	40 c1       	rjmp	.+640    	; 0x406 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == OUTPUT_PIN)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_SetPinDirection+0x122>
 18c:	72 c0       	rjmp	.+228    	; 0x272 <DIO_SetPinDirection+0x206>
		{
			switch(Copy_Port)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	38 87       	std	Y+8, r19	; 0x08
 196:	2f 83       	std	Y+7, r18	; 0x07
 198:	8f 81       	ldd	r24, Y+7	; 0x07
 19a:	98 85       	ldd	r25, Y+8	; 0x08
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	49 f1       	breq	.+82     	; 0x1f4 <DIO_SetPinDirection+0x188>
 1a2:	2f 81       	ldd	r18, Y+7	; 0x07
 1a4:	38 85       	ldd	r19, Y+8	; 0x08
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_SetPinDirection+0x14a>
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_SetPinDirection+0x160>
 1b4:	5b c0       	rjmp	.+182    	; 0x26c <DIO_SetPinDirection+0x200>
 1b6:	2f 81       	ldd	r18, Y+7	; 0x07
 1b8:	38 85       	ldd	r19, Y+8	; 0x08
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <DIO_SetPinDirection+0x1b0>
 1c0:	8f 81       	ldd	r24, Y+7	; 0x07
 1c2:	98 85       	ldd	r25, Y+8	; 0x08
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	e9 f1       	breq	.+122    	; 0x244 <DIO_SetPinDirection+0x1d8>
 1ca:	50 c0       	rjmp	.+160    	; 0x26c <DIO_SetPinDirection+0x200>
			{
			case PORT_A:    SET_BIT(DDRA,Copy_Pin); break;
 1cc:	aa e3       	ldi	r26, 0x3A	; 58
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SetPinDirection+0x17e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SetPinDirection+0x17a>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	09 c1       	rjmp	.+530    	; 0x406 <DIO_SetPinDirection+0x39a>
			case PORT_B:    SET_BIT(DDRB,Copy_Pin); break;
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SetPinDirection+0x1a6>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SetPinDirection+0x1a2>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	f5 c0       	rjmp	.+490    	; 0x406 <DIO_SetPinDirection+0x39a>
			case PORT_C:    SET_BIT(DDRC,Copy_Pin); break;
 21c:	a4 e3       	ldi	r26, 0x34	; 52
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e3       	ldi	r30, 0x34	; 52
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDirection+0x1ce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDirection+0x1ca>
 23e:	84 2b       	or	r24, r20
 240:	8c 93       	st	X, r24
 242:	e1 c0       	rjmp	.+450    	; 0x406 <DIO_SetPinDirection+0x39a>
			case PORT_D:    SET_BIT(DDRD,Copy_Pin); break;
 244:	a1 e3       	ldi	r26, 0x31	; 49
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e1 e3       	ldi	r30, 0x31	; 49
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPinDirection+0x1f6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPinDirection+0x1f2>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
 26a:	cd c0       	rjmp	.+410    	; 0x406 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	ca c0       	rjmp	.+404    	; 0x406 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == INPUT_PULLUP_PIN)
 272:	8c 81       	ldd	r24, Y+4	; 0x04
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	09 f0       	breq	.+2      	; 0x27a <DIO_SetPinDirection+0x20e>
 278:	c1 c0       	rjmp	.+386    	; 0x3fc <DIO_SetPinDirection+0x390>
		{
			switch(Copy_Port)
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	3e 83       	std	Y+6, r19	; 0x06
 282:	2d 83       	std	Y+5, r18	; 0x05
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	91 05       	cpc	r25, r1
 28c:	09 f4       	brne	.+2      	; 0x290 <DIO_SetPinDirection+0x224>
 28e:	3e c0       	rjmp	.+124    	; 0x30c <DIO_SetPinDirection+0x2a0>
 290:	2d 81       	ldd	r18, Y+5	; 0x05
 292:	3e 81       	ldd	r19, Y+6	; 0x06
 294:	22 30       	cpi	r18, 0x02	; 2
 296:	31 05       	cpc	r19, r1
 298:	2c f4       	brge	.+10     	; 0x2a4 <DIO_SetPinDirection+0x238>
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	71 f0       	breq	.+28     	; 0x2be <DIO_SetPinDirection+0x252>
 2a2:	a9 c0       	rjmp	.+338    	; 0x3f6 <DIO_SetPinDirection+0x38a>
 2a4:	2d 81       	ldd	r18, Y+5	; 0x05
 2a6:	3e 81       	ldd	r19, Y+6	; 0x06
 2a8:	22 30       	cpi	r18, 0x02	; 2
 2aa:	31 05       	cpc	r19, r1
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <DIO_SetPinDirection+0x244>
 2ae:	55 c0       	rjmp	.+170    	; 0x35a <DIO_SetPinDirection+0x2ee>
 2b0:	8d 81       	ldd	r24, Y+5	; 0x05
 2b2:	9e 81       	ldd	r25, Y+6	; 0x06
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	91 05       	cpc	r25, r1
 2b8:	09 f4       	brne	.+2      	; 0x2bc <DIO_SetPinDirection+0x250>
 2ba:	76 c0       	rjmp	.+236    	; 0x3a8 <DIO_SetPinDirection+0x33c>
 2bc:	9c c0       	rjmp	.+312    	; 0x3f6 <DIO_SetPinDirection+0x38a>
			{
			case PORT_A:
				CLR_BIT(DDRA,Copy_Pin);
 2be:	aa e3       	ldi	r26, 0x3A	; 58
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	ea e3       	ldi	r30, 0x3A	; 58
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_SetPinDirection+0x26e>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	2a 95       	dec	r18
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_SetPinDirection+0x26a>
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_Pin);
 2e4:	ab e3       	ldi	r26, 0x3B	; 59
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	eb e3       	ldi	r30, 0x3B	; 59
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_SetPinDirection+0x296>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_SetPinDirection+0x292>
 306:	84 2b       	or	r24, r20
 308:	8c 93       	st	X, r24
 30a:	7d c0       	rjmp	.+250    	; 0x406 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_B:
				CLR_BIT(DDRB,Copy_Pin);
 30c:	a7 e3       	ldi	r26, 0x37	; 55
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e7 e3       	ldi	r30, 0x37	; 55
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPinDirection+0x2bc>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	2a 95       	dec	r18
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPinDirection+0x2b8>
 32c:	80 95       	com	r24
 32e:	84 23       	and	r24, r20
 330:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_Pin);
 332:	a8 e3       	ldi	r26, 0x38	; 56
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e8 e3       	ldi	r30, 0x38	; 56
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_SetPinDirection+0x2e4>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_SetPinDirection+0x2e0>
 354:	84 2b       	or	r24, r20
 356:	8c 93       	st	X, r24
 358:	56 c0       	rjmp	.+172    	; 0x406 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_C:
				CLR_BIT(DDRC,Copy_Pin);
 35a:	a4 e3       	ldi	r26, 0x34	; 52
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e4 e3       	ldi	r30, 0x34	; 52
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_SetPinDirection+0x30a>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	2a 95       	dec	r18
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_SetPinDirection+0x306>
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_Pin);
 380:	a5 e3       	ldi	r26, 0x35	; 53
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e5 e3       	ldi	r30, 0x35	; 53
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 2e       	mov	r0, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinDirection+0x332>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinDirection+0x32e>
 3a2:	84 2b       	or	r24, r20
 3a4:	8c 93       	st	X, r24
 3a6:	2f c0       	rjmp	.+94     	; 0x406 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_D:
				CLR_BIT(DDRD,Copy_Pin);
 3a8:	a1 e3       	ldi	r26, 0x31	; 49
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e1 e3       	ldi	r30, 0x31	; 49
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	48 2f       	mov	r20, r24
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_SetPinDirection+0x358>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_SetPinDirection+0x354>
 3c8:	80 95       	com	r24
 3ca:	84 23       	and	r24, r20
 3cc:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_Pin);
 3ce:	a2 e3       	ldi	r26, 0x32	; 50
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e2 e3       	ldi	r30, 0x32	; 50
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_SetPinDirection+0x380>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_SetPinDirection+0x37c>
 3f0:	84 2b       	or	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <DIO_SetPinDirection+0x39a>
				break;
			default:	   Local_ErrorState = 1;    break;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <DIO_SetPinDirection+0x39a>
			}
		}
		else {
			Local_ErrorState = 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_SetPinDirection+0x39a>
		}
	}

	else {
		Local_ErrorState = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
 406:	89 81       	ldd	r24, Y+1	; 0x01
}
 408:	2a 96       	adiw	r28, 0x0a	; 10
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	cf 91       	pop	r28
 416:	df 91       	pop	r29
 418:	08 95       	ret

0000041a <DIO_SetPortDirection>:

/***************************************************************************/

uint8 DIO_SetPortDirection(uint8 Copy_Port, uint8 Copy_Direction){
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	00 d0       	rcall	.+0      	; 0x420 <DIO_SetPortDirection+0x6>
 420:	00 d0       	rcall	.+0      	; 0x422 <DIO_SetPortDirection+0x8>
 422:	0f 92       	push	r0
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	8a 83       	std	Y+2, r24	; 0x02
 42a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
 42c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	3d 83       	std	Y+5, r19	; 0x05
 436:	2c 83       	std	Y+4, r18	; 0x04
 438:	8c 81       	ldd	r24, Y+4	; 0x04
 43a:	9d 81       	ldd	r25, Y+5	; 0x05
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	91 05       	cpc	r25, r1
 440:	d1 f0       	breq	.+52     	; 0x476 <__stack+0x17>
 442:	2c 81       	ldd	r18, Y+4	; 0x04
 444:	3d 81       	ldd	r19, Y+5	; 0x05
 446:	22 30       	cpi	r18, 0x02	; 2
 448:	31 05       	cpc	r19, r1
 44a:	2c f4       	brge	.+10     	; 0x456 <DIO_SetPortDirection+0x3c>
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	9d 81       	ldd	r25, Y+5	; 0x05
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	61 f0       	breq	.+24     	; 0x46c <__stack+0xd>
 454:	1f c0       	rjmp	.+62     	; 0x494 <__stack+0x35>
 456:	2c 81       	ldd	r18, Y+4	; 0x04
 458:	3d 81       	ldd	r19, Y+5	; 0x05
 45a:	22 30       	cpi	r18, 0x02	; 2
 45c:	31 05       	cpc	r19, r1
 45e:	81 f0       	breq	.+32     	; 0x480 <__stack+0x21>
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	91 05       	cpc	r25, r1
 468:	81 f0       	breq	.+32     	; 0x48a <__stack+0x2b>
 46a:	14 c0       	rjmp	.+40     	; 0x494 <__stack+0x35>
	case PORT_A:    DDRA = Copy_Direction; break;
 46c:	ea e3       	ldi	r30, 0x3A	; 58
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	80 83       	st	Z, r24
 474:	11 c0       	rjmp	.+34     	; 0x498 <__stack+0x39>
	case PORT_B:    DDRB = Copy_Direction; break;
 476:	e7 e3       	ldi	r30, 0x37	; 55
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	80 83       	st	Z, r24
 47e:	0c c0       	rjmp	.+24     	; 0x498 <__stack+0x39>
	case PORT_C:    DDRC = Copy_Direction; break;
 480:	e4 e3       	ldi	r30, 0x34	; 52
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	80 83       	st	Z, r24
 488:	07 c0       	rjmp	.+14     	; 0x498 <__stack+0x39>
	case PORT_D:    DDRD = Copy_Direction; break;
 48a:	e1 e3       	ldi	r30, 0x31	; 49
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	80 83       	st	Z, r24
 492:	02 c0       	rjmp	.+4      	; 0x498 <__stack+0x39>
	default:	   Local_ErrorState = 1;   break;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_ErrorState;
 498:	89 81       	ldd	r24, Y+1	; 0x01
}
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <DIO_SetPinValue>:


/***************************************************************************/

uint8 DIO_SetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Value){
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	28 97       	sbiw	r28, 0x08	; 8
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	8a 83       	std	Y+2, r24	; 0x02
 4c0:	6b 83       	std	Y+3, r22	; 0x03
 4c2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
 4c4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	88 30       	cpi	r24, 0x08	; 8
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <DIO_SetPinValue+0x24>
 4cc:	f1 c0       	rjmp	.+482    	; 0x6b0 <DIO_SetPinValue+0x206>

		if(Copy_Value == PIN_LOW)
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	88 23       	and	r24, r24
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <DIO_SetPinValue+0x2c>
 4d4:	77 c0       	rjmp	.+238    	; 0x5c4 <DIO_SetPinValue+0x11a>
		{
			switch(Copy_Port)
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	38 87       	std	Y+8, r19	; 0x08
 4de:	2f 83       	std	Y+7, r18	; 0x07
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	91 05       	cpc	r25, r1
 4e8:	59 f1       	breq	.+86     	; 0x540 <DIO_SetPinValue+0x96>
 4ea:	2f 81       	ldd	r18, Y+7	; 0x07
 4ec:	38 85       	ldd	r19, Y+8	; 0x08
 4ee:	22 30       	cpi	r18, 0x02	; 2
 4f0:	31 05       	cpc	r19, r1
 4f2:	2c f4       	brge	.+10     	; 0x4fe <DIO_SetPinValue+0x54>
 4f4:	8f 81       	ldd	r24, Y+7	; 0x07
 4f6:	98 85       	ldd	r25, Y+8	; 0x08
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	69 f0       	breq	.+26     	; 0x516 <DIO_SetPinValue+0x6c>
 4fc:	60 c0       	rjmp	.+192    	; 0x5be <DIO_SetPinValue+0x114>
 4fe:	2f 81       	ldd	r18, Y+7	; 0x07
 500:	38 85       	ldd	r19, Y+8	; 0x08
 502:	22 30       	cpi	r18, 0x02	; 2
 504:	31 05       	cpc	r19, r1
 506:	89 f1       	breq	.+98     	; 0x56a <DIO_SetPinValue+0xc0>
 508:	8f 81       	ldd	r24, Y+7	; 0x07
 50a:	98 85       	ldd	r25, Y+8	; 0x08
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	91 05       	cpc	r25, r1
 510:	09 f4       	brne	.+2      	; 0x514 <DIO_SetPinValue+0x6a>
 512:	40 c0       	rjmp	.+128    	; 0x594 <DIO_SetPinValue+0xea>
 514:	54 c0       	rjmp	.+168    	; 0x5be <DIO_SetPinValue+0x114>
			{
			case PORT_A:   CLR_BIT(PORTA,Copy_Pin);  break;
 516:	ab e3       	ldi	r26, 0x3B	; 59
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	eb e3       	ldi	r30, 0x3B	; 59
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_SetPinValue+0x8a>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_SetPinValue+0x86>
 538:	80 95       	com	r24
 53a:	84 23       	and	r24, r20
 53c:	8c 93       	st	X, r24
 53e:	ba c0       	rjmp	.+372    	; 0x6b4 <DIO_SetPinValue+0x20a>
			case PORT_B:   CLR_BIT(PORTB,Copy_Pin);  break;
 540:	a8 e3       	ldi	r26, 0x38	; 56
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	e8 e3       	ldi	r30, 0x38	; 56
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	48 2f       	mov	r20, r24
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 2e       	mov	r0, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_SetPinValue+0xb4>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_SetPinValue+0xb0>
 562:	80 95       	com	r24
 564:	84 23       	and	r24, r20
 566:	8c 93       	st	X, r24
 568:	a5 c0       	rjmp	.+330    	; 0x6b4 <DIO_SetPinValue+0x20a>
			case PORT_C:   CLR_BIT(PORTC,Copy_Pin);  break;
 56a:	a5 e3       	ldi	r26, 0x35	; 53
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	e5 e3       	ldi	r30, 0x35	; 53
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	48 2f       	mov	r20, r24
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 2e       	mov	r0, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_SetPinValue+0xde>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	0a 94       	dec	r0
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_SetPinValue+0xda>
 58c:	80 95       	com	r24
 58e:	84 23       	and	r24, r20
 590:	8c 93       	st	X, r24
 592:	90 c0       	rjmp	.+288    	; 0x6b4 <DIO_SetPinValue+0x20a>
			case PORT_D:   CLR_BIT(PORTD,Copy_Pin);  break;
 594:	a2 e3       	ldi	r26, 0x32	; 50
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	e2 e3       	ldi	r30, 0x32	; 50
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	48 2f       	mov	r20, r24
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 2e       	mov	r0, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_SetPinValue+0x108>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_SetPinValue+0x104>
 5b6:	80 95       	com	r24
 5b8:	84 23       	and	r24, r20
 5ba:	8c 93       	st	X, r24
 5bc:	7b c0       	rjmp	.+246    	; 0x6b4 <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	78 c0       	rjmp	.+240    	; 0x6b4 <DIO_SetPinValue+0x20a>
			}
		}

		else if(Copy_Value == PIN_HIGH)
 5c4:	8c 81       	ldd	r24, Y+4	; 0x04
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <DIO_SetPinValue+0x122>
 5ca:	74 c0       	rjmp	.+232    	; 0x6b4 <DIO_SetPinValue+0x20a>
		{
			switch(Copy_Port)
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	3e 83       	std	Y+6, r19	; 0x06
 5d4:	2d 83       	std	Y+5, r18	; 0x05
 5d6:	8d 81       	ldd	r24, Y+5	; 0x05
 5d8:	9e 81       	ldd	r25, Y+6	; 0x06
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	91 05       	cpc	r25, r1
 5de:	49 f1       	breq	.+82     	; 0x632 <DIO_SetPinValue+0x188>
 5e0:	2d 81       	ldd	r18, Y+5	; 0x05
 5e2:	3e 81       	ldd	r19, Y+6	; 0x06
 5e4:	22 30       	cpi	r18, 0x02	; 2
 5e6:	31 05       	cpc	r19, r1
 5e8:	2c f4       	brge	.+10     	; 0x5f4 <DIO_SetPinValue+0x14a>
 5ea:	8d 81       	ldd	r24, Y+5	; 0x05
 5ec:	9e 81       	ldd	r25, Y+6	; 0x06
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	61 f0       	breq	.+24     	; 0x60a <DIO_SetPinValue+0x160>
 5f2:	5b c0       	rjmp	.+182    	; 0x6aa <DIO_SetPinValue+0x200>
 5f4:	2d 81       	ldd	r18, Y+5	; 0x05
 5f6:	3e 81       	ldd	r19, Y+6	; 0x06
 5f8:	22 30       	cpi	r18, 0x02	; 2
 5fa:	31 05       	cpc	r19, r1
 5fc:	71 f1       	breq	.+92     	; 0x65a <DIO_SetPinValue+0x1b0>
 5fe:	8d 81       	ldd	r24, Y+5	; 0x05
 600:	9e 81       	ldd	r25, Y+6	; 0x06
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	91 05       	cpc	r25, r1
 606:	e9 f1       	breq	.+122    	; 0x682 <DIO_SetPinValue+0x1d8>
 608:	50 c0       	rjmp	.+160    	; 0x6aa <DIO_SetPinValue+0x200>
			{
			case PORT_A:    SET_BIT(PORTA,Copy_Pin); break;
 60a:	ab e3       	ldi	r26, 0x3B	; 59
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	eb e3       	ldi	r30, 0x3B	; 59
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	48 2f       	mov	r20, r24
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 2e       	mov	r0, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_SetPinValue+0x17e>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_SetPinValue+0x17a>
 62c:	84 2b       	or	r24, r20
 62e:	8c 93       	st	X, r24
 630:	41 c0       	rjmp	.+130    	; 0x6b4 <DIO_SetPinValue+0x20a>
			case PORT_B:    SET_BIT(PORTB,Copy_Pin); break;
 632:	a8 e3       	ldi	r26, 0x38	; 56
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e8 e3       	ldi	r30, 0x38	; 56
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	48 2f       	mov	r20, r24
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 2e       	mov	r0, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_SetPinValue+0x1a6>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	0a 94       	dec	r0
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_SetPinValue+0x1a2>
 654:	84 2b       	or	r24, r20
 656:	8c 93       	st	X, r24
 658:	2d c0       	rjmp	.+90     	; 0x6b4 <DIO_SetPinValue+0x20a>
			case PORT_C:    SET_BIT(PORTC,Copy_Pin); break;
 65a:	a5 e3       	ldi	r26, 0x35	; 53
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e5 e3       	ldi	r30, 0x35	; 53
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	48 2f       	mov	r20, r24
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 2e       	mov	r0, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_SetPinValue+0x1ce>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_SetPinValue+0x1ca>
 67c:	84 2b       	or	r24, r20
 67e:	8c 93       	st	X, r24
 680:	19 c0       	rjmp	.+50     	; 0x6b4 <DIO_SetPinValue+0x20a>
			case PORT_D:    SET_BIT(PORTD,Copy_Pin); break;
 682:	a2 e3       	ldi	r26, 0x32	; 50
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e2 e3       	ldi	r30, 0x32	; 50
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	48 2f       	mov	r20, r24
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	28 2f       	mov	r18, r24
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 2e       	mov	r0, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_SetPinValue+0x1f6>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	0a 94       	dec	r0
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_SetPinValue+0x1f2>
 6a4:	84 2b       	or	r24, r20
 6a6:	8c 93       	st	X, r24
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SetPinValue+0x20a>
			}
		}
	}
	else {
		Local_ErrorState = 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b6:	28 96       	adiw	r28, 0x08	; 8
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	cf 91       	pop	r28
 6c4:	df 91       	pop	r29
 6c6:	08 95       	ret

000006c8 <DIO_SetPortValue>:


/***************************************************************************/

uint8 DIO_SetPortValue(uint8 Copy_Port, uint8 Copy_Value){
 6c8:	df 93       	push	r29
 6ca:	cf 93       	push	r28
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <DIO_SetPortValue+0x6>
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <DIO_SetPortValue+0x8>
 6d0:	0f 92       	push	r0
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	8a 83       	std	Y+2, r24	; 0x02
 6d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
 6da:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	3d 83       	std	Y+5, r19	; 0x05
 6e4:	2c 83       	std	Y+4, r18	; 0x04
 6e6:	8c 81       	ldd	r24, Y+4	; 0x04
 6e8:	9d 81       	ldd	r25, Y+5	; 0x05
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	91 05       	cpc	r25, r1
 6ee:	d1 f0       	breq	.+52     	; 0x724 <DIO_SetPortValue+0x5c>
 6f0:	2c 81       	ldd	r18, Y+4	; 0x04
 6f2:	3d 81       	ldd	r19, Y+5	; 0x05
 6f4:	22 30       	cpi	r18, 0x02	; 2
 6f6:	31 05       	cpc	r19, r1
 6f8:	2c f4       	brge	.+10     	; 0x704 <DIO_SetPortValue+0x3c>
 6fa:	8c 81       	ldd	r24, Y+4	; 0x04
 6fc:	9d 81       	ldd	r25, Y+5	; 0x05
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	61 f0       	breq	.+24     	; 0x71a <DIO_SetPortValue+0x52>
 702:	1f c0       	rjmp	.+62     	; 0x742 <DIO_SetPortValue+0x7a>
 704:	2c 81       	ldd	r18, Y+4	; 0x04
 706:	3d 81       	ldd	r19, Y+5	; 0x05
 708:	22 30       	cpi	r18, 0x02	; 2
 70a:	31 05       	cpc	r19, r1
 70c:	81 f0       	breq	.+32     	; 0x72e <DIO_SetPortValue+0x66>
 70e:	8c 81       	ldd	r24, Y+4	; 0x04
 710:	9d 81       	ldd	r25, Y+5	; 0x05
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	91 05       	cpc	r25, r1
 716:	81 f0       	breq	.+32     	; 0x738 <DIO_SetPortValue+0x70>
 718:	14 c0       	rjmp	.+40     	; 0x742 <DIO_SetPortValue+0x7a>
	case PORT_A:    PORTA = Copy_Value; break;
 71a:	eb e3       	ldi	r30, 0x3B	; 59
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	80 83       	st	Z, r24
 722:	11 c0       	rjmp	.+34     	; 0x746 <DIO_SetPortValue+0x7e>
	case PORT_B:    PORTB = Copy_Value; break;
 724:	e8 e3       	ldi	r30, 0x38	; 56
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	80 83       	st	Z, r24
 72c:	0c c0       	rjmp	.+24     	; 0x746 <DIO_SetPortValue+0x7e>
	case PORT_C:    PORTC = Copy_Value; break;
 72e:	e5 e3       	ldi	r30, 0x35	; 53
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	80 83       	st	Z, r24
 736:	07 c0       	rjmp	.+14     	; 0x746 <DIO_SetPortValue+0x7e>
	case PORT_D:    PORTD = Copy_Value; break;
 738:	e2 e3       	ldi	r30, 0x32	; 50
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	80 83       	st	Z, r24
 740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_SetPortValue+0x7e>
	default:	    Local_ErrorState = 1;   break;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 746:	89 81       	ldd	r24, Y+1	; 0x01
}
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	cf 91       	pop	r28
 754:	df 91       	pop	r29
 756:	08 95       	ret

00000758 <DIO_GetPinValue>:

/***************************************************************************/

uint8 DIO_GetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8* Return_PValue){
 758:	df 93       	push	r29
 75a:	cf 93       	push	r28
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
 760:	27 97       	sbiw	r28, 0x07	; 7
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	de bf       	out	0x3e, r29	; 62
 768:	0f be       	out	0x3f, r0	; 63
 76a:	cd bf       	out	0x3d, r28	; 61
 76c:	8a 83       	std	Y+2, r24	; 0x02
 76e:	6b 83       	std	Y+3, r22	; 0x03
 770:	5d 83       	std	Y+5, r21	; 0x05
 772:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
 774:	19 82       	std	Y+1, r1	; 0x01
	if((Return_PValue != NULL) && (Copy_Pin <= 7 && Copy_Pin >= 0)){
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	9d 81       	ldd	r25, Y+5	; 0x05
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	09 f4       	brne	.+2      	; 0x780 <DIO_GetPinValue+0x28>
 77e:	a9 c0       	rjmp	.+338    	; 0x8d2 <DIO_GetPinValue+0x17a>
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	88 30       	cpi	r24, 0x08	; 8
 784:	08 f0       	brcs	.+2      	; 0x788 <DIO_GetPinValue+0x30>
 786:	a5 c0       	rjmp	.+330    	; 0x8d2 <DIO_GetPinValue+0x17a>
		switch(Copy_Port){
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	3f 83       	std	Y+7, r19	; 0x07
 790:	2e 83       	std	Y+6, r18	; 0x06
 792:	4e 81       	ldd	r20, Y+6	; 0x06
 794:	5f 81       	ldd	r21, Y+7	; 0x07
 796:	41 30       	cpi	r20, 0x01	; 1
 798:	51 05       	cpc	r21, r1
 79a:	c1 f1       	breq	.+112    	; 0x80c <DIO_GetPinValue+0xb4>
 79c:	8e 81       	ldd	r24, Y+6	; 0x06
 79e:	9f 81       	ldd	r25, Y+7	; 0x07
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	91 05       	cpc	r25, r1
 7a4:	34 f4       	brge	.+12     	; 0x7b2 <DIO_GetPinValue+0x5a>
 7a6:	2e 81       	ldd	r18, Y+6	; 0x06
 7a8:	3f 81       	ldd	r19, Y+7	; 0x07
 7aa:	21 15       	cp	r18, r1
 7ac:	31 05       	cpc	r19, r1
 7ae:	71 f0       	breq	.+28     	; 0x7cc <DIO_GetPinValue+0x74>
 7b0:	8d c0       	rjmp	.+282    	; 0x8cc <DIO_GetPinValue+0x174>
 7b2:	4e 81       	ldd	r20, Y+6	; 0x06
 7b4:	5f 81       	ldd	r21, Y+7	; 0x07
 7b6:	42 30       	cpi	r20, 0x02	; 2
 7b8:	51 05       	cpc	r21, r1
 7ba:	09 f4       	brne	.+2      	; 0x7be <DIO_GetPinValue+0x66>
 7bc:	47 c0       	rjmp	.+142    	; 0x84c <DIO_GetPinValue+0xf4>
 7be:	8e 81       	ldd	r24, Y+6	; 0x06
 7c0:	9f 81       	ldd	r25, Y+7	; 0x07
 7c2:	83 30       	cpi	r24, 0x03	; 3
 7c4:	91 05       	cpc	r25, r1
 7c6:	09 f4       	brne	.+2      	; 0x7ca <DIO_GetPinValue+0x72>
 7c8:	61 c0       	rjmp	.+194    	; 0x88c <DIO_GetPinValue+0x134>
 7ca:	80 c0       	rjmp	.+256    	; 0x8cc <DIO_GetPinValue+0x174>
		case PORT_A:    *Return_PValue = GET_BIT(PINA,Copy_Pin); break;
 7cc:	e9 e3       	ldi	r30, 0x39	; 57
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	48 2f       	mov	r20, r24
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	28 2f       	mov	r18, r24
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_GetPinValue+0x8e>
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	2a 95       	dec	r18
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_GetPinValue+0x8a>
 7ea:	9a 01       	movw	r18, r20
 7ec:	28 23       	and	r18, r24
 7ee:	39 23       	and	r19, r25
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	88 2f       	mov	r24, r24
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	a9 01       	movw	r20, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_GetPinValue+0xa6>
 7fa:	55 95       	asr	r21
 7fc:	47 95       	ror	r20
 7fe:	8a 95       	dec	r24
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_GetPinValue+0xa2>
 802:	ca 01       	movw	r24, r20
 804:	ec 81       	ldd	r30, Y+4	; 0x04
 806:	fd 81       	ldd	r31, Y+5	; 0x05
 808:	80 83       	st	Z, r24
 80a:	65 c0       	rjmp	.+202    	; 0x8d6 <DIO_GetPinValue+0x17e>
		case PORT_B:    *Return_PValue = GET_BIT(PINB,Copy_Pin); break;
 80c:	e6 e3       	ldi	r30, 0x36	; 54
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	48 2f       	mov	r20, r24
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	8b 81       	ldd	r24, Y+3	; 0x03
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <DIO_GetPinValue+0xce>
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	2a 95       	dec	r18
 828:	e2 f7       	brpl	.-8      	; 0x822 <DIO_GetPinValue+0xca>
 82a:	9a 01       	movw	r18, r20
 82c:	28 23       	and	r18, r24
 82e:	39 23       	and	r19, r25
 830:	8b 81       	ldd	r24, Y+3	; 0x03
 832:	88 2f       	mov	r24, r24
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	a9 01       	movw	r20, r18
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_GetPinValue+0xe6>
 83a:	55 95       	asr	r21
 83c:	47 95       	ror	r20
 83e:	8a 95       	dec	r24
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_GetPinValue+0xe2>
 842:	ca 01       	movw	r24, r20
 844:	ec 81       	ldd	r30, Y+4	; 0x04
 846:	fd 81       	ldd	r31, Y+5	; 0x05
 848:	80 83       	st	Z, r24
 84a:	45 c0       	rjmp	.+138    	; 0x8d6 <DIO_GetPinValue+0x17e>
		case PORT_C:    *Return_PValue = GET_BIT(PINC,Copy_Pin); break;
 84c:	e3 e3       	ldi	r30, 0x33	; 51
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	48 2f       	mov	r20, r24
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	8b 81       	ldd	r24, Y+3	; 0x03
 858:	28 2f       	mov	r18, r24
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	02 c0       	rjmp	.+4      	; 0x866 <DIO_GetPinValue+0x10e>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	2a 95       	dec	r18
 868:	e2 f7       	brpl	.-8      	; 0x862 <DIO_GetPinValue+0x10a>
 86a:	9a 01       	movw	r18, r20
 86c:	28 23       	and	r18, r24
 86e:	39 23       	and	r19, r25
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	88 2f       	mov	r24, r24
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	a9 01       	movw	r20, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <DIO_GetPinValue+0x126>
 87a:	55 95       	asr	r21
 87c:	47 95       	ror	r20
 87e:	8a 95       	dec	r24
 880:	e2 f7       	brpl	.-8      	; 0x87a <DIO_GetPinValue+0x122>
 882:	ca 01       	movw	r24, r20
 884:	ec 81       	ldd	r30, Y+4	; 0x04
 886:	fd 81       	ldd	r31, Y+5	; 0x05
 888:	80 83       	st	Z, r24
 88a:	25 c0       	rjmp	.+74     	; 0x8d6 <DIO_GetPinValue+0x17e>
		case PORT_D:    *Return_PValue = GET_BIT(PIND,Copy_Pin); break;
 88c:	e0 e3       	ldi	r30, 0x30	; 48
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	48 2f       	mov	r20, r24
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	8b 81       	ldd	r24, Y+3	; 0x03
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <DIO_GetPinValue+0x14e>
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	2a 95       	dec	r18
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <DIO_GetPinValue+0x14a>
 8aa:	9a 01       	movw	r18, r20
 8ac:	28 23       	and	r18, r24
 8ae:	39 23       	and	r19, r25
 8b0:	8b 81       	ldd	r24, Y+3	; 0x03
 8b2:	88 2f       	mov	r24, r24
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	a9 01       	movw	r20, r18
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <DIO_GetPinValue+0x166>
 8ba:	55 95       	asr	r21
 8bc:	47 95       	ror	r20
 8be:	8a 95       	dec	r24
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <DIO_GetPinValue+0x162>
 8c2:	ca 01       	movw	r24, r20
 8c4:	ec 81       	ldd	r30, Y+4	; 0x04
 8c6:	fd 81       	ldd	r31, Y+5	; 0x05
 8c8:	80 83       	st	Z, r24
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <DIO_GetPinValue+0x17e>
		default:	    Local_ErrorState = 1;   break;
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	89 83       	std	Y+1, r24	; 0x01
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_GetPinValue+0x17e>
		}
	}
	else {
		Local_ErrorState = 1;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 8d8:	27 96       	adiw	r28, 0x07	; 7
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	f8 94       	cli
 8de:	de bf       	out	0x3e, r29	; 62
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	cd bf       	out	0x3d, r28	; 61
 8e4:	cf 91       	pop	r28
 8e6:	df 91       	pop	r29
 8e8:	08 95       	ret

000008ea <SPI_Init_Master>:
#include "SPI_config.h"
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_register.h"

void SPI_Init_Master (){
 8ea:	df 93       	push	r29
 8ec:	cf 93       	push	r28
 8ee:	cd b7       	in	r28, 0x3d	; 61
 8f0:	de b7       	in	r29, 0x3e	; 62

	/*   MASTER     */
	/* Set MOSI Pin */
	DIO_SetPinDirection(PORT_B,PIN5,OUTPUT_PIN);
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	65 e0       	ldi	r22, 0x05	; 5
 8f6:	41 e0       	ldi	r20, 0x01	; 1
 8f8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	/* Set MISO Pin */
	DIO_SetPinDirection(PORT_B,PIN6,INPUT_PIN);
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	66 e0       	ldi	r22, 0x06	; 6
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	/*Set CLK Pin*/
	DIO_SetPinDirection(PORT_B,PIN7,OUTPUT_PIN);
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	67 e0       	ldi	r22, 0x07	; 7
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	/*Set CS Pin*/
	DIO_SetPinDirection(PORT_B,PIN4,OUTPUT_PIN);
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	64 e0       	ldi	r22, 0x04	; 4
 914:	41 e0       	ldi	r20, 0x01	; 1
 916:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>


	/*Enable SPI Master */

	SET_BIT(SPCR,SPCR_MSTR); //master
 91a:	ad e2       	ldi	r26, 0x2D	; 45
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	ed e2       	ldi	r30, 0x2D	; 45
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	80 61       	ori	r24, 0x10	; 16
 926:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPR1);
	CLR_BIT(SPSR,SPSR_SPI2X);

#elif	CLOCK_RATE == F_DIV_2

	CLR_BIT(SPCR,SPCR_SPR0);
 928:	ad e2       	ldi	r26, 0x2D	; 45
 92a:	b0 e0       	ldi	r27, 0x00	; 0
 92c:	ed e2       	ldi	r30, 0x2D	; 45
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	8e 7f       	andi	r24, 0xFE	; 254
 934:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
 936:	ad e2       	ldi	r26, 0x2D	; 45
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	ed e2       	ldi	r30, 0x2D	; 45
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	8d 7f       	andi	r24, 0xFD	; 253
 942:	8c 93       	st	X, r24
	SET_BIT(SPSR,SPSR_SPI2X);
 944:	ae e2       	ldi	r26, 0x2E	; 46
 946:	b0 e0       	ldi	r27, 0x00	; 0
 948:	ee e2       	ldi	r30, 0x2E	; 46
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	81 60       	ori	r24, 0x01	; 1
 950:	8c 93       	st	X, r24


	/* Data Order*/

#if DATA_ORDER == LSB_ORDER
	SET_BIT(SPCR,SPCR_DORD);
 952:	ad e2       	ldi	r26, 0x2D	; 45
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	ed e2       	ldi	r30, 0x2D	; 45
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	80 62       	ori	r24, 0x20	; 32
 95e:	8c 93       	st	X, r24
#endif


	/* Phase Check*/
#if CLOCK_PHASE == SETUP_LEADING
	SET_BIT(SPCR,SPCR_CPHA);
 960:	ad e2       	ldi	r26, 0x2D	; 45
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	ed e2       	ldi	r30, 0x2D	; 45
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	84 60       	ori	r24, 0x04	; 4
 96c:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_CPHA);
#endif

	/* Polarity Check */
#if CLOCK_POLARITY == IDLE_HIGH
	SET_BIT(SPCR,SPCR_CPOL);
 96e:	ad e2       	ldi	r26, 0x2D	; 45
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	ed e2       	ldi	r30, 0x2D	; 45
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	88 60       	ori	r24, 0x08	; 8
 97a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_CPOL);
#endif

	/*Enable SPI*/

	SET_BIT(SPCR,SPCR_SPE);
 97c:	ad e2       	ldi	r26, 0x2D	; 45
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	ed e2       	ldi	r30, 0x2D	; 45
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	80 64       	ori	r24, 0x40	; 64
 988:	8c 93       	st	X, r24
}
 98a:	cf 91       	pop	r28
 98c:	df 91       	pop	r29
 98e:	08 95       	ret

00000990 <SPI_Init_Slave>:

//========================================
void SPI_Init_Slave (){
 990:	df 93       	push	r29
 992:	cf 93       	push	r28
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
	/*    SLAVE     */
	/* Set MOSI Pin */
	DIO_SetPinDirection(PORT_B,PIN5,INPUT_PIN);
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	65 e0       	ldi	r22, 0x05	; 5
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	/* Set MISO Pin */
	DIO_SetPinDirection(PORT_B,PIN6,OUTPUT_PIN);
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	66 e0       	ldi	r22, 0x06	; 6
 9a6:	41 e0       	ldi	r20, 0x01	; 1
 9a8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	/*Set CLK Pin*/
	DIO_SetPinDirection(PORT_B,PIN7,INPUT_PIN);
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	67 e0       	ldi	r22, 0x07	; 7
 9b0:	40 e0       	ldi	r20, 0x00	; 0
 9b2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	/*Set CS Pin*/
	DIO_SetPinDirection(PORT_B,PIN4,INPUT_PIN);
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	64 e0       	ldi	r22, 0x04	; 4
 9ba:	40 e0       	ldi	r20, 0x00	; 0
 9bc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>

	/*Enable SPI Slave */
	CLR_BIT(SPCR,SPCR_MSTR); //slave
 9c0:	ad e2       	ldi	r26, 0x2D	; 45
 9c2:	b0 e0       	ldi	r27, 0x00	; 0
 9c4:	ed e2       	ldi	r30, 0x2D	; 45
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	8f 7e       	andi	r24, 0xEF	; 239
 9cc:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_SPR1);
		CLR_BIT(SPSR,SPSR_SPI2X);

	#elif	CLOCK_RATE == F_DIV_2

		CLR_BIT(SPCR,SPCR_SPR0);
 9ce:	ad e2       	ldi	r26, 0x2D	; 45
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	ed e2       	ldi	r30, 0x2D	; 45
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	8e 7f       	andi	r24, 0xFE	; 254
 9da:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPCR_SPR1);
 9dc:	ad e2       	ldi	r26, 0x2D	; 45
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	ed e2       	ldi	r30, 0x2D	; 45
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	8d 7f       	andi	r24, 0xFD	; 253
 9e8:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X);
 9ea:	ae e2       	ldi	r26, 0x2E	; 46
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	ee e2       	ldi	r30, 0x2E	; 46
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	81 60       	ori	r24, 0x01	; 1
 9f6:	8c 93       	st	X, r24

	#endif

		/* Data Order*/
	#if DATA_ORDER == LSB_ORDER
		SET_BIT(SPCR,SPCR_DORD);
 9f8:	ad e2       	ldi	r26, 0x2D	; 45
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	ed e2       	ldi	r30, 0x2D	; 45
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	80 62       	ori	r24, 0x20	; 32
 a04:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPCR_DORD);
	#endif

		/* Phase Check*/
	#if CLOCK_PHASE == SETUP_LEADING
		SET_BIT(SPCR,SPCR_CPHA);
 a06:	ad e2       	ldi	r26, 0x2D	; 45
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	ed e2       	ldi	r30, 0x2D	; 45
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	84 60       	ori	r24, 0x04	; 4
 a12:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPCR_CPHA);
	#endif

		/* Polarity Check */
	#if CLOCK_POLARITY == IDLE_HIGH
		SET_BIT(SPCR,SPCR_CPOL);
 a14:	ad e2       	ldi	r26, 0x2D	; 45
 a16:	b0 e0       	ldi	r27, 0x00	; 0
 a18:	ed e2       	ldi	r30, 0x2D	; 45
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	88 60       	ori	r24, 0x08	; 8
 a20:	8c 93       	st	X, r24
	#elif CLOCK_POLARITY == IDLE_LOW
		CLR_BIT(SPCR,SPCR_CPOL);
	#endif

		/*Enable SPI*/
		SET_BIT(SPCR,SPCR_SPE);
 a22:	ad e2       	ldi	r26, 0x2D	; 45
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	ed e2       	ldi	r30, 0x2D	; 45
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	80 64       	ori	r24, 0x40	; 64
 a2e:	8c 93       	st	X, r24
}
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <SPI_Transmit>:

//=================================

void SPI_Transmit (uint8 data) {
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	0f 92       	push	r0
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
 a40:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
 a42:	ef e2       	ldi	r30, 0x2F	; 47
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	89 81       	ldd	r24, Y+1	; 0x01
 a48:	80 83       	st	Z, r24
	while(!(GET_BIT(SPSR,SPSR_SPIF))){
 a4a:	ee e2       	ldi	r30, 0x2E	; 46
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	88 1f       	adc	r24, r24
 a52:	88 27       	eor	r24, r24
 a54:	88 1f       	adc	r24, r24
 a56:	88 2f       	mov	r24, r24
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	90 70       	andi	r25, 0x00	; 0
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	a9 f3       	breq	.-22     	; 0xa4a <SPI_Transmit+0x14>

	}
}
 a60:	0f 90       	pop	r0
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	08 95       	ret

00000a68 <SPI_Receive>:

uint8 SPI_Receive (void){
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62

	/*while(!(GET_BIT(SPSR,Pin7))){

		}*/

	return SPDR;
 a70:	ef e2       	ldi	r30, 0x2F	; 47
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
}
 a76:	cf 91       	pop	r28
 a78:	df 91       	pop	r29
 a7a:	08 95       	ret

00000a7c <main>:
 *  Created on: Oct 5, 2023
 *      Author: hossa
 */


int main(){
 a7c:	df 93       	push	r29
 a7e:	cf 93       	push	r28
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	90 e0       	ldi	r25, 0x00	; 0


}
 a88:	cf 91       	pop	r28
 a8a:	df 91       	pop	r29
 a8c:	08 95       	ret

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
