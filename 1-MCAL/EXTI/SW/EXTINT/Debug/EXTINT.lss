
EXTINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000d2e  2**0
                  ALLOC
  2 .stab         00000e88  00000000  00000000  00000d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006de  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 06 	call	0xc90	; 0xc90 <main>
  74:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
#include "../LIB/Bit_Math.h"
#include "DIO_register.h"
#include "DIO_interface.h"


uint8 DIO_SetPinDirection(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Direction){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	2a 97       	sbiw	r28, 0x0a	; 10
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_ErrorState = 0;
  96:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_SetPinDirection+0x24>
  9e:	b9 c1       	rjmp	.+882    	; 0x412 <DIO_SetPinDirection+0x396>

		if(Copy_Direction == INPUT_PIN)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_SetPinDirection+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_SetPinDirection+0x11a>
		{
			switch(Copy_Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	3a 87       	std	Y+10, r19	; 0x0a
  b0:	29 87       	std	Y+9, r18	; 0x09
  b2:	89 85       	ldd	r24, Y+9	; 0x09
  b4:	9a 85       	ldd	r25, Y+10	; 0x0a
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_SetPinDirection+0x96>
  bc:	29 85       	ldd	r18, Y+9	; 0x09
  be:	3a 85       	ldd	r19, Y+10	; 0x0a
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_SetPinDirection+0x54>
  c6:	89 85       	ldd	r24, Y+9	; 0x09
  c8:	9a 85       	ldd	r25, Y+10	; 0x0a
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_SetPinDirection+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_SetPinDirection+0x114>
  d0:	29 85       	ldd	r18, Y+9	; 0x09
  d2:	3a 85       	ldd	r19, Y+10	; 0x0a
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_SetPinDirection+0xc0>
  da:	89 85       	ldd	r24, Y+9	; 0x09
  dc:	9a 85       	ldd	r25, Y+10	; 0x0a
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_SetPinDirection+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_SetPinDirection+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_SetPinDirection+0x114>
			{
			case PORT_A:   CLR_BIT(DDRA,Copy_Pin);  break;
  e8:	aa e3       	ldi	r26, 0x3A	; 58
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e3       	ldi	r30, 0x3A	; 58
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDirection+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDirection+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	82 c1       	rjmp	.+772    	; 0x416 <DIO_SetPinDirection+0x39a>
			case PORT_B:   CLR_BIT(DDRB,Copy_Pin);  break;
 112:	a7 e3       	ldi	r26, 0x37	; 55
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e7 e3       	ldi	r30, 0x37	; 55
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPinDirection+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPinDirection+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	6d c1       	rjmp	.+730    	; 0x416 <DIO_SetPinDirection+0x39a>
			case PORT_C:   CLR_BIT(DDRC,Copy_Pin);  break;
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	58 c1       	rjmp	.+688    	; 0x416 <DIO_SetPinDirection+0x39a>
			case PORT_D:   CLR_BIT(DDRD,Copy_Pin);  break;
 166:	a1 e3       	ldi	r26, 0x31	; 49
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e1 e3       	ldi	r30, 0x31	; 49
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDirection+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDirection+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	43 c1       	rjmp	.+646    	; 0x416 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	40 c1       	rjmp	.+640    	; 0x416 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == OUTPUT_PIN)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_SetPinDirection+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_SetPinDirection+0x206>
		{
			switch(Copy_Port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	38 87       	std	Y+8, r19	; 0x08
 1a6:	2f 83       	std	Y+7, r18	; 0x07
 1a8:	8f 81       	ldd	r24, Y+7	; 0x07
 1aa:	98 85       	ldd	r25, Y+8	; 0x08
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_SetPinDirection+0x188>
 1b2:	2f 81       	ldd	r18, Y+7	; 0x07
 1b4:	38 85       	ldd	r19, Y+8	; 0x08
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_SetPinDirection+0x14a>
 1bc:	8f 81       	ldd	r24, Y+7	; 0x07
 1be:	98 85       	ldd	r25, Y+8	; 0x08
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_SetPinDirection+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_SetPinDirection+0x200>
 1c6:	2f 81       	ldd	r18, Y+7	; 0x07
 1c8:	38 85       	ldd	r19, Y+8	; 0x08
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_SetPinDirection+0x1b0>
 1d0:	8f 81       	ldd	r24, Y+7	; 0x07
 1d2:	98 85       	ldd	r25, Y+8	; 0x08
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_SetPinDirection+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_SetPinDirection+0x200>
			{
			case PORT_A:    SET_BIT(DDRA,Copy_Pin); break;
 1dc:	aa e3       	ldi	r26, 0x3A	; 58
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	ea e3       	ldi	r30, 0x3A	; 58
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinDirection+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinDirection+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	09 c1       	rjmp	.+530    	; 0x416 <DIO_SetPinDirection+0x39a>
			case PORT_B:    SET_BIT(DDRB,Copy_Pin); break;
 204:	a7 e3       	ldi	r26, 0x37	; 55
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e7 e3       	ldi	r30, 0x37	; 55
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDirection+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDirection+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	f5 c0       	rjmp	.+490    	; 0x416 <DIO_SetPinDirection+0x39a>
			case PORT_C:    SET_BIT(DDRC,Copy_Pin); break;
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPinDirection+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPinDirection+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	e1 c0       	rjmp	.+450    	; 0x416 <DIO_SetPinDirection+0x39a>
			case PORT_D:    SET_BIT(DDRD,Copy_Pin); break;
 254:	a1 e3       	ldi	r26, 0x31	; 49
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e1 e3       	ldi	r30, 0x31	; 49
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SetPinDirection+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SetPinDirection+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	cd c0       	rjmp	.+410    	; 0x416 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	ca c0       	rjmp	.+404    	; 0x416 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == INPUT_PULLUP_PIN)
 282:	8c 81       	ldd	r24, Y+4	; 0x04
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	09 f0       	breq	.+2      	; 0x28a <DIO_SetPinDirection+0x20e>
 288:	c1 c0       	rjmp	.+386    	; 0x40c <DIO_SetPinDirection+0x390>
		{
			switch(Copy_Port)
 28a:	8a 81       	ldd	r24, Y+2	; 0x02
 28c:	28 2f       	mov	r18, r24
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	3e 83       	std	Y+6, r19	; 0x06
 292:	2d 83       	std	Y+5, r18	; 0x05
 294:	8d 81       	ldd	r24, Y+5	; 0x05
 296:	9e 81       	ldd	r25, Y+6	; 0x06
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	91 05       	cpc	r25, r1
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_SetPinDirection+0x224>
 29e:	3e c0       	rjmp	.+124    	; 0x31c <DIO_SetPinDirection+0x2a0>
 2a0:	2d 81       	ldd	r18, Y+5	; 0x05
 2a2:	3e 81       	ldd	r19, Y+6	; 0x06
 2a4:	22 30       	cpi	r18, 0x02	; 2
 2a6:	31 05       	cpc	r19, r1
 2a8:	2c f4       	brge	.+10     	; 0x2b4 <DIO_SetPinDirection+0x238>
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	71 f0       	breq	.+28     	; 0x2ce <DIO_SetPinDirection+0x252>
 2b2:	a9 c0       	rjmp	.+338    	; 0x406 <DIO_SetPinDirection+0x38a>
 2b4:	2d 81       	ldd	r18, Y+5	; 0x05
 2b6:	3e 81       	ldd	r19, Y+6	; 0x06
 2b8:	22 30       	cpi	r18, 0x02	; 2
 2ba:	31 05       	cpc	r19, r1
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <DIO_SetPinDirection+0x244>
 2be:	55 c0       	rjmp	.+170    	; 0x36a <DIO_SetPinDirection+0x2ee>
 2c0:	8d 81       	ldd	r24, Y+5	; 0x05
 2c2:	9e 81       	ldd	r25, Y+6	; 0x06
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	91 05       	cpc	r25, r1
 2c8:	09 f4       	brne	.+2      	; 0x2cc <DIO_SetPinDirection+0x250>
 2ca:	76 c0       	rjmp	.+236    	; 0x3b8 <DIO_SetPinDirection+0x33c>
 2cc:	9c c0       	rjmp	.+312    	; 0x406 <DIO_SetPinDirection+0x38a>
			{
			case PORT_A:
				CLR_BIT(DDRA,Copy_Pin);
 2ce:	aa e3       	ldi	r26, 0x3A	; 58
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	ea e3       	ldi	r30, 0x3A	; 58
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_SetPinDirection+0x26e>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	2a 95       	dec	r18
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_SetPinDirection+0x26a>
 2ee:	80 95       	com	r24
 2f0:	84 23       	and	r24, r20
 2f2:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_Pin);
 2f4:	ab e3       	ldi	r26, 0x3B	; 59
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	eb e3       	ldi	r30, 0x3B	; 59
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	48 2f       	mov	r20, r24
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_SetPinDirection+0x296>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_SetPinDirection+0x292>
 316:	84 2b       	or	r24, r20
 318:	8c 93       	st	X, r24
 31a:	7d c0       	rjmp	.+250    	; 0x416 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_B:
				CLR_BIT(DDRB,Copy_Pin);
 31c:	a7 e3       	ldi	r26, 0x37	; 55
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e7 e3       	ldi	r30, 0x37	; 55
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	48 2f       	mov	r20, r24
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_SetPinDirection+0x2bc>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_SetPinDirection+0x2b8>
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_Pin);
 342:	a8 e3       	ldi	r26, 0x38	; 56
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e8 e3       	ldi	r30, 0x38	; 56
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	48 2f       	mov	r20, r24
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 2e       	mov	r0, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_SetPinDirection+0x2e4>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_SetPinDirection+0x2e0>
 364:	84 2b       	or	r24, r20
 366:	8c 93       	st	X, r24
 368:	56 c0       	rjmp	.+172    	; 0x416 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_C:
				CLR_BIT(DDRC,Copy_Pin);
 36a:	a4 e3       	ldi	r26, 0x34	; 52
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	e4 e3       	ldi	r30, 0x34	; 52
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinDirection+0x30a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	2a 95       	dec	r18
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinDirection+0x306>
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_Pin);
 390:	a5 e3       	ldi	r26, 0x35	; 53
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	e5 e3       	ldi	r30, 0x35	; 53
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	48 2f       	mov	r20, r24
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	28 2f       	mov	r18, r24
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 2e       	mov	r0, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinDirection+0x332>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinDirection+0x32e>
 3b2:	84 2b       	or	r24, r20
 3b4:	8c 93       	st	X, r24
 3b6:	2f c0       	rjmp	.+94     	; 0x416 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_D:
				CLR_BIT(DDRD,Copy_Pin);
 3b8:	a1 e3       	ldi	r26, 0x31	; 49
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e1 e3       	ldi	r30, 0x31	; 49
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_SetPinDirection+0x358>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	2a 95       	dec	r18
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_SetPinDirection+0x354>
 3d8:	80 95       	com	r24
 3da:	84 23       	and	r24, r20
 3dc:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_Pin);
 3de:	a2 e3       	ldi	r26, 0x32	; 50
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e2 e3       	ldi	r30, 0x32	; 50
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_SetPinDirection+0x380>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_SetPinDirection+0x37c>
 400:	84 2b       	or	r24, r20
 402:	8c 93       	st	X, r24
 404:	08 c0       	rjmp	.+16     	; 0x416 <DIO_SetPinDirection+0x39a>
				break;
			default:	   Local_ErrorState = 1;    break;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	05 c0       	rjmp	.+10     	; 0x416 <DIO_SetPinDirection+0x39a>
			}
		}
		else {
			Local_ErrorState = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_SetPinDirection+0x39a>
		}
	}

	else {
		Local_ErrorState = 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
 416:	89 81       	ldd	r24, Y+1	; 0x01
}
 418:	2a 96       	adiw	r28, 0x0a	; 10
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	08 95       	ret

0000042a <DIO_SetPortDirection>:

/***************************************************************************/

uint8 DIO_SetPortDirection(uint8 Copy_Port, uint8 Copy_Direction){
 42a:	df 93       	push	r29
 42c:	cf 93       	push	r28
 42e:	00 d0       	rcall	.+0      	; 0x430 <DIO_SetPortDirection+0x6>
 430:	00 d0       	rcall	.+0      	; 0x432 <DIO_SetPortDirection+0x8>
 432:	0f 92       	push	r0
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	8a 83       	std	Y+2, r24	; 0x02
 43a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
 43c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	3d 83       	std	Y+5, r19	; 0x05
 446:	2c 83       	std	Y+4, r18	; 0x04
 448:	8c 81       	ldd	r24, Y+4	; 0x04
 44a:	9d 81       	ldd	r25, Y+5	; 0x05
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	91 05       	cpc	r25, r1
 450:	d1 f0       	breq	.+52     	; 0x486 <__stack+0x27>
 452:	2c 81       	ldd	r18, Y+4	; 0x04
 454:	3d 81       	ldd	r19, Y+5	; 0x05
 456:	22 30       	cpi	r18, 0x02	; 2
 458:	31 05       	cpc	r19, r1
 45a:	2c f4       	brge	.+10     	; 0x466 <__stack+0x7>
 45c:	8c 81       	ldd	r24, Y+4	; 0x04
 45e:	9d 81       	ldd	r25, Y+5	; 0x05
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	61 f0       	breq	.+24     	; 0x47c <__stack+0x1d>
 464:	1f c0       	rjmp	.+62     	; 0x4a4 <__stack+0x45>
 466:	2c 81       	ldd	r18, Y+4	; 0x04
 468:	3d 81       	ldd	r19, Y+5	; 0x05
 46a:	22 30       	cpi	r18, 0x02	; 2
 46c:	31 05       	cpc	r19, r1
 46e:	81 f0       	breq	.+32     	; 0x490 <__stack+0x31>
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	9d 81       	ldd	r25, Y+5	; 0x05
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	91 05       	cpc	r25, r1
 478:	81 f0       	breq	.+32     	; 0x49a <__stack+0x3b>
 47a:	14 c0       	rjmp	.+40     	; 0x4a4 <__stack+0x45>
	case PORT_A:    DDRA = Copy_Direction; break;
 47c:	ea e3       	ldi	r30, 0x3A	; 58
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	80 83       	st	Z, r24
 484:	11 c0       	rjmp	.+34     	; 0x4a8 <__stack+0x49>
	case PORT_B:    DDRB = Copy_Direction; break;
 486:	e7 e3       	ldi	r30, 0x37	; 55
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	80 83       	st	Z, r24
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__stack+0x49>
	case PORT_C:    DDRC = Copy_Direction; break;
 490:	e4 e3       	ldi	r30, 0x34	; 52
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	80 83       	st	Z, r24
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <__stack+0x49>
	case PORT_D:    DDRD = Copy_Direction; break;
 49a:	e1 e3       	ldi	r30, 0x31	; 49
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	80 83       	st	Z, r24
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__stack+0x49>
	default:	   Local_ErrorState = 1;   break;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_ErrorState;
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	cf 91       	pop	r28
 4b6:	df 91       	pop	r29
 4b8:	08 95       	ret

000004ba <DIO_SetPinValue>:


/***************************************************************************/

uint8 DIO_SetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Value){
 4ba:	df 93       	push	r29
 4bc:	cf 93       	push	r28
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	28 97       	sbiw	r28, 0x08	; 8
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	8a 83       	std	Y+2, r24	; 0x02
 4d0:	6b 83       	std	Y+3, r22	; 0x03
 4d2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
 4d4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	88 30       	cpi	r24, 0x08	; 8
 4da:	08 f0       	brcs	.+2      	; 0x4de <DIO_SetPinValue+0x24>
 4dc:	f1 c0       	rjmp	.+482    	; 0x6c0 <DIO_SetPinValue+0x206>

		if(Copy_Value == PIN_LOW)
 4de:	8c 81       	ldd	r24, Y+4	; 0x04
 4e0:	88 23       	and	r24, r24
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <DIO_SetPinValue+0x2c>
 4e4:	77 c0       	rjmp	.+238    	; 0x5d4 <DIO_SetPinValue+0x11a>
		{
			switch(Copy_Port)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	38 87       	std	Y+8, r19	; 0x08
 4ee:	2f 83       	std	Y+7, r18	; 0x07
 4f0:	8f 81       	ldd	r24, Y+7	; 0x07
 4f2:	98 85       	ldd	r25, Y+8	; 0x08
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	91 05       	cpc	r25, r1
 4f8:	59 f1       	breq	.+86     	; 0x550 <DIO_SetPinValue+0x96>
 4fa:	2f 81       	ldd	r18, Y+7	; 0x07
 4fc:	38 85       	ldd	r19, Y+8	; 0x08
 4fe:	22 30       	cpi	r18, 0x02	; 2
 500:	31 05       	cpc	r19, r1
 502:	2c f4       	brge	.+10     	; 0x50e <DIO_SetPinValue+0x54>
 504:	8f 81       	ldd	r24, Y+7	; 0x07
 506:	98 85       	ldd	r25, Y+8	; 0x08
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	69 f0       	breq	.+26     	; 0x526 <DIO_SetPinValue+0x6c>
 50c:	60 c0       	rjmp	.+192    	; 0x5ce <DIO_SetPinValue+0x114>
 50e:	2f 81       	ldd	r18, Y+7	; 0x07
 510:	38 85       	ldd	r19, Y+8	; 0x08
 512:	22 30       	cpi	r18, 0x02	; 2
 514:	31 05       	cpc	r19, r1
 516:	89 f1       	breq	.+98     	; 0x57a <DIO_SetPinValue+0xc0>
 518:	8f 81       	ldd	r24, Y+7	; 0x07
 51a:	98 85       	ldd	r25, Y+8	; 0x08
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	91 05       	cpc	r25, r1
 520:	09 f4       	brne	.+2      	; 0x524 <DIO_SetPinValue+0x6a>
 522:	40 c0       	rjmp	.+128    	; 0x5a4 <DIO_SetPinValue+0xea>
 524:	54 c0       	rjmp	.+168    	; 0x5ce <DIO_SetPinValue+0x114>
			{
			case PORT_A:   CLR_BIT(PORTA,Copy_Pin);  break;
 526:	ab e3       	ldi	r26, 0x3B	; 59
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	eb e3       	ldi	r30, 0x3B	; 59
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_SetPinValue+0x8a>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_SetPinValue+0x86>
 548:	80 95       	com	r24
 54a:	84 23       	and	r24, r20
 54c:	8c 93       	st	X, r24
 54e:	ba c0       	rjmp	.+372    	; 0x6c4 <DIO_SetPinValue+0x20a>
			case PORT_B:   CLR_BIT(PORTB,Copy_Pin);  break;
 550:	a8 e3       	ldi	r26, 0x38	; 56
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	e8 e3       	ldi	r30, 0x38	; 56
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	48 2f       	mov	r20, r24
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 2e       	mov	r0, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_SetPinValue+0xb4>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_SetPinValue+0xb0>
 572:	80 95       	com	r24
 574:	84 23       	and	r24, r20
 576:	8c 93       	st	X, r24
 578:	a5 c0       	rjmp	.+330    	; 0x6c4 <DIO_SetPinValue+0x20a>
			case PORT_C:   CLR_BIT(PORTC,Copy_Pin);  break;
 57a:	a5 e3       	ldi	r26, 0x35	; 53
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	e5 e3       	ldi	r30, 0x35	; 53
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	48 2f       	mov	r20, r24
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 2e       	mov	r0, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_SetPinValue+0xde>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_SetPinValue+0xda>
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	8c 93       	st	X, r24
 5a2:	90 c0       	rjmp	.+288    	; 0x6c4 <DIO_SetPinValue+0x20a>
			case PORT_D:   CLR_BIT(PORTD,Copy_Pin);  break;
 5a4:	a2 e3       	ldi	r26, 0x32	; 50
 5a6:	b0 e0       	ldi	r27, 0x00	; 0
 5a8:	e2 e3       	ldi	r30, 0x32	; 50
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	48 2f       	mov	r20, r24
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 2e       	mov	r0, r18
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_SetPinValue+0x108>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	0a 94       	dec	r0
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_SetPinValue+0x104>
 5c6:	80 95       	com	r24
 5c8:	84 23       	and	r24, r20
 5ca:	8c 93       	st	X, r24
 5cc:	7b c0       	rjmp	.+246    	; 0x6c4 <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	78 c0       	rjmp	.+240    	; 0x6c4 <DIO_SetPinValue+0x20a>
			}
		}

		else if(Copy_Value == PIN_HIGH)
 5d4:	8c 81       	ldd	r24, Y+4	; 0x04
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	09 f0       	breq	.+2      	; 0x5dc <DIO_SetPinValue+0x122>
 5da:	74 c0       	rjmp	.+232    	; 0x6c4 <DIO_SetPinValue+0x20a>
		{
			switch(Copy_Port)
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	3e 83       	std	Y+6, r19	; 0x06
 5e4:	2d 83       	std	Y+5, r18	; 0x05
 5e6:	8d 81       	ldd	r24, Y+5	; 0x05
 5e8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	91 05       	cpc	r25, r1
 5ee:	49 f1       	breq	.+82     	; 0x642 <DIO_SetPinValue+0x188>
 5f0:	2d 81       	ldd	r18, Y+5	; 0x05
 5f2:	3e 81       	ldd	r19, Y+6	; 0x06
 5f4:	22 30       	cpi	r18, 0x02	; 2
 5f6:	31 05       	cpc	r19, r1
 5f8:	2c f4       	brge	.+10     	; 0x604 <DIO_SetPinValue+0x14a>
 5fa:	8d 81       	ldd	r24, Y+5	; 0x05
 5fc:	9e 81       	ldd	r25, Y+6	; 0x06
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	61 f0       	breq	.+24     	; 0x61a <DIO_SetPinValue+0x160>
 602:	5b c0       	rjmp	.+182    	; 0x6ba <DIO_SetPinValue+0x200>
 604:	2d 81       	ldd	r18, Y+5	; 0x05
 606:	3e 81       	ldd	r19, Y+6	; 0x06
 608:	22 30       	cpi	r18, 0x02	; 2
 60a:	31 05       	cpc	r19, r1
 60c:	71 f1       	breq	.+92     	; 0x66a <DIO_SetPinValue+0x1b0>
 60e:	8d 81       	ldd	r24, Y+5	; 0x05
 610:	9e 81       	ldd	r25, Y+6	; 0x06
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	91 05       	cpc	r25, r1
 616:	e9 f1       	breq	.+122    	; 0x692 <DIO_SetPinValue+0x1d8>
 618:	50 c0       	rjmp	.+160    	; 0x6ba <DIO_SetPinValue+0x200>
			{
			case PORT_A:    SET_BIT(PORTA,Copy_Pin); break;
 61a:	ab e3       	ldi	r26, 0x3B	; 59
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	eb e3       	ldi	r30, 0x3B	; 59
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 2e       	mov	r0, r18
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_SetPinValue+0x17e>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_SetPinValue+0x17a>
 63c:	84 2b       	or	r24, r20
 63e:	8c 93       	st	X, r24
 640:	41 c0       	rjmp	.+130    	; 0x6c4 <DIO_SetPinValue+0x20a>
			case PORT_B:    SET_BIT(PORTB,Copy_Pin); break;
 642:	a8 e3       	ldi	r26, 0x38	; 56
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e8 e3       	ldi	r30, 0x38	; 56
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	48 2f       	mov	r20, r24
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 2e       	mov	r0, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_SetPinValue+0x1a6>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	0a 94       	dec	r0
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_SetPinValue+0x1a2>
 664:	84 2b       	or	r24, r20
 666:	8c 93       	st	X, r24
 668:	2d c0       	rjmp	.+90     	; 0x6c4 <DIO_SetPinValue+0x20a>
			case PORT_C:    SET_BIT(PORTC,Copy_Pin); break;
 66a:	a5 e3       	ldi	r26, 0x35	; 53
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	e5 e3       	ldi	r30, 0x35	; 53
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	48 2f       	mov	r20, r24
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 2e       	mov	r0, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_SetPinValue+0x1ce>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_SetPinValue+0x1ca>
 68c:	84 2b       	or	r24, r20
 68e:	8c 93       	st	X, r24
 690:	19 c0       	rjmp	.+50     	; 0x6c4 <DIO_SetPinValue+0x20a>
			case PORT_D:    SET_BIT(PORTD,Copy_Pin); break;
 692:	a2 e3       	ldi	r26, 0x32	; 50
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e2 e3       	ldi	r30, 0x32	; 50
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	48 2f       	mov	r20, r24
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 2e       	mov	r0, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_SetPinValue+0x1f6>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_SetPinValue+0x1f2>
 6b4:	84 2b       	or	r24, r20
 6b6:	8c 93       	st	X, r24
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	89 83       	std	Y+1, r24	; 0x01
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_SetPinValue+0x20a>
			}
		}
	}
	else {
		Local_ErrorState = 1;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6c6:	28 96       	adiw	r28, 0x08	; 8
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <DIO_SetPortValue>:


/***************************************************************************/

uint8 DIO_SetPortValue(uint8 Copy_Port, uint8 Copy_Value){
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	00 d0       	rcall	.+0      	; 0x6de <DIO_SetPortValue+0x6>
 6de:	00 d0       	rcall	.+0      	; 0x6e0 <DIO_SetPortValue+0x8>
 6e0:	0f 92       	push	r0
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
 6e6:	8a 83       	std	Y+2, r24	; 0x02
 6e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
 6ea:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	3d 83       	std	Y+5, r19	; 0x05
 6f4:	2c 83       	std	Y+4, r18	; 0x04
 6f6:	8c 81       	ldd	r24, Y+4	; 0x04
 6f8:	9d 81       	ldd	r25, Y+5	; 0x05
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	91 05       	cpc	r25, r1
 6fe:	d1 f0       	breq	.+52     	; 0x734 <DIO_SetPortValue+0x5c>
 700:	2c 81       	ldd	r18, Y+4	; 0x04
 702:	3d 81       	ldd	r19, Y+5	; 0x05
 704:	22 30       	cpi	r18, 0x02	; 2
 706:	31 05       	cpc	r19, r1
 708:	2c f4       	brge	.+10     	; 0x714 <DIO_SetPortValue+0x3c>
 70a:	8c 81       	ldd	r24, Y+4	; 0x04
 70c:	9d 81       	ldd	r25, Y+5	; 0x05
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	61 f0       	breq	.+24     	; 0x72a <DIO_SetPortValue+0x52>
 712:	1f c0       	rjmp	.+62     	; 0x752 <DIO_SetPortValue+0x7a>
 714:	2c 81       	ldd	r18, Y+4	; 0x04
 716:	3d 81       	ldd	r19, Y+5	; 0x05
 718:	22 30       	cpi	r18, 0x02	; 2
 71a:	31 05       	cpc	r19, r1
 71c:	81 f0       	breq	.+32     	; 0x73e <DIO_SetPortValue+0x66>
 71e:	8c 81       	ldd	r24, Y+4	; 0x04
 720:	9d 81       	ldd	r25, Y+5	; 0x05
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	91 05       	cpc	r25, r1
 726:	81 f0       	breq	.+32     	; 0x748 <DIO_SetPortValue+0x70>
 728:	14 c0       	rjmp	.+40     	; 0x752 <DIO_SetPortValue+0x7a>
	case PORT_A:    PORTA = Copy_Value; break;
 72a:	eb e3       	ldi	r30, 0x3B	; 59
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	80 83       	st	Z, r24
 732:	11 c0       	rjmp	.+34     	; 0x756 <DIO_SetPortValue+0x7e>
	case PORT_B:    PORTB = Copy_Value; break;
 734:	e8 e3       	ldi	r30, 0x38	; 56
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	80 83       	st	Z, r24
 73c:	0c c0       	rjmp	.+24     	; 0x756 <DIO_SetPortValue+0x7e>
	case PORT_C:    PORTC = Copy_Value; break;
 73e:	e5 e3       	ldi	r30, 0x35	; 53
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	80 83       	st	Z, r24
 746:	07 c0       	rjmp	.+14     	; 0x756 <DIO_SetPortValue+0x7e>
	case PORT_D:    PORTD = Copy_Value; break;
 748:	e2 e3       	ldi	r30, 0x32	; 50
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	80 83       	st	Z, r24
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_SetPortValue+0x7e>
	default:	    Local_ErrorState = 1;   break;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 756:	89 81       	ldd	r24, Y+1	; 0x01
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <DIO_GetPinValue>:

/***************************************************************************/

uint8 DIO_GetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8* Return_PValue){
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	27 97       	sbiw	r28, 0x07	; 7
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	8a 83       	std	Y+2, r24	; 0x02
 77e:	6b 83       	std	Y+3, r22	; 0x03
 780:	5d 83       	std	Y+5, r21	; 0x05
 782:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
 784:	19 82       	std	Y+1, r1	; 0x01
	if((Return_PValue != NULL) && (Copy_Pin <= 7 && Copy_Pin >= 0)){
 786:	8c 81       	ldd	r24, Y+4	; 0x04
 788:	9d 81       	ldd	r25, Y+5	; 0x05
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	09 f4       	brne	.+2      	; 0x790 <DIO_GetPinValue+0x28>
 78e:	a9 c0       	rjmp	.+338    	; 0x8e2 <DIO_GetPinValue+0x17a>
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	88 30       	cpi	r24, 0x08	; 8
 794:	08 f0       	brcs	.+2      	; 0x798 <DIO_GetPinValue+0x30>
 796:	a5 c0       	rjmp	.+330    	; 0x8e2 <DIO_GetPinValue+0x17a>
		switch(Copy_Port){
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	3f 83       	std	Y+7, r19	; 0x07
 7a0:	2e 83       	std	Y+6, r18	; 0x06
 7a2:	4e 81       	ldd	r20, Y+6	; 0x06
 7a4:	5f 81       	ldd	r21, Y+7	; 0x07
 7a6:	41 30       	cpi	r20, 0x01	; 1
 7a8:	51 05       	cpc	r21, r1
 7aa:	c1 f1       	breq	.+112    	; 0x81c <DIO_GetPinValue+0xb4>
 7ac:	8e 81       	ldd	r24, Y+6	; 0x06
 7ae:	9f 81       	ldd	r25, Y+7	; 0x07
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	91 05       	cpc	r25, r1
 7b4:	34 f4       	brge	.+12     	; 0x7c2 <DIO_GetPinValue+0x5a>
 7b6:	2e 81       	ldd	r18, Y+6	; 0x06
 7b8:	3f 81       	ldd	r19, Y+7	; 0x07
 7ba:	21 15       	cp	r18, r1
 7bc:	31 05       	cpc	r19, r1
 7be:	71 f0       	breq	.+28     	; 0x7dc <DIO_GetPinValue+0x74>
 7c0:	8d c0       	rjmp	.+282    	; 0x8dc <DIO_GetPinValue+0x174>
 7c2:	4e 81       	ldd	r20, Y+6	; 0x06
 7c4:	5f 81       	ldd	r21, Y+7	; 0x07
 7c6:	42 30       	cpi	r20, 0x02	; 2
 7c8:	51 05       	cpc	r21, r1
 7ca:	09 f4       	brne	.+2      	; 0x7ce <DIO_GetPinValue+0x66>
 7cc:	47 c0       	rjmp	.+142    	; 0x85c <DIO_GetPinValue+0xf4>
 7ce:	8e 81       	ldd	r24, Y+6	; 0x06
 7d0:	9f 81       	ldd	r25, Y+7	; 0x07
 7d2:	83 30       	cpi	r24, 0x03	; 3
 7d4:	91 05       	cpc	r25, r1
 7d6:	09 f4       	brne	.+2      	; 0x7da <DIO_GetPinValue+0x72>
 7d8:	61 c0       	rjmp	.+194    	; 0x89c <DIO_GetPinValue+0x134>
 7da:	80 c0       	rjmp	.+256    	; 0x8dc <DIO_GetPinValue+0x174>
		case PORT_A:    *Return_PValue = GET_BIT(PINA,Copy_Pin); break;
 7dc:	e9 e3       	ldi	r30, 0x39	; 57
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	48 2f       	mov	r20, r24
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_GetPinValue+0x8e>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	2a 95       	dec	r18
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_GetPinValue+0x8a>
 7fa:	9a 01       	movw	r18, r20
 7fc:	28 23       	and	r18, r24
 7fe:	39 23       	and	r19, r25
 800:	8b 81       	ldd	r24, Y+3	; 0x03
 802:	88 2f       	mov	r24, r24
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	a9 01       	movw	r20, r18
 808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_GetPinValue+0xa6>
 80a:	55 95       	asr	r21
 80c:	47 95       	ror	r20
 80e:	8a 95       	dec	r24
 810:	e2 f7       	brpl	.-8      	; 0x80a <DIO_GetPinValue+0xa2>
 812:	ca 01       	movw	r24, r20
 814:	ec 81       	ldd	r30, Y+4	; 0x04
 816:	fd 81       	ldd	r31, Y+5	; 0x05
 818:	80 83       	st	Z, r24
 81a:	65 c0       	rjmp	.+202    	; 0x8e6 <DIO_GetPinValue+0x17e>
		case PORT_B:    *Return_PValue = GET_BIT(PINB,Copy_Pin); break;
 81c:	e6 e3       	ldi	r30, 0x36	; 54
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	48 2f       	mov	r20, r24
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	8b 81       	ldd	r24, Y+3	; 0x03
 828:	28 2f       	mov	r18, r24
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_GetPinValue+0xce>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	2a 95       	dec	r18
 838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_GetPinValue+0xca>
 83a:	9a 01       	movw	r18, r20
 83c:	28 23       	and	r18, r24
 83e:	39 23       	and	r19, r25
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	88 2f       	mov	r24, r24
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	a9 01       	movw	r20, r18
 848:	02 c0       	rjmp	.+4      	; 0x84e <DIO_GetPinValue+0xe6>
 84a:	55 95       	asr	r21
 84c:	47 95       	ror	r20
 84e:	8a 95       	dec	r24
 850:	e2 f7       	brpl	.-8      	; 0x84a <DIO_GetPinValue+0xe2>
 852:	ca 01       	movw	r24, r20
 854:	ec 81       	ldd	r30, Y+4	; 0x04
 856:	fd 81       	ldd	r31, Y+5	; 0x05
 858:	80 83       	st	Z, r24
 85a:	45 c0       	rjmp	.+138    	; 0x8e6 <DIO_GetPinValue+0x17e>
		case PORT_C:    *Return_PValue = GET_BIT(PINC,Copy_Pin); break;
 85c:	e3 e3       	ldi	r30, 0x33	; 51
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	48 2f       	mov	r20, r24
 864:	50 e0       	ldi	r21, 0x00	; 0
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	28 2f       	mov	r18, r24
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <DIO_GetPinValue+0x10e>
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	2a 95       	dec	r18
 878:	e2 f7       	brpl	.-8      	; 0x872 <DIO_GetPinValue+0x10a>
 87a:	9a 01       	movw	r18, r20
 87c:	28 23       	and	r18, r24
 87e:	39 23       	and	r19, r25
 880:	8b 81       	ldd	r24, Y+3	; 0x03
 882:	88 2f       	mov	r24, r24
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	a9 01       	movw	r20, r18
 888:	02 c0       	rjmp	.+4      	; 0x88e <DIO_GetPinValue+0x126>
 88a:	55 95       	asr	r21
 88c:	47 95       	ror	r20
 88e:	8a 95       	dec	r24
 890:	e2 f7       	brpl	.-8      	; 0x88a <DIO_GetPinValue+0x122>
 892:	ca 01       	movw	r24, r20
 894:	ec 81       	ldd	r30, Y+4	; 0x04
 896:	fd 81       	ldd	r31, Y+5	; 0x05
 898:	80 83       	st	Z, r24
 89a:	25 c0       	rjmp	.+74     	; 0x8e6 <DIO_GetPinValue+0x17e>
		case PORT_D:    *Return_PValue = GET_BIT(PIND,Copy_Pin); break;
 89c:	e0 e3       	ldi	r30, 0x30	; 48
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	48 2f       	mov	r20, r24
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	8b 81       	ldd	r24, Y+3	; 0x03
 8a8:	28 2f       	mov	r18, r24
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <DIO_GetPinValue+0x14e>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	2a 95       	dec	r18
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <DIO_GetPinValue+0x14a>
 8ba:	9a 01       	movw	r18, r20
 8bc:	28 23       	and	r18, r24
 8be:	39 23       	and	r19, r25
 8c0:	8b 81       	ldd	r24, Y+3	; 0x03
 8c2:	88 2f       	mov	r24, r24
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	a9 01       	movw	r20, r18
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <DIO_GetPinValue+0x166>
 8ca:	55 95       	asr	r21
 8cc:	47 95       	ror	r20
 8ce:	8a 95       	dec	r24
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <DIO_GetPinValue+0x162>
 8d2:	ca 01       	movw	r24, r20
 8d4:	ec 81       	ldd	r30, Y+4	; 0x04
 8d6:	fd 81       	ldd	r31, Y+5	; 0x05
 8d8:	80 83       	st	Z, r24
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <DIO_GetPinValue+0x17e>
		default:	    Local_ErrorState = 1;   break;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	89 83       	std	Y+1, r24	; 0x01
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_GetPinValue+0x17e>
		}
	}
	else {
		Local_ErrorState = 1;
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e8:	27 96       	adiw	r28, 0x07	; 7
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	f8 94       	cli
 8ee:	de bf       	out	0x3e, r29	; 62
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	cd bf       	out	0x3d, r28	; 61
 8f4:	cf 91       	pop	r28
 8f6:	df 91       	pop	r29
 8f8:	08 95       	ret

000008fa <EXTINT_Int1Init>:
#include "EXTINT_register.h"
#include "EXTINT_private.h"
#include "EXTINT_config.h"


void EXTINT_Int1Init(uint8 Int_Sense){
 8fa:	df 93       	push	r29
 8fc:	cf 93       	push	r28
 8fe:	00 d0       	rcall	.+0      	; 0x900 <EXTINT_Int1Init+0x6>
 900:	0f 92       	push	r0
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	89 83       	std	Y+1, r24	; 0x01

	/* Disable PIE */

	CLR_BIT(GICR,GICR_INT2);
 908:	ab e5       	ldi	r26, 0x5B	; 91
 90a:	b0 e0       	ldi	r27, 0x00	; 0
 90c:	eb e5       	ldi	r30, 0x5B	; 91
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	8f 7d       	andi	r24, 0xDF	; 223
 914:	8c 93       	st	X, r24

	/* Set Direction Of INT1 as Input Pullup */

	DIO_SetPinDirection(PORT_D, PIN3 , INPUT_PULLUP_PIN);
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	63 e0       	ldi	r22, 0x03	; 3
 91a:	42 e0       	ldi	r20, 0x02	; 2
 91c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>

	/* Set Sense Control of INT1 */

	switch (Int_Sense){
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	3b 83       	std	Y+3, r19	; 0x03
 928:	2a 83       	std	Y+2, r18	; 0x02
 92a:	8a 81       	ldd	r24, Y+2	; 0x02
 92c:	9b 81       	ldd	r25, Y+3	; 0x03
 92e:	82 30       	cpi	r24, 0x02	; 2
 930:	91 05       	cpc	r25, r1
 932:	29 f1       	breq	.+74     	; 0x97e <EXTINT_Int1Init+0x84>
 934:	2a 81       	ldd	r18, Y+2	; 0x02
 936:	3b 81       	ldd	r19, Y+3	; 0x03
 938:	23 30       	cpi	r18, 0x03	; 3
 93a:	31 05       	cpc	r19, r1
 93c:	34 f4       	brge	.+12     	; 0x94a <EXTINT_Int1Init+0x50>
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	9b 81       	ldd	r25, Y+3	; 0x03
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	91 05       	cpc	r25, r1
 946:	61 f0       	breq	.+24     	; 0x960 <EXTINT_Int1Init+0x66>
 948:	46 c0       	rjmp	.+140    	; 0x9d6 <EXTINT_Int1Init+0xdc>
 94a:	2a 81       	ldd	r18, Y+2	; 0x02
 94c:	3b 81       	ldd	r19, Y+3	; 0x03
 94e:	23 30       	cpi	r18, 0x03	; 3
 950:	31 05       	cpc	r19, r1
 952:	21 f1       	breq	.+72     	; 0x99c <EXTINT_Int1Init+0xa2>
 954:	8a 81       	ldd	r24, Y+2	; 0x02
 956:	9b 81       	ldd	r25, Y+3	; 0x03
 958:	84 30       	cpi	r24, 0x04	; 4
 95a:	91 05       	cpc	r25, r1
 95c:	71 f1       	breq	.+92     	; 0x9ba <EXTINT_Int1Init+0xc0>
 95e:	3b c0       	rjmp	.+118    	; 0x9d6 <EXTINT_Int1Init+0xdc>

	case FALLING_EDGE:
		CLR_BIT(MCUCR,MCUCR_ISC10);
 960:	a5 e5       	ldi	r26, 0x55	; 85
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e5 e5       	ldi	r30, 0x55	; 85
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	8b 7f       	andi	r24, 0xFB	; 251
 96c:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
 96e:	a5 e5       	ldi	r26, 0x55	; 85
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	e5 e5       	ldi	r30, 0x55	; 85
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	88 60       	ori	r24, 0x08	; 8
 97a:	8c 93       	st	X, r24
 97c:	2c c0       	rjmp	.+88     	; 0x9d6 <EXTINT_Int1Init+0xdc>
		break;

	case RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC10);
 97e:	a5 e5       	ldi	r26, 0x55	; 85
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	e5 e5       	ldi	r30, 0x55	; 85
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	84 60       	ori	r24, 0x04	; 4
 98a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
 98c:	a5 e5       	ldi	r26, 0x55	; 85
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	e5 e5       	ldi	r30, 0x55	; 85
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	88 60       	ori	r24, 0x08	; 8
 998:	8c 93       	st	X, r24
 99a:	1d c0       	rjmp	.+58     	; 0x9d6 <EXTINT_Int1Init+0xdc>
		break;

	case ON_CHANGE:
		SET_BIT(MCUCR,MCUCR_ISC10);
 99c:	a5 e5       	ldi	r26, 0x55	; 85
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e5 e5       	ldi	r30, 0x55	; 85
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	84 60       	ori	r24, 0x04	; 4
 9a8:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
 9aa:	a5 e5       	ldi	r26, 0x55	; 85
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	e5 e5       	ldi	r30, 0x55	; 85
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	87 7f       	andi	r24, 0xF7	; 247
 9b6:	8c 93       	st	X, r24
 9b8:	0e c0       	rjmp	.+28     	; 0x9d6 <EXTINT_Int1Init+0xdc>
		break;

	case LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC10);
 9ba:	a5 e5       	ldi	r26, 0x55	; 85
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	e5 e5       	ldi	r30, 0x55	; 85
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	8b 7f       	andi	r24, 0xFB	; 251
 9c6:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
 9c8:	a5 e5       	ldi	r26, 0x55	; 85
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	e5 e5       	ldi	r30, 0x55	; 85
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	80 81       	ld	r24, Z
 9d2:	87 7f       	andi	r24, 0xF7	; 247
 9d4:	8c 93       	st	X, r24

	}

	/* Enable PIE of INT1 */

	SET_BIT(GICR,GICR_INT1);
 9d6:	ab e5       	ldi	r26, 0x5B	; 91
 9d8:	b0 e0       	ldi	r27, 0x00	; 0
 9da:	eb e5       	ldi	r30, 0x5B	; 91
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	80 68       	ori	r24, 0x80	; 128
 9e2:	8c 93       	st	X, r24
}
 9e4:	0f 90       	pop	r0
 9e6:	0f 90       	pop	r0
 9e8:	0f 90       	pop	r0
 9ea:	cf 91       	pop	r28
 9ec:	df 91       	pop	r29
 9ee:	08 95       	ret

000009f0 <EXTINT_Int0Init>:

/********************************************************/

void EXTINT_Int0Init(uint8 Int_Sense){
 9f0:	df 93       	push	r29
 9f2:	cf 93       	push	r28
 9f4:	00 d0       	rcall	.+0      	; 0x9f6 <EXTINT_Int0Init+0x6>
 9f6:	0f 92       	push	r0
 9f8:	cd b7       	in	r28, 0x3d	; 61
 9fa:	de b7       	in	r29, 0x3e	; 62
 9fc:	89 83       	std	Y+1, r24	; 0x01

	/* Disable PIE */

	CLR_BIT(GICR,GICR_INT2);
 9fe:	ab e5       	ldi	r26, 0x5B	; 91
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	eb e5       	ldi	r30, 0x5B	; 91
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8f 7d       	andi	r24, 0xDF	; 223
 a0a:	8c 93       	st	X, r24

	/* Set Direction Of INT0 as Input Pullup */

	DIO_SetPinDirection(PORT_D, PIN2 , INPUT_PULLUP_PIN);
 a0c:	83 e0       	ldi	r24, 0x03	; 3
 a0e:	62 e0       	ldi	r22, 0x02	; 2
 a10:	42 e0       	ldi	r20, 0x02	; 2
 a12:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>

	/* Set Sense Control of INT0 */

	switch (Int_Sense){
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	3b 83       	std	Y+3, r19	; 0x03
 a1e:	2a 83       	std	Y+2, r18	; 0x02
 a20:	8a 81       	ldd	r24, Y+2	; 0x02
 a22:	9b 81       	ldd	r25, Y+3	; 0x03
 a24:	82 30       	cpi	r24, 0x02	; 2
 a26:	91 05       	cpc	r25, r1
 a28:	29 f1       	breq	.+74     	; 0xa74 <EXTINT_Int0Init+0x84>
 a2a:	2a 81       	ldd	r18, Y+2	; 0x02
 a2c:	3b 81       	ldd	r19, Y+3	; 0x03
 a2e:	23 30       	cpi	r18, 0x03	; 3
 a30:	31 05       	cpc	r19, r1
 a32:	34 f4       	brge	.+12     	; 0xa40 <EXTINT_Int0Init+0x50>
 a34:	8a 81       	ldd	r24, Y+2	; 0x02
 a36:	9b 81       	ldd	r25, Y+3	; 0x03
 a38:	81 30       	cpi	r24, 0x01	; 1
 a3a:	91 05       	cpc	r25, r1
 a3c:	61 f0       	breq	.+24     	; 0xa56 <EXTINT_Int0Init+0x66>
 a3e:	46 c0       	rjmp	.+140    	; 0xacc <EXTINT_Int0Init+0xdc>
 a40:	2a 81       	ldd	r18, Y+2	; 0x02
 a42:	3b 81       	ldd	r19, Y+3	; 0x03
 a44:	23 30       	cpi	r18, 0x03	; 3
 a46:	31 05       	cpc	r19, r1
 a48:	21 f1       	breq	.+72     	; 0xa92 <EXTINT_Int0Init+0xa2>
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	9b 81       	ldd	r25, Y+3	; 0x03
 a4e:	84 30       	cpi	r24, 0x04	; 4
 a50:	91 05       	cpc	r25, r1
 a52:	71 f1       	breq	.+92     	; 0xab0 <EXTINT_Int0Init+0xc0>
 a54:	3b c0       	rjmp	.+118    	; 0xacc <EXTINT_Int0Init+0xdc>

	case FALLING_EDGE:
		CLR_BIT(MCUCR,MCUCR_ISC00);
 a56:	a5 e5       	ldi	r26, 0x55	; 85
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	e5 e5       	ldi	r30, 0x55	; 85
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	8e 7f       	andi	r24, 0xFE	; 254
 a62:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
 a64:	a5 e5       	ldi	r26, 0x55	; 85
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	e5 e5       	ldi	r30, 0x55	; 85
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	82 60       	ori	r24, 0x02	; 2
 a70:	8c 93       	st	X, r24
 a72:	2c c0       	rjmp	.+88     	; 0xacc <EXTINT_Int0Init+0xdc>
		break;

	case RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
 a74:	a5 e5       	ldi	r26, 0x55	; 85
 a76:	b0 e0       	ldi	r27, 0x00	; 0
 a78:	e5 e5       	ldi	r30, 0x55	; 85
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	81 60       	ori	r24, 0x01	; 1
 a80:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
 a82:	a5 e5       	ldi	r26, 0x55	; 85
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	e5 e5       	ldi	r30, 0x55	; 85
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	82 60       	ori	r24, 0x02	; 2
 a8e:	8c 93       	st	X, r24
 a90:	1d c0       	rjmp	.+58     	; 0xacc <EXTINT_Int0Init+0xdc>
		break;

	case ON_CHANGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
 a92:	a5 e5       	ldi	r26, 0x55	; 85
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	e5 e5       	ldi	r30, 0x55	; 85
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	80 81       	ld	r24, Z
 a9c:	81 60       	ori	r24, 0x01	; 1
 a9e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
 aa0:	a5 e5       	ldi	r26, 0x55	; 85
 aa2:	b0 e0       	ldi	r27, 0x00	; 0
 aa4:	e5 e5       	ldi	r30, 0x55	; 85
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
 aaa:	8d 7f       	andi	r24, 0xFD	; 253
 aac:	8c 93       	st	X, r24
 aae:	0e c0       	rjmp	.+28     	; 0xacc <EXTINT_Int0Init+0xdc>
		break;

	case LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC00);
 ab0:	a5 e5       	ldi	r26, 0x55	; 85
 ab2:	b0 e0       	ldi	r27, 0x00	; 0
 ab4:	e5 e5       	ldi	r30, 0x55	; 85
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	80 81       	ld	r24, Z
 aba:	8e 7f       	andi	r24, 0xFE	; 254
 abc:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
 abe:	a5 e5       	ldi	r26, 0x55	; 85
 ac0:	b0 e0       	ldi	r27, 0x00	; 0
 ac2:	e5 e5       	ldi	r30, 0x55	; 85
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	8d 7f       	andi	r24, 0xFD	; 253
 aca:	8c 93       	st	X, r24

	}

	/* Enable PIE of INT0 */

	SET_BIT(GICR,GICR_INT0);
 acc:	ab e5       	ldi	r26, 0x5B	; 91
 ace:	b0 e0       	ldi	r27, 0x00	; 0
 ad0:	eb e5       	ldi	r30, 0x5B	; 91
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	80 81       	ld	r24, Z
 ad6:	80 64       	ori	r24, 0x40	; 64
 ad8:	8c 93       	st	X, r24

}
 ada:	0f 90       	pop	r0
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	cf 91       	pop	r28
 ae2:	df 91       	pop	r29
 ae4:	08 95       	ret

00000ae6 <EXTINT_Int2Init>:

/********************************************************/

void EXTINT_Int2Init(uint8 Int_Sense){
 ae6:	df 93       	push	r29
 ae8:	cf 93       	push	r28
 aea:	0f 92       	push	r0
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
 af0:	89 83       	std	Y+1, r24	; 0x01
	/* Disable PIE */

	CLR_BIT(GICR,GICR_INT2);
 af2:	ab e5       	ldi	r26, 0x5B	; 91
 af4:	b0 e0       	ldi	r27, 0x00	; 0
 af6:	eb e5       	ldi	r30, 0x5B	; 91
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	80 81       	ld	r24, Z
 afc:	8f 7d       	andi	r24, 0xDF	; 223
 afe:	8c 93       	st	X, r24

	/* Set Direction Of INT2 as Input Pullup */

	DIO_SetPinDirection(PORT_B, PIN2 , INPUT_PULLUP_PIN);
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	62 e0       	ldi	r22, 0x02	; 2
 b04:	42 e0       	ldi	r20, 0x02	; 2
 b06:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>

	/* Set Sense Control of INT2 */

	if(Int_Sense == FALLING_EDGE)
 b0a:	89 81       	ldd	r24, Y+1	; 0x01
 b0c:	81 30       	cpi	r24, 0x01	; 1
 b0e:	41 f4       	brne	.+16     	; 0xb20 <EXTINT_Int2Init+0x3a>
	{
		CLR_BIT(MCUCSR, MCUCR_ISC2);
 b10:	a4 e5       	ldi	r26, 0x54	; 84
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	e4 e5       	ldi	r30, 0x54	; 84
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	80 81       	ld	r24, Z
 b1a:	8f 7b       	andi	r24, 0xBF	; 191
 b1c:	8c 93       	st	X, r24
 b1e:	0a c0       	rjmp	.+20     	; 0xb34 <EXTINT_Int2Init+0x4e>
	}
	else if(Int_Sense == RISING_EDGE)
 b20:	89 81       	ldd	r24, Y+1	; 0x01
 b22:	82 30       	cpi	r24, 0x02	; 2
 b24:	39 f4       	brne	.+14     	; 0xb34 <EXTINT_Int2Init+0x4e>
	{
		SET_BIT(MCUCSR, MCUCR_ISC2);
 b26:	a4 e5       	ldi	r26, 0x54	; 84
 b28:	b0 e0       	ldi	r27, 0x00	; 0
 b2a:	e4 e5       	ldi	r30, 0x54	; 84
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	80 81       	ld	r24, Z
 b30:	80 64       	ori	r24, 0x40	; 64
 b32:	8c 93       	st	X, r24
	}

	/* Enable PIE of INT2 */

	SET_BIT(GICR,GICR_INT2);
 b34:	ab e5       	ldi	r26, 0x5B	; 91
 b36:	b0 e0       	ldi	r27, 0x00	; 0
 b38:	eb e5       	ldi	r30, 0x5B	; 91
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	80 81       	ld	r24, Z
 b3e:	80 62       	ori	r24, 0x20	; 32
 b40:	8c 93       	st	X, r24
}
 b42:	0f 90       	pop	r0
 b44:	cf 91       	pop	r28
 b46:	df 91       	pop	r29
 b48:	08 95       	ret

00000b4a <EXTINT_Disable>:


/********************************************************/

void EXTINT_Disable(uint8 Int){
 b4a:	df 93       	push	r29
 b4c:	cf 93       	push	r28
 b4e:	00 d0       	rcall	.+0      	; 0xb50 <EXTINT_Disable+0x6>
 b50:	0f 92       	push	r0
 b52:	cd b7       	in	r28, 0x3d	; 61
 b54:	de b7       	in	r29, 0x3e	; 62
 b56:	89 83       	std	Y+1, r24	; 0x01
	switch (Int){
 b58:	89 81       	ldd	r24, Y+1	; 0x01
 b5a:	28 2f       	mov	r18, r24
 b5c:	30 e0       	ldi	r19, 0x00	; 0
 b5e:	3b 83       	std	Y+3, r19	; 0x03
 b60:	2a 83       	std	Y+2, r18	; 0x02
 b62:	8a 81       	ldd	r24, Y+2	; 0x02
 b64:	9b 81       	ldd	r25, Y+3	; 0x03
 b66:	82 30       	cpi	r24, 0x02	; 2
 b68:	91 05       	cpc	r25, r1
 b6a:	91 f0       	breq	.+36     	; 0xb90 <EXTINT_Disable+0x46>
 b6c:	2a 81       	ldd	r18, Y+2	; 0x02
 b6e:	3b 81       	ldd	r19, Y+3	; 0x03
 b70:	23 30       	cpi	r18, 0x03	; 3
 b72:	31 05       	cpc	r19, r1
 b74:	a9 f0       	breq	.+42     	; 0xba0 <EXTINT_Disable+0x56>
 b76:	8a 81       	ldd	r24, Y+2	; 0x02
 b78:	9b 81       	ldd	r25, Y+3	; 0x03
 b7a:	81 30       	cpi	r24, 0x01	; 1
 b7c:	91 05       	cpc	r25, r1
 b7e:	b9 f4       	brne	.+46     	; 0xbae <EXTINT_Disable+0x64>
	case INT0: CLR_BIT(GICR,GICR_INT0);		break;
 b80:	ab e5       	ldi	r26, 0x5B	; 91
 b82:	b0 e0       	ldi	r27, 0x00	; 0
 b84:	eb e5       	ldi	r30, 0x5B	; 91
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	80 81       	ld	r24, Z
 b8a:	8f 7b       	andi	r24, 0xBF	; 191
 b8c:	8c 93       	st	X, r24
 b8e:	0f c0       	rjmp	.+30     	; 0xbae <EXTINT_Disable+0x64>
	case INT1: CLR_BIT(GICR,GICR_INT1);		break;
 b90:	ab e5       	ldi	r26, 0x5B	; 91
 b92:	b0 e0       	ldi	r27, 0x00	; 0
 b94:	eb e5       	ldi	r30, 0x5B	; 91
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	80 81       	ld	r24, Z
 b9a:	8f 77       	andi	r24, 0x7F	; 127
 b9c:	8c 93       	st	X, r24
 b9e:	07 c0       	rjmp	.+14     	; 0xbae <EXTINT_Disable+0x64>
	case INT2: CLR_BIT(GICR,GICR_INT2);		break;
 ba0:	ab e5       	ldi	r26, 0x5B	; 91
 ba2:	b0 e0       	ldi	r27, 0x00	; 0
 ba4:	eb e5       	ldi	r30, 0x5B	; 91
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	8f 7d       	andi	r24, 0xDF	; 223
 bac:	8c 93       	st	X, r24

	}
}
 bae:	0f 90       	pop	r0
 bb0:	0f 90       	pop	r0
 bb2:	0f 90       	pop	r0
 bb4:	cf 91       	pop	r28
 bb6:	df 91       	pop	r29
 bb8:	08 95       	ret

00000bba <EXTINT1_CallBack>:

/********************************************************/

void (*GlobalFuncP) (void) = NULL;

void EXTINT1_CallBack (void (*Func_Ptr) (void)){
 bba:	df 93       	push	r29
 bbc:	cf 93       	push	r28
 bbe:	00 d0       	rcall	.+0      	; 0xbc0 <EXTINT1_CallBack+0x6>
 bc0:	cd b7       	in	r28, 0x3d	; 61
 bc2:	de b7       	in	r29, 0x3e	; 62
 bc4:	9a 83       	std	Y+2, r25	; 0x02
 bc6:	89 83       	std	Y+1, r24	; 0x01
	if(Func_Ptr != NULL){
 bc8:	89 81       	ldd	r24, Y+1	; 0x01
 bca:	9a 81       	ldd	r25, Y+2	; 0x02
 bcc:	00 97       	sbiw	r24, 0x00	; 0
 bce:	31 f0       	breq	.+12     	; 0xbdc <EXTINT1_CallBack+0x22>
		GlobalFuncP = Func_Ptr;
 bd0:	89 81       	ldd	r24, Y+1	; 0x01
 bd2:	9a 81       	ldd	r25, Y+2	; 0x02
 bd4:	90 93 61 00 	sts	0x0061, r25
 bd8:	80 93 60 00 	sts	0x0060, r24
	}

}
 bdc:	0f 90       	pop	r0
 bde:	0f 90       	pop	r0
 be0:	cf 91       	pop	r28
 be2:	df 91       	pop	r29
 be4:	08 95       	ret

00000be6 <__vector_2>:

/********************************************************/


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 be6:	1f 92       	push	r1
 be8:	0f 92       	push	r0
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	0f 92       	push	r0
 bee:	11 24       	eor	r1, r1
 bf0:	2f 93       	push	r18
 bf2:	3f 93       	push	r19
 bf4:	4f 93       	push	r20
 bf6:	5f 93       	push	r21
 bf8:	6f 93       	push	r22
 bfa:	7f 93       	push	r23
 bfc:	8f 93       	push	r24
 bfe:	9f 93       	push	r25
 c00:	af 93       	push	r26
 c02:	bf 93       	push	r27
 c04:	ef 93       	push	r30
 c06:	ff 93       	push	r31
 c08:	df 93       	push	r29
 c0a:	cf 93       	push	r28
 c0c:	cd b7       	in	r28, 0x3d	; 61
 c0e:	de b7       	in	r29, 0x3e	; 62
	GlobalFuncP();
 c10:	e0 91 60 00 	lds	r30, 0x0060
 c14:	f0 91 61 00 	lds	r31, 0x0061
 c18:	09 95       	icall
}
 c1a:	cf 91       	pop	r28
 c1c:	df 91       	pop	r29
 c1e:	ff 91       	pop	r31
 c20:	ef 91       	pop	r30
 c22:	bf 91       	pop	r27
 c24:	af 91       	pop	r26
 c26:	9f 91       	pop	r25
 c28:	8f 91       	pop	r24
 c2a:	7f 91       	pop	r23
 c2c:	6f 91       	pop	r22
 c2e:	5f 91       	pop	r21
 c30:	4f 91       	pop	r20
 c32:	3f 91       	pop	r19
 c34:	2f 91       	pop	r18
 c36:	0f 90       	pop	r0
 c38:	0f be       	out	0x3f, r0	; 63
 c3a:	0f 90       	pop	r0
 c3c:	1f 90       	pop	r1
 c3e:	18 95       	reti

00000c40 <GIE_Enable>:
#include "LIB/Bit_Math.h"
#include "GIE_register.h"
#include "GIE_interface.h"


void GIE_Enable(void){
 c40:	df 93       	push	r29
 c42:	cf 93       	push	r28
 c44:	cd b7       	in	r28, 0x3d	; 61
 c46:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
 c48:	af e5       	ldi	r26, 0x5F	; 95
 c4a:	b0 e0       	ldi	r27, 0x00	; 0
 c4c:	ef e5       	ldi	r30, 0x5F	; 95
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	80 81       	ld	r24, Z
 c52:	80 68       	ori	r24, 0x80	; 128
 c54:	8c 93       	st	X, r24
}
 c56:	cf 91       	pop	r28
 c58:	df 91       	pop	r29
 c5a:	08 95       	ret

00000c5c <GIE_Disable>:

void GIE_Disable(void){
 c5c:	df 93       	push	r29
 c5e:	cf 93       	push	r28
 c60:	cd b7       	in	r28, 0x3d	; 61
 c62:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
 c64:	af e5       	ldi	r26, 0x5F	; 95
 c66:	b0 e0       	ldi	r27, 0x00	; 0
 c68:	ef e5       	ldi	r30, 0x5F	; 95
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	80 81       	ld	r24, Z
 c6e:	8f 77       	andi	r24, 0x7F	; 127
 c70:	8c 93       	st	X, r24
}
 c72:	cf 91       	pop	r28
 c74:	df 91       	pop	r29
 c76:	08 95       	ret

00000c78 <Led_ON>:
#include "DIO/DIO_interface.h"
#include "EXTINT_interface.h"
#include "GIE_interface.h"


void Led_ON(void){
 c78:	df 93       	push	r29
 c7a:	cf 93       	push	r28
 c7c:	cd b7       	in	r28, 0x3d	; 61
 c7e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORT_C , PIN0 , PIN_HIGH);
 c80:	82 e0       	ldi	r24, 0x02	; 2
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	41 e0       	ldi	r20, 0x01	; 1
 c86:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
}
 c8a:	cf 91       	pop	r28
 c8c:	df 91       	pop	r29
 c8e:	08 95       	ret

00000c90 <main>:


int main(){
 c90:	df 93       	push	r29
 c92:	cf 93       	push	r28
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORT_C , PIN0 , OUTPUT_PIN);
 c98:	82 e0       	ldi	r24, 0x02	; 2
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	41 e0       	ldi	r20, 0x01	; 1
 c9e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	GIE_Enable();
 ca2:	0e 94 20 06 	call	0xc40	; 0xc40 <GIE_Enable>
	EXTINT_Int1Init(FALLING_EDGE);
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <EXTINT_Int1Init>
	EXTINT1_CallBack(&Led_ON);
 cac:	8c e3       	ldi	r24, 0x3C	; 60
 cae:	96 e0       	ldi	r25, 0x06	; 6
 cb0:	0e 94 dd 05 	call	0xbba	; 0xbba <EXTINT1_CallBack>
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <main+0x24>

00000cb6 <_exit>:
 cb6:	f8 94       	cli

00000cb8 <__stop_program>:
 cb8:	ff cf       	rjmp	.-2      	; 0xcb8 <__stop_program>
