
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002ad4  00002b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d40  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cee  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000567e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000581e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00007e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  000091a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000a538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000a82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2b 14 	call	0x2856	; 0x2856 <main>
      7a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <CLCD_voidSendCommand>:
#include "CLCD_private.h"



void CLCD_voidSendCommand(uint8 Copy_Command)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	e9 97       	sbiw	r28, 0x39	; 57
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin to low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , PIN_LOW);
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>

	/*Set RW pin to low for write*/
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , PIN_LOW);
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Command,7));
     e48:	89 ad       	ldd	r24, Y+57	; 0x39
     e4a:	98 2f       	mov	r25, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	99 27       	eor	r25, r25
     e50:	99 1f       	adc	r25, r25
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	63 e0       	ldi	r22, 0x03	; 3
     e56:	49 2f       	mov	r20, r25
     e58:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Command,6));
     e5c:	89 ad       	ldd	r24, Y+57	; 0x39
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	80 74       	andi	r24, 0x40	; 64
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	08 2e       	mov	r0, r24
     e68:	89 2f       	mov	r24, r25
     e6a:	00 0c       	add	r0, r0
     e6c:	88 1f       	adc	r24, r24
     e6e:	99 0b       	sbc	r25, r25
     e70:	00 0c       	add	r0, r0
     e72:	88 1f       	adc	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	98 2f       	mov	r25, r24
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	49 2f       	mov	r20, r25
     e7e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Command,5));
     e82:	89 ad       	ldd	r24, Y+57	; 0x39
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 72       	andi	r24, 0x20	; 32
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	95 95       	asr	r25
     e8e:	87 95       	ror	r24
     e90:	95 95       	asr	r25
     e92:	87 95       	ror	r24
     e94:	95 95       	asr	r25
     e96:	87 95       	ror	r24
     e98:	95 95       	asr	r25
     e9a:	87 95       	ror	r24
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	98 2f       	mov	r25, r24
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	49 2f       	mov	r20, r25
     ea8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Command,4));
     eac:	89 ad       	ldd	r24, Y+57	; 0x39
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	80 71       	andi	r24, 0x10	; 16
     eb4:	90 70       	andi	r25, 0x00	; 0
     eb6:	95 95       	asr	r25
     eb8:	87 95       	ror	r24
     eba:	95 95       	asr	r25
     ebc:	87 95       	ror	r24
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	95 95       	asr	r25
     ec4:	87 95       	ror	r24
     ec6:	98 2f       	mov	r25, r24
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	49 2f       	mov	r20, r25
     ece:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>


	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	62 e0       	ldi	r22, 0x02	; 2
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e4       	ldi	r27, 0x40	; 64
     ee4:	8d ab       	std	Y+53, r24	; 0x35
     ee6:	9e ab       	std	Y+54, r25	; 0x36
     ee8:	af ab       	std	Y+55, r26	; 0x37
     eea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eec:	6d a9       	ldd	r22, Y+53	; 0x35
     eee:	7e a9       	ldd	r23, Y+54	; 0x36
     ef0:	8f a9       	ldd	r24, Y+55	; 0x37
     ef2:	98 ad       	ldd	r25, Y+56	; 0x38
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4a e7       	ldi	r20, 0x7A	; 122
     efa:	53 e4       	ldi	r21, 0x43	; 67
     efc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	89 ab       	std	Y+49, r24	; 0x31
     f06:	9a ab       	std	Y+50, r25	; 0x32
     f08:	ab ab       	std	Y+51, r26	; 0x33
     f0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f0c:	69 a9       	ldd	r22, Y+49	; 0x31
     f0e:	7a a9       	ldd	r23, Y+50	; 0x32
     f10:	8b a9       	ldd	r24, Y+51	; 0x33
     f12:	9c a9       	ldd	r25, Y+52	; 0x34
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f20:	88 23       	and	r24, r24
     f22:	2c f4       	brge	.+10     	; 0xf2e <CLCD_voidSendCommand+0x110>
		__ticks = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	98 ab       	std	Y+48, r25	; 0x30
     f2a:	8f a7       	std	Y+47, r24	; 0x2f
     f2c:	3f c0       	rjmp	.+126    	; 0xfac <CLCD_voidSendCommand+0x18e>
	else if (__tmp > 65535)
     f2e:	69 a9       	ldd	r22, Y+49	; 0x31
     f30:	7a a9       	ldd	r23, Y+50	; 0x32
     f32:	8b a9       	ldd	r24, Y+51	; 0x33
     f34:	9c a9       	ldd	r25, Y+52	; 0x34
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	4c f5       	brge	.+82     	; 0xf98 <CLCD_voidSendCommand+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	6d a9       	ldd	r22, Y+53	; 0x35
     f48:	7e a9       	ldd	r23, Y+54	; 0x36
     f4a:	8f a9       	ldd	r24, Y+55	; 0x37
     f4c:	98 ad       	ldd	r25, Y+56	; 0x38
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	98 ab       	std	Y+48, r25	; 0x30
     f6c:	8f a7       	std	Y+47, r24	; 0x2f
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <CLCD_voidSendCommand+0x170>
     f70:	89 e1       	ldi	r24, 0x19	; 25
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9e a7       	std	Y+46, r25	; 0x2e
     f76:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f78:	8d a5       	ldd	r24, Y+45	; 0x2d
     f7a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <CLCD_voidSendCommand+0x15e>
     f80:	9e a7       	std	Y+46, r25	; 0x2e
     f82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	8f a5       	ldd	r24, Y+47	; 0x2f
     f86:	98 a9       	ldd	r25, Y+48	; 0x30
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	98 ab       	std	Y+48, r25	; 0x30
     f8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f90:	98 a9       	ldd	r25, Y+48	; 0x30
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	69 f7       	brne	.-38     	; 0xf70 <CLCD_voidSendCommand+0x152>
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <CLCD_voidSendCommand+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f98:	69 a9       	ldd	r22, Y+49	; 0x31
     f9a:	7a a9       	ldd	r23, Y+50	; 0x32
     f9c:	8b a9       	ldd	r24, Y+51	; 0x33
     f9e:	9c a9       	ldd	r25, Y+52	; 0x34
     fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	98 ab       	std	Y+48, r25	; 0x30
     faa:	8f a7       	std	Y+47, r24	; 0x2f
     fac:	8f a5       	ldd	r24, Y+47	; 0x2f
     fae:	98 a9       	ldd	r25, Y+48	; 0x30
     fb0:	9c a7       	std	Y+44, r25	; 0x2c
     fb2:	8b a7       	std	Y+43, r24	; 0x2b
     fb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb6:	9c a5       	ldd	r25, Y+44	; 0x2c
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <CLCD_voidSendCommand+0x19a>
     fbc:	9c a7       	std	Y+44, r25	; 0x2c
     fbe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	62 e0       	ldi	r22, 0x02	; 2
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	b0 e4       	ldi	r27, 0x40	; 64
     fd2:	8f a3       	std	Y+39, r24	; 0x27
     fd4:	98 a7       	std	Y+40, r25	; 0x28
     fd6:	a9 a7       	std	Y+41, r26	; 0x29
     fd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	6f a1       	ldd	r22, Y+39	; 0x27
     fdc:	78 a5       	ldd	r23, Y+40	; 0x28
     fde:	89 a5       	ldd	r24, Y+41	; 0x29
     fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	53 e4       	ldi	r21, 0x43	; 67
     fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8b a3       	std	Y+35, r24	; 0x23
     ff4:	9c a3       	std	Y+36, r25	; 0x24
     ff6:	ad a3       	std	Y+37, r26	; 0x25
     ff8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ffa:	6b a1       	ldd	r22, Y+35	; 0x23
     ffc:	7c a1       	ldd	r23, Y+36	; 0x24
     ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    1000:	9e a1       	ldd	r25, Y+38	; 0x26
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <CLCD_voidSendCommand+0x1fe>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9a a3       	std	Y+34, r25	; 0x22
    1018:	89 a3       	std	Y+33, r24	; 0x21
    101a:	3f c0       	rjmp	.+126    	; 0x109a <CLCD_voidSendCommand+0x27c>
	else if (__tmp > 65535)
    101c:	6b a1       	ldd	r22, Y+35	; 0x23
    101e:	7c a1       	ldd	r23, Y+36	; 0x24
    1020:	8d a1       	ldd	r24, Y+37	; 0x25
    1022:	9e a1       	ldd	r25, Y+38	; 0x26
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <CLCD_voidSendCommand+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	6f a1       	ldd	r22, Y+39	; 0x27
    1036:	78 a5       	ldd	r23, Y+40	; 0x28
    1038:	89 a5       	ldd	r24, Y+41	; 0x29
    103a:	9a a5       	ldd	r25, Y+42	; 0x2a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9a a3       	std	Y+34, r25	; 0x22
    105a:	89 a3       	std	Y+33, r24	; 0x21
    105c:	0f c0       	rjmp	.+30     	; 0x107c <CLCD_voidSendCommand+0x25e>
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	98 a3       	std	Y+32, r25	; 0x20
    1064:	8f 8f       	std	Y+31, r24	; 0x1f
    1066:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1068:	98 a1       	ldd	r25, Y+32	; 0x20
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <CLCD_voidSendCommand+0x24c>
    106e:	98 a3       	std	Y+32, r25	; 0x20
    1070:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	89 a1       	ldd	r24, Y+33	; 0x21
    1074:	9a a1       	ldd	r25, Y+34	; 0x22
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9a a3       	std	Y+34, r25	; 0x22
    107a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	89 a1       	ldd	r24, Y+33	; 0x21
    107e:	9a a1       	ldd	r25, Y+34	; 0x22
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <CLCD_voidSendCommand+0x240>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <CLCD_voidSendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6b a1       	ldd	r22, Y+35	; 0x23
    1088:	7c a1       	ldd	r23, Y+36	; 0x24
    108a:	8d a1       	ldd	r24, Y+37	; 0x25
    108c:	9e a1       	ldd	r25, Y+38	; 0x26
    108e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	9e 8f       	std	Y+30, r25	; 0x1e
    10a0:	8d 8f       	std	Y+29, r24	; 0x1d
    10a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <CLCD_voidSendCommand+0x288>
    10aa:	9e 8f       	std	Y+30, r25	; 0x1e
    10ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Command,PIN3));
    10ae:	89 ad       	ldd	r24, Y+57	; 0x39
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	88 70       	andi	r24, 0x08	; 8
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	95 95       	asr	r25
    10ba:	87 95       	ror	r24
    10bc:	95 95       	asr	r25
    10be:	87 95       	ror	r24
    10c0:	95 95       	asr	r25
    10c2:	87 95       	ror	r24
    10c4:	98 2f       	mov	r25, r24
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	49 2f       	mov	r20, r25
    10cc:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Command,PIN2));
    10d0:	89 ad       	ldd	r24, Y+57	; 0x39
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	84 70       	andi	r24, 0x04	; 4
    10d8:	90 70       	andi	r25, 0x00	; 0
    10da:	95 95       	asr	r25
    10dc:	87 95       	ror	r24
    10de:	95 95       	asr	r25
    10e0:	87 95       	ror	r24
    10e2:	98 2f       	mov	r25, r24
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	62 e0       	ldi	r22, 0x02	; 2
    10e8:	49 2f       	mov	r20, r25
    10ea:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Command,PIN1));
    10ee:	89 ad       	ldd	r24, Y+57	; 0x39
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	82 70       	andi	r24, 0x02	; 2
    10f6:	90 70       	andi	r25, 0x00	; 0
    10f8:	95 95       	asr	r25
    10fa:	87 95       	ror	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	49 2f       	mov	r20, r25
    1104:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Command,PIN0));
    1108:	89 ad       	ldd	r24, Y+57	; 0x39
    110a:	98 2f       	mov	r25, r24
    110c:	91 70       	andi	r25, 0x01	; 1
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	49 2f       	mov	r20, r25
    1114:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e4       	ldi	r27, 0x40	; 64
    112a:	89 8f       	std	Y+25, r24	; 0x19
    112c:	9a 8f       	std	Y+26, r25	; 0x1a
    112e:	ab 8f       	std	Y+27, r26	; 0x1b
    1130:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1132:	69 8d       	ldd	r22, Y+25	; 0x19
    1134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	4a e7       	ldi	r20, 0x7A	; 122
    1140:	53 e4       	ldi	r21, 0x43	; 67
    1142:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	8d 8b       	std	Y+21, r24	; 0x15
    114c:	9e 8b       	std	Y+22, r25	; 0x16
    114e:	af 8b       	std	Y+23, r26	; 0x17
    1150:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1152:	6d 89       	ldd	r22, Y+21	; 0x15
    1154:	7e 89       	ldd	r23, Y+22	; 0x16
    1156:	8f 89       	ldd	r24, Y+23	; 0x17
    1158:	98 8d       	ldd	r25, Y+24	; 0x18
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	2c f4       	brge	.+10     	; 0x1174 <CLCD_voidSendCommand+0x356>
		__ticks = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9c 8b       	std	Y+20, r25	; 0x14
    1170:	8b 8b       	std	Y+19, r24	; 0x13
    1172:	3f c0       	rjmp	.+126    	; 0x11f2 <CLCD_voidSendCommand+0x3d4>
	else if (__tmp > 65535)
    1174:	6d 89       	ldd	r22, Y+21	; 0x15
    1176:	7e 89       	ldd	r23, Y+22	; 0x16
    1178:	8f 89       	ldd	r24, Y+23	; 0x17
    117a:	98 8d       	ldd	r25, Y+24	; 0x18
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	3f ef       	ldi	r19, 0xFF	; 255
    1180:	4f e7       	ldi	r20, 0x7F	; 127
    1182:	57 e4       	ldi	r21, 0x47	; 71
    1184:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1188:	18 16       	cp	r1, r24
    118a:	4c f5       	brge	.+82     	; 0x11de <CLCD_voidSendCommand+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118c:	69 8d       	ldd	r22, Y+25	; 0x19
    118e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	51 e4       	ldi	r21, 0x41	; 65
    119c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9c 8b       	std	Y+20, r25	; 0x14
    11b2:	8b 8b       	std	Y+19, r24	; 0x13
    11b4:	0f c0       	rjmp	.+30     	; 0x11d4 <CLCD_voidSendCommand+0x3b6>
    11b6:	89 e1       	ldi	r24, 0x19	; 25
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	9a 8b       	std	Y+18, r25	; 0x12
    11bc:	89 8b       	std	Y+17, r24	; 0x11
    11be:	89 89       	ldd	r24, Y+17	; 0x11
    11c0:	9a 89       	ldd	r25, Y+18	; 0x12
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <CLCD_voidSendCommand+0x3a4>
    11c6:	9a 8b       	std	Y+18, r25	; 0x12
    11c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ca:	8b 89       	ldd	r24, Y+19	; 0x13
    11cc:	9c 89       	ldd	r25, Y+20	; 0x14
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	9c 8b       	std	Y+20, r25	; 0x14
    11d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d4:	8b 89       	ldd	r24, Y+19	; 0x13
    11d6:	9c 89       	ldd	r25, Y+20	; 0x14
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	69 f7       	brne	.-38     	; 0x11b6 <CLCD_voidSendCommand+0x398>
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <CLCD_voidSendCommand+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11de:	6d 89       	ldd	r22, Y+21	; 0x15
    11e0:	7e 89       	ldd	r23, Y+22	; 0x16
    11e2:	8f 89       	ldd	r24, Y+23	; 0x17
    11e4:	98 8d       	ldd	r25, Y+24	; 0x18
    11e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9c 8b       	std	Y+20, r25	; 0x14
    11f0:	8b 8b       	std	Y+19, r24	; 0x13
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	98 8b       	std	Y+16, r25	; 0x10
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
    11fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fc:	98 89       	ldd	r25, Y+16	; 0x10
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <CLCD_voidSendCommand+0x3e0>
    1202:	98 8b       	std	Y+16, r25	; 0x10
    1204:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	62 e0       	ldi	r22, 0x02	; 2
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e4       	ldi	r27, 0x40	; 64
    1218:	8b 87       	std	Y+11, r24	; 0x0b
    121a:	9c 87       	std	Y+12, r25	; 0x0c
    121c:	ad 87       	std	Y+13, r26	; 0x0d
    121e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	7c 85       	ldd	r23, Y+12	; 0x0c
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a e7       	ldi	r20, 0x7A	; 122
    122e:	53 e4       	ldi	r21, 0x43	; 67
    1230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8f 83       	std	Y+7, r24	; 0x07
    123a:	98 87       	std	Y+8, r25	; 0x08
    123c:	a9 87       	std	Y+9, r26	; 0x09
    123e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <CLCD_voidSendCommand+0x444>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <CLCD_voidSendCommand+0x4c2>
	else if (__tmp > 65535)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <CLCD_voidSendCommand+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <CLCD_voidSendCommand+0x4a4>
    12a4:	89 e1       	ldi	r24, 0x19	; 25
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <CLCD_voidSendCommand+0x492>
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <CLCD_voidSendCommand+0x486>
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <CLCD_voidSendCommand+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <CLCD_voidSendCommand+0x4ce>
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    12f4:	e9 96       	adiw	r28, 0x39	; 57
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <CLCD_voidSendData>:

/***************************************************************************/

void CLCD_voidSendData(uint8 Copy_Data)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	e9 97       	sbiw	r28, 0x39	; 57
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	89 af       	std	Y+57, r24	; 0x39

	/*Set RS pin to high for data*/
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , PIN_HIGH);
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>

	/*Set RW pin to low for write*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN, PIN_LOW);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Data,PIN7));
    1330:	89 ad       	ldd	r24, Y+57	; 0x39
    1332:	98 2f       	mov	r25, r24
    1334:	99 1f       	adc	r25, r25
    1336:	99 27       	eor	r25, r25
    1338:	99 1f       	adc	r25, r25
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	63 e0       	ldi	r22, 0x03	; 3
    133e:	49 2f       	mov	r20, r25
    1340:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Data,PIN6));
    1344:	89 ad       	ldd	r24, Y+57	; 0x39
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	80 74       	andi	r24, 0x40	; 64
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	08 2e       	mov	r0, r24
    1350:	89 2f       	mov	r24, r25
    1352:	00 0c       	add	r0, r0
    1354:	88 1f       	adc	r24, r24
    1356:	99 0b       	sbc	r25, r25
    1358:	00 0c       	add	r0, r0
    135a:	88 1f       	adc	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	98 2f       	mov	r25, r24
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	49 2f       	mov	r20, r25
    1366:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Data,PIN5));
    136a:	89 ad       	ldd	r24, Y+57	; 0x39
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	80 72       	andi	r24, 0x20	; 32
    1372:	90 70       	andi	r25, 0x00	; 0
    1374:	95 95       	asr	r25
    1376:	87 95       	ror	r24
    1378:	95 95       	asr	r25
    137a:	87 95       	ror	r24
    137c:	95 95       	asr	r25
    137e:	87 95       	ror	r24
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	95 95       	asr	r25
    1386:	87 95       	ror	r24
    1388:	98 2f       	mov	r25, r24
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	49 2f       	mov	r20, r25
    1390:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Data,PIN4));
    1394:	89 ad       	ldd	r24, Y+57	; 0x39
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	80 71       	andi	r24, 0x10	; 16
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	95 95       	asr	r25
    13a0:	87 95       	ror	r24
    13a2:	95 95       	asr	r25
    13a4:	87 95       	ror	r24
    13a6:	95 95       	asr	r25
    13a8:	87 95       	ror	r24
    13aa:	95 95       	asr	r25
    13ac:	87 95       	ror	r24
    13ae:	98 2f       	mov	r25, r24
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	49 2f       	mov	r20, r25
    13b6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>


	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	b0 e4       	ldi	r27, 0x40	; 64
    13cc:	8d ab       	std	Y+53, r24	; 0x35
    13ce:	9e ab       	std	Y+54, r25	; 0x36
    13d0:	af ab       	std	Y+55, r26	; 0x37
    13d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	6d a9       	ldd	r22, Y+53	; 0x35
    13d6:	7e a9       	ldd	r23, Y+54	; 0x36
    13d8:	8f a9       	ldd	r24, Y+55	; 0x37
    13da:	98 ad       	ldd	r25, Y+56	; 0x38
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a e7       	ldi	r20, 0x7A	; 122
    13e2:	53 e4       	ldi	r21, 0x43	; 67
    13e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	89 ab       	std	Y+49, r24	; 0x31
    13ee:	9a ab       	std	Y+50, r25	; 0x32
    13f0:	ab ab       	std	Y+51, r26	; 0x33
    13f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13f4:	69 a9       	ldd	r22, Y+49	; 0x31
    13f6:	7a a9       	ldd	r23, Y+50	; 0x32
    13f8:	8b a9       	ldd	r24, Y+51	; 0x33
    13fa:	9c a9       	ldd	r25, Y+52	; 0x34
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <CLCD_voidSendData+0x110>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	98 ab       	std	Y+48, r25	; 0x30
    1412:	8f a7       	std	Y+47, r24	; 0x2f
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <CLCD_voidSendData+0x18e>
	else if (__tmp > 65535)
    1416:	69 a9       	ldd	r22, Y+49	; 0x31
    1418:	7a a9       	ldd	r23, Y+50	; 0x32
    141a:	8b a9       	ldd	r24, Y+51	; 0x33
    141c:	9c a9       	ldd	r25, Y+52	; 0x34
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <CLCD_voidSendData+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	6d a9       	ldd	r22, Y+53	; 0x35
    1430:	7e a9       	ldd	r23, Y+54	; 0x36
    1432:	8f a9       	ldd	r24, Y+55	; 0x37
    1434:	98 ad       	ldd	r25, Y+56	; 0x38
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	98 ab       	std	Y+48, r25	; 0x30
    1454:	8f a7       	std	Y+47, r24	; 0x2f
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <CLCD_voidSendData+0x170>
    1458:	89 e1       	ldi	r24, 0x19	; 25
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9e a7       	std	Y+46, r25	; 0x2e
    145e:	8d a7       	std	Y+45, r24	; 0x2d
    1460:	8d a5       	ldd	r24, Y+45	; 0x2d
    1462:	9e a5       	ldd	r25, Y+46	; 0x2e
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <CLCD_voidSendData+0x15e>
    1468:	9e a7       	std	Y+46, r25	; 0x2e
    146a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8f a5       	ldd	r24, Y+47	; 0x2f
    146e:	98 a9       	ldd	r25, Y+48	; 0x30
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	98 ab       	std	Y+48, r25	; 0x30
    1474:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8f a5       	ldd	r24, Y+47	; 0x2f
    1478:	98 a9       	ldd	r25, Y+48	; 0x30
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <CLCD_voidSendData+0x152>
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <CLCD_voidSendData+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	69 a9       	ldd	r22, Y+49	; 0x31
    1482:	7a a9       	ldd	r23, Y+50	; 0x32
    1484:	8b a9       	ldd	r24, Y+51	; 0x33
    1486:	9c a9       	ldd	r25, Y+52	; 0x34
    1488:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	98 ab       	std	Y+48, r25	; 0x30
    1492:	8f a7       	std	Y+47, r24	; 0x2f
    1494:	8f a5       	ldd	r24, Y+47	; 0x2f
    1496:	98 a9       	ldd	r25, Y+48	; 0x30
    1498:	9c a7       	std	Y+44, r25	; 0x2c
    149a:	8b a7       	std	Y+43, r24	; 0x2b
    149c:	8b a5       	ldd	r24, Y+43	; 0x2b
    149e:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <CLCD_voidSendData+0x19a>
    14a4:	9c a7       	std	Y+44, r25	; 0x2c
    14a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e4       	ldi	r27, 0x40	; 64
    14ba:	8f a3       	std	Y+39, r24	; 0x27
    14bc:	98 a7       	std	Y+40, r25	; 0x28
    14be:	a9 a7       	std	Y+41, r26	; 0x29
    14c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6f a1       	ldd	r22, Y+39	; 0x27
    14c4:	78 a5       	ldd	r23, Y+40	; 0x28
    14c6:	89 a5       	ldd	r24, Y+41	; 0x29
    14c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	53 e4       	ldi	r21, 0x43	; 67
    14d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8b a3       	std	Y+35, r24	; 0x23
    14dc:	9c a3       	std	Y+36, r25	; 0x24
    14de:	ad a3       	std	Y+37, r26	; 0x25
    14e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14e2:	6b a1       	ldd	r22, Y+35	; 0x23
    14e4:	7c a1       	ldd	r23, Y+36	; 0x24
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <CLCD_voidSendData+0x1fe>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9a a3       	std	Y+34, r25	; 0x22
    1500:	89 a3       	std	Y+33, r24	; 0x21
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <CLCD_voidSendData+0x27c>
	else if (__tmp > 65535)
    1504:	6b a1       	ldd	r22, Y+35	; 0x23
    1506:	7c a1       	ldd	r23, Y+36	; 0x24
    1508:	8d a1       	ldd	r24, Y+37	; 0x25
    150a:	9e a1       	ldd	r25, Y+38	; 0x26
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <CLCD_voidSendData+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6f a1       	ldd	r22, Y+39	; 0x27
    151e:	78 a5       	ldd	r23, Y+40	; 0x28
    1520:	89 a5       	ldd	r24, Y+41	; 0x29
    1522:	9a a5       	ldd	r25, Y+42	; 0x2a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9a a3       	std	Y+34, r25	; 0x22
    1542:	89 a3       	std	Y+33, r24	; 0x21
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <CLCD_voidSendData+0x25e>
    1546:	89 e1       	ldi	r24, 0x19	; 25
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	98 a3       	std	Y+32, r25	; 0x20
    154c:	8f 8f       	std	Y+31, r24	; 0x1f
    154e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1550:	98 a1       	ldd	r25, Y+32	; 0x20
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <CLCD_voidSendData+0x24c>
    1556:	98 a3       	std	Y+32, r25	; 0x20
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	89 a1       	ldd	r24, Y+33	; 0x21
    155c:	9a a1       	ldd	r25, Y+34	; 0x22
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9a a3       	std	Y+34, r25	; 0x22
    1562:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <CLCD_voidSendData+0x240>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <CLCD_voidSendData+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6b a1       	ldd	r22, Y+35	; 0x23
    1570:	7c a1       	ldd	r23, Y+36	; 0x24
    1572:	8d a1       	ldd	r24, Y+37	; 0x25
    1574:	9e a1       	ldd	r25, Y+38	; 0x26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9a a3       	std	Y+34, r25	; 0x22
    1580:	89 a3       	std	Y+33, r24	; 0x21
    1582:	89 a1       	ldd	r24, Y+33	; 0x21
    1584:	9a a1       	ldd	r25, Y+34	; 0x22
    1586:	9e 8f       	std	Y+30, r25	; 0x1e
    1588:	8d 8f       	std	Y+29, r24	; 0x1d
    158a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <CLCD_voidSendData+0x288>
    1592:	9e 8f       	std	Y+30, r25	; 0x1e
    1594:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D7_PIN , GET_BIT(Copy_Data,PIN3));
    1596:	89 ad       	ldd	r24, Y+57	; 0x39
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	88 70       	andi	r24, 0x08	; 8
    159e:	90 70       	andi	r25, 0x00	; 0
    15a0:	95 95       	asr	r25
    15a2:	87 95       	ror	r24
    15a4:	95 95       	asr	r25
    15a6:	87 95       	ror	r24
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	98 2f       	mov	r25, r24
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	63 e0       	ldi	r22, 0x03	; 3
    15b2:	49 2f       	mov	r20, r25
    15b4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D6_PIN , GET_BIT(Copy_Data,PIN2));
    15b8:	89 ad       	ldd	r24, Y+57	; 0x39
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	84 70       	andi	r24, 0x04	; 4
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	95 95       	asr	r25
    15c4:	87 95       	ror	r24
    15c6:	95 95       	asr	r25
    15c8:	87 95       	ror	r24
    15ca:	98 2f       	mov	r25, r24
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	49 2f       	mov	r20, r25
    15d2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D5_PIN , GET_BIT(Copy_Data,PIN1));
    15d6:	89 ad       	ldd	r24, Y+57	; 0x39
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	82 70       	andi	r24, 0x02	; 2
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	95 95       	asr	r25
    15e2:	87 95       	ror	r24
    15e4:	98 2f       	mov	r25, r24
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	49 2f       	mov	r20, r25
    15ec:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_DATA_PORT , CLCD_D4_PIN , GET_BIT(Copy_Data,PIN0));
    15f0:	89 ad       	ldd	r24, Y+57	; 0x39
    15f2:	98 2f       	mov	r25, r24
    15f4:	91 70       	andi	r25, 0x01	; 1
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	49 2f       	mov	r20, r25
    15fc:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>

	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_HIGH);
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	62 e0       	ldi	r22, 0x02	; 2
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e4       	ldi	r27, 0x40	; 64
    1612:	89 8f       	std	Y+25, r24	; 0x19
    1614:	9a 8f       	std	Y+26, r25	; 0x1a
    1616:	ab 8f       	std	Y+27, r26	; 0x1b
    1618:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161a:	69 8d       	ldd	r22, Y+25	; 0x19
    161c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1620:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	4a e7       	ldi	r20, 0x7A	; 122
    1628:	53 e4       	ldi	r21, 0x43	; 67
    162a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	8d 8b       	std	Y+21, r24	; 0x15
    1634:	9e 8b       	std	Y+22, r25	; 0x16
    1636:	af 8b       	std	Y+23, r26	; 0x17
    1638:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    163a:	6d 89       	ldd	r22, Y+21	; 0x15
    163c:	7e 89       	ldd	r23, Y+22	; 0x16
    163e:	8f 89       	ldd	r24, Y+23	; 0x17
    1640:	98 8d       	ldd	r25, Y+24	; 0x18
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	5f e3       	ldi	r21, 0x3F	; 63
    164a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    164e:	88 23       	and	r24, r24
    1650:	2c f4       	brge	.+10     	; 0x165c <CLCD_voidSendData+0x356>
		__ticks = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9c 8b       	std	Y+20, r25	; 0x14
    1658:	8b 8b       	std	Y+19, r24	; 0x13
    165a:	3f c0       	rjmp	.+126    	; 0x16da <CLCD_voidSendData+0x3d4>
	else if (__tmp > 65535)
    165c:	6d 89       	ldd	r22, Y+21	; 0x15
    165e:	7e 89       	ldd	r23, Y+22	; 0x16
    1660:	8f 89       	ldd	r24, Y+23	; 0x17
    1662:	98 8d       	ldd	r25, Y+24	; 0x18
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	4c f5       	brge	.+82     	; 0x16c6 <CLCD_voidSendData+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1674:	69 8d       	ldd	r22, Y+25	; 0x19
    1676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e2       	ldi	r20, 0x20	; 32
    1682:	51 e4       	ldi	r21, 0x41	; 65
    1684:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <CLCD_voidSendData+0x3b6>
    169e:	89 e1       	ldi	r24, 0x19	; 25
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9a 8b       	std	Y+18, r25	; 0x12
    16a4:	89 8b       	std	Y+17, r24	; 0x11
    16a6:	89 89       	ldd	r24, Y+17	; 0x11
    16a8:	9a 89       	ldd	r25, Y+18	; 0x12
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <CLCD_voidSendData+0x3a4>
    16ae:	9a 8b       	std	Y+18, r25	; 0x12
    16b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b2:	8b 89       	ldd	r24, Y+19	; 0x13
    16b4:	9c 89       	ldd	r25, Y+20	; 0x14
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	9c 8b       	std	Y+20, r25	; 0x14
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16bc:	8b 89       	ldd	r24, Y+19	; 0x13
    16be:	9c 89       	ldd	r25, Y+20	; 0x14
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	69 f7       	brne	.-38     	; 0x169e <CLCD_voidSendData+0x398>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <CLCD_voidSendData+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9c 8b       	std	Y+20, r25	; 0x14
    16d8:	8b 8b       	std	Y+19, r24	; 0x13
    16da:	8b 89       	ldd	r24, Y+19	; 0x13
    16dc:	9c 89       	ldd	r25, Y+20	; 0x14
    16de:	98 8b       	std	Y+16, r25	; 0x10
    16e0:	8f 87       	std	Y+15, r24	; 0x0f
    16e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e4:	98 89       	ldd	r25, Y+16	; 0x10
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <CLCD_voidSendData+0x3e0>
    16ea:	98 8b       	std	Y+16, r25	; 0x10
    16ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , PIN_LOW);
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_SetPinValue>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e4       	ldi	r27, 0x40	; 64
    1700:	8b 87       	std	Y+11, r24	; 0x0b
    1702:	9c 87       	std	Y+12, r25	; 0x0c
    1704:	ad 87       	std	Y+13, r26	; 0x0d
    1706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8f 83       	std	Y+7, r24	; 0x07
    1722:	98 87       	std	Y+8, r25	; 0x08
    1724:	a9 87       	std	Y+9, r26	; 0x09
    1726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <CLCD_voidSendData+0x444>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <CLCD_voidSendData+0x4c2>
	else if (__tmp > 65535)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <CLCD_voidSendData+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <CLCD_voidSendData+0x4a4>
    178c:	89 e1       	ldi	r24, 0x19	; 25
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <CLCD_voidSendData+0x492>
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <CLCD_voidSendData+0x486>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <CLCD_voidSendData+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <CLCD_voidSendData+0x4ce>
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    17dc:	e9 96       	adiw	r28, 0x39	; 57
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <CLCD_voidInit>:


/***************************************************************************/

void CLCD_voidInit(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	e8 97       	sbiw	r28, 0x38	; 56
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e2       	ldi	r26, 0x20	; 32
    1808:	b2 e4       	ldi	r27, 0x42	; 66
    180a:	8d ab       	std	Y+53, r24	; 0x35
    180c:	9e ab       	std	Y+54, r25	; 0x36
    180e:	af ab       	std	Y+55, r26	; 0x37
    1810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6d a9       	ldd	r22, Y+53	; 0x35
    1814:	7e a9       	ldd	r23, Y+54	; 0x36
    1816:	8f a9       	ldd	r24, Y+55	; 0x37
    1818:	98 ad       	ldd	r25, Y+56	; 0x38
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a e7       	ldi	r20, 0x7A	; 122
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	89 ab       	std	Y+49, r24	; 0x31
    182c:	9a ab       	std	Y+50, r25	; 0x32
    182e:	ab ab       	std	Y+51, r26	; 0x33
    1830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1832:	69 a9       	ldd	r22, Y+49	; 0x31
    1834:	7a a9       	ldd	r23, Y+50	; 0x32
    1836:	8b a9       	ldd	r24, Y+51	; 0x33
    1838:	9c a9       	ldd	r25, Y+52	; 0x34
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <CLCD_voidInit+0x66>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	98 ab       	std	Y+48, r25	; 0x30
    1850:	8f a7       	std	Y+47, r24	; 0x2f
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1854:	69 a9       	ldd	r22, Y+49	; 0x31
    1856:	7a a9       	ldd	r23, Y+50	; 0x32
    1858:	8b a9       	ldd	r24, Y+51	; 0x33
    185a:	9c a9       	ldd	r25, Y+52	; 0x34
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6d a9       	ldd	r22, Y+53	; 0x35
    186e:	7e a9       	ldd	r23, Y+54	; 0x36
    1870:	8f a9       	ldd	r24, Y+55	; 0x37
    1872:	98 ad       	ldd	r25, Y+56	; 0x38
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <CLCD_voidInit+0xc6>
    1896:	89 e1       	ldi	r24, 0x19	; 25
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9e a7       	std	Y+46, r25	; 0x2e
    189c:	8d a7       	std	Y+45, r24	; 0x2d
    189e:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <CLCD_voidInit+0xb4>
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	98 ab       	std	Y+48, r25	; 0x30
    18b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b6:	98 a9       	ldd	r25, Y+48	; 0x30
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <CLCD_voidInit+0xa8>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	69 a9       	ldd	r22, Y+49	; 0x31
    18c0:	7a a9       	ldd	r23, Y+50	; 0x32
    18c2:	8b a9       	ldd	r24, Y+51	; 0x33
    18c4:	9c a9       	ldd	r25, Y+52	; 0x34
    18c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d4:	98 a9       	ldd	r25, Y+48	; 0x30
    18d6:	9c a7       	std	Y+44, r25	; 0x2c
    18d8:	8b a7       	std	Y+43, r24	; 0x2b
    18da:	8b a5       	ldd	r24, Y+43	; 0x2b
    18dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <CLCD_voidInit+0xf0>
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set */
	DIO_SetPinDirection(CLCD_CTRL_PORT ,CLCD_RS_PIN , OUTPUT_PIN);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT ,CLCD_EN_PIN , OUTPUT_PIN);
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	62 e0       	ldi	r22, 0x02	; 2
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT ,CLCD_RW_PIN , OUTPUT_PIN);
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D4_PIN , OUTPUT_PIN);
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D5_PIN , OUTPUT_PIN);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D6_PIN , OUTPUT_PIN);
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_DATA_PORT ,CLCD_D7_PIN , OUTPUT_PIN);
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	63 e0       	ldi	r22, 0x03	; 3
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_SetPinDirection>

	CLCD_voidSendCommand(0x33);
    192c:	83 e3       	ldi	r24, 0x33	; 51
    192e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x32);
    1932:	82 e3       	ldi	r24, 0x32	; 50
    1934:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x28);
    1938:	88 e2       	ldi	r24, 0x28	; 40
    193a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e8       	ldi	r26, 0x80	; 128
    1944:	bf e3       	ldi	r27, 0x3F	; 63
    1946:	8f a3       	std	Y+39, r24	; 0x27
    1948:	98 a7       	std	Y+40, r25	; 0x28
    194a:	a9 a7       	std	Y+41, r26	; 0x29
    194c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	6f a1       	ldd	r22, Y+39	; 0x27
    1950:	78 a5       	ldd	r23, Y+40	; 0x28
    1952:	89 a5       	ldd	r24, Y+41	; 0x29
    1954:	9a a5       	ldd	r25, Y+42	; 0x2a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a e7       	ldi	r20, 0x7A	; 122
    195c:	53 e4       	ldi	r21, 0x43	; 67
    195e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8b a3       	std	Y+35, r24	; 0x23
    1968:	9c a3       	std	Y+36, r25	; 0x24
    196a:	ad a3       	std	Y+37, r26	; 0x25
    196c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    196e:	6b a1       	ldd	r22, Y+35	; 0x23
    1970:	7c a1       	ldd	r23, Y+36	; 0x24
    1972:	8d a1       	ldd	r24, Y+37	; 0x25
    1974:	9e a1       	ldd	r25, Y+38	; 0x26
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <CLCD_voidInit+0x1a2>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9a a3       	std	Y+34, r25	; 0x22
    198c:	89 a3       	std	Y+33, r24	; 0x21
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	6f a1       	ldd	r22, Y+39	; 0x27
    19aa:	78 a5       	ldd	r23, Y+40	; 0x28
    19ac:	89 a5       	ldd	r24, Y+41	; 0x29
    19ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a a3       	std	Y+34, r25	; 0x22
    19ce:	89 a3       	std	Y+33, r24	; 0x21
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <CLCD_voidInit+0x202>
    19d2:	89 e1       	ldi	r24, 0x19	; 25
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
    19da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19dc:	98 a1       	ldd	r25, Y+32	; 0x20
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <CLCD_voidInit+0x1f0>
    19e2:	98 a3       	std	Y+32, r25	; 0x20
    19e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	89 a1       	ldd	r24, Y+33	; 0x21
    19e8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9a a3       	std	Y+34, r25	; 0x22
    19ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	89 a1       	ldd	r24, Y+33	; 0x21
    19f2:	9a a1       	ldd	r25, Y+34	; 0x22
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <CLCD_voidInit+0x1e4>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6b a1       	ldd	r22, Y+35	; 0x23
    19fc:	7c a1       	ldd	r23, Y+36	; 0x24
    19fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1a00:	9e a1       	ldd	r25, Y+38	; 0x26
    1a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a10:	9a a1       	ldd	r25, Y+34	; 0x22
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
    1a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <CLCD_voidInit+0x22c>
    1a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0x0c);  //LCD display on
    1a22:	8c e0       	ldi	r24, 0x0C	; 12
    1a24:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a0 e8       	ldi	r26, 0x80	; 128
    1a2e:	bf e3       	ldi	r27, 0x3F	; 63
    1a30:	89 8f       	std	Y+25, r24	; 0x19
    1a32:	9a 8f       	std	Y+26, r25	; 0x1a
    1a34:	ab 8f       	std	Y+27, r26	; 0x1b
    1a36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a e7       	ldi	r20, 0x7A	; 122
    1a46:	53 e4       	ldi	r21, 0x43	; 67
    1a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8d 8b       	std	Y+21, r24	; 0x15
    1a52:	9e 8b       	std	Y+22, r25	; 0x16
    1a54:	af 8b       	std	Y+23, r26	; 0x17
    1a56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a58:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <CLCD_voidInit+0x28c>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9c 8b       	std	Y+20, r25	; 0x14
    1a76:	8b 8b       	std	Y+19, r24	; 0x13
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    1a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	69 8d       	ldd	r22, Y+25	; 0x19
    1a94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9c 8b       	std	Y+20, r25	; 0x14
    1ab8:	8b 8b       	std	Y+19, r24	; 0x13
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <CLCD_voidInit+0x2ec>
    1abc:	89 e1       	ldi	r24, 0x19	; 25
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9a 8b       	std	Y+18, r25	; 0x12
    1ac2:	89 8b       	std	Y+17, r24	; 0x11
    1ac4:	89 89       	ldd	r24, Y+17	; 0x11
    1ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <CLCD_voidInit+0x2da>
    1acc:	9a 8b       	std	Y+18, r25	; 0x12
    1ace:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8b 89       	ldd	r24, Y+19	; 0x13
    1adc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <CLCD_voidInit+0x2ce>
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 8d       	ldd	r25, Y+24	; 0x18
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9c 8b       	std	Y+20, r25	; 0x14
    1af6:	8b 8b       	std	Y+19, r24	; 0x13
    1af8:	8b 89       	ldd	r24, Y+19	; 0x13
    1afa:	9c 89       	ldd	r25, Y+20	; 0x14
    1afc:	98 8b       	std	Y+16, r25	; 0x10
    1afe:	8f 87       	std	Y+15, r24	; 0x0f
    1b00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b02:	98 89       	ldd	r25, Y+16	; 0x10
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <CLCD_voidInit+0x316>
    1b08:	98 8b       	std	Y+16, r25	; 0x10
    1b0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0x02);  //LCD return home
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e8       	ldi	r26, 0x80	; 128
    1b18:	bf e3       	ldi	r27, 0x3F	; 63
    1b1a:	8b 87       	std	Y+11, r24	; 0x0b
    1b1c:	9c 87       	std	Y+12, r25	; 0x0c
    1b1e:	ad 87       	std	Y+13, r26	; 0x0d
    1b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4a e7       	ldi	r20, 0x7A	; 122
    1b30:	53 e4       	ldi	r21, 0x43	; 67
    1b32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8f 83       	std	Y+7, r24	; 0x07
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	a9 87       	std	Y+9, r26	; 0x09
    1b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <CLCD_voidInit+0x376>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	57 e4       	ldi	r21, 0x47	; 71
    1b74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	4c f5       	brge	.+82     	; 0x1bce <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <CLCD_voidInit+0x3d6>
    1ba6:	89 e1       	ldi	r24, 0x19	; 25
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <CLCD_voidInit+0x3c4>
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <CLCD_voidInit+0x3b8>
    1bcc:	14 c0       	rjmp	.+40     	; 0x1bf6 <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <CLCD_voidInit+0x400>
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_voidSendCommand(0x01);  //LCD clear
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
}
    1bfc:	e8 96       	adiw	r28, 0x38	; 56
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <CLCD_voidWrite_String>:

/***************************************************************************/

void CLCD_voidWrite_String(uint8 *String)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <CLCD_voidWrite_String+0x6>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9b 83       	std	Y+3, r25	; 0x03
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <CLCD_voidWrite_String+0x30>
	while(String[counter] != '\0')
	{
		CLCD_voidSendData(String[counter]);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e2 0f       	add	r30, r18
    1c30:	f3 1f       	adc	r31, r19
    1c32:	80 81       	ld	r24, Z
    1c34:	0e 94 83 09 	call	0x1306	; 0x1306 <CLCD_voidSendData>
		counter++;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	89 83       	std	Y+1, r24	; 0x01
/***************************************************************************/

void CLCD_voidWrite_String(uint8 *String)
{
	uint8 counter = 0;
	while(String[counter] != '\0')
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e2 0f       	add	r30, r18
    1c4c:	f3 1f       	adc	r31, r19
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 23       	and	r24, r24
    1c52:	39 f7       	brne	.-50     	; 0x1c22 <CLCD_voidWrite_String+0x14>
	{
		CLCD_voidSendData(String[counter]);
		counter++;
	}
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <CLCD_voidWrite_Number>:

/***************************************************************************/

void CLCD_voidWrite_Number(sint32 Number)
{
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	6a 97       	sbiw	r28, 0x1a	; 26
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	6f 8b       	std	Y+23, r22	; 0x17
    1c7a:	78 8f       	std	Y+24, r23	; 0x18
    1c7c:	89 8f       	std	Y+25, r24	; 0x19
    1c7e:	9a 8f       	std	Y+26, r25	; 0x1a
	sint16 counter = 0;
    1c80:	1a 82       	std	Y+2, r1	; 0x02
    1c82:	19 82       	std	Y+1, r1	; 0x01
	uint16 arr[10] = {0};
    1c84:	84 e1       	ldi	r24, 0x14	; 20
    1c86:	fe 01       	movw	r30, r28
    1c88:	33 96       	adiw	r30, 0x03	; 3
    1c8a:	df 01       	movw	r26, r30
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	1d 92       	st	X+, r1
    1c90:	9a 95       	dec	r25
    1c92:	e9 f7       	brne	.-6      	; 0x1c8e <CLCD_voidWrite_Number+0x2e>
	if(Number < 0)
    1c94:	8f 89       	ldd	r24, Y+23	; 0x17
    1c96:	98 8d       	ldd	r25, Y+24	; 0x18
    1c98:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c9a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c9c:	bb 23       	and	r27, r27
    1c9e:	94 f4       	brge	.+36     	; 0x1cc4 <CLCD_voidWrite_Number+0x64>
	{
		Number = Number * -1;
    1ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca4:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ca6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ca8:	b0 95       	com	r27
    1caa:	a0 95       	com	r26
    1cac:	90 95       	com	r25
    1cae:	81 95       	neg	r24
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	af 4f       	sbci	r26, 0xFF	; 255
    1cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb6:	8f 8b       	std	Y+23, r24	; 0x17
    1cb8:	98 8f       	std	Y+24, r25	; 0x18
    1cba:	a9 8f       	std	Y+25, r26	; 0x19
    1cbc:	ba 8f       	std	Y+26, r27	; 0x1a
		CLCD_voidSendData('-');
    1cbe:	8d e2       	ldi	r24, 0x2D	; 45
    1cc0:	0e 94 83 09 	call	0x1306	; 0x1306 <CLCD_voidSendData>
	}

	do
	{
		arr[counter] = Number % 10;
    1cc4:	09 81       	ldd	r16, Y+1	; 0x01
    1cc6:	1a 81       	ldd	r17, Y+2	; 0x02
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	a9 8d       	ldd	r26, Y+25	; 0x19
    1cce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1cd0:	2a e0       	ldi	r18, 0x0A	; 10
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divmodsi4>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	ac 01       	movw	r20, r24
    1ce6:	98 01       	movw	r18, r16
    1ce8:	22 0f       	add	r18, r18
    1cea:	33 1f       	adc	r19, r19
    1cec:	ce 01       	movw	r24, r28
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	32 96       	adiw	r30, 0x02	; 2
    1cf8:	51 83       	std	Z+1, r21	; 0x01
    1cfa:	40 83       	st	Z, r20
		Number = Number / 10;
    1cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1d00:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d02:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d04:	2a e0       	ldi	r18, 0x0A	; 10
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divmodsi4>
    1d14:	da 01       	movw	r26, r20
    1d16:	c9 01       	movw	r24, r18
    1d18:	8f 8b       	std	Y+23, r24	; 0x17
    1d1a:	98 8f       	std	Y+24, r25	; 0x18
    1d1c:	a9 8f       	std	Y+25, r26	; 0x19
    1d1e:	ba 8f       	std	Y+26, r27	; 0x1a
		counter++;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
	}while(Number != 0);
    1d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d30:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	a1 05       	cpc	r26, r1
    1d36:	b1 05       	cpc	r27, r1
    1d38:	29 f6       	brne	.-118    	; 0x1cc4 <CLCD_voidWrite_Number+0x64>
    1d3a:	15 c0       	rjmp	.+42     	; 0x1d66 <CLCD_voidWrite_Number+0x106>

	while(counter > 0)
	{
		CLCD_voidSendData(arr[--counter] + '0');
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	9c 01       	movw	r18, r24
    1d4c:	22 0f       	add	r18, r18
    1d4e:	33 1f       	adc	r19, r19
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	82 0f       	add	r24, r18
    1d56:	93 1f       	adc	r25, r19
    1d58:	fc 01       	movw	r30, r24
    1d5a:	32 96       	adiw	r30, 0x02	; 2
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	80 5d       	subi	r24, 0xD0	; 208
    1d62:	0e 94 83 09 	call	0x1306	; 0x1306 <CLCD_voidSendData>
		arr[counter] = Number % 10;
		Number = Number / 10;
		counter++;
	}while(Number != 0);

	while(counter > 0)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	18 16       	cp	r1, r24
    1d6c:	19 06       	cpc	r1, r25
    1d6e:	34 f3       	brlt	.-52     	; 0x1d3c <CLCD_voidWrite_Number+0xdc>
	{
		CLCD_voidSendData(arr[--counter] + '0');
	}
}
    1d70:	6a 96       	adiw	r28, 0x1a	; 26
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <CLCD_voidClear>:

/***************************************************************************/

void CLCD_voidClear()
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0x01); //lcd clear command
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <CLCD_voidReturn_Home>:

/***************************************************************************/

void CLCD_voidReturn_Home()
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0x02); //lcd set cursor to zero
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_voidSendCommand>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <DIO_SetPinDirection>:
#include "../LIB/Bit_Math.h"
#include "DIO_register.h"
#include "DIO_interface.h"


uint8 DIO_SetPinDirection(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Direction){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	2a 97       	sbiw	r28, 0x0a	; 10
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	6b 83       	std	Y+3, r22	; 0x03
    1dc6:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_ErrorState = 0;
    1dc8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	88 30       	cpi	r24, 0x08	; 8
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <DIO_SetPinDirection+0x24>
    1dd0:	b9 c1       	rjmp	.+882    	; 0x2144 <DIO_SetPinDirection+0x396>

		if(Copy_Direction == INPUT_PIN)
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <DIO_SetPinDirection+0x2c>
    1dd8:	77 c0       	rjmp	.+238    	; 0x1ec8 <DIO_SetPinDirection+0x11a>
		{
			switch(Copy_Port)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	3a 87       	std	Y+10, r19	; 0x0a
    1de2:	29 87       	std	Y+9, r18	; 0x09
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	91 05       	cpc	r25, r1
    1dec:	59 f1       	breq	.+86     	; 0x1e44 <DIO_SetPinDirection+0x96>
    1dee:	29 85       	ldd	r18, Y+9	; 0x09
    1df0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <DIO_SetPinDirection+0x54>
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f0       	breq	.+26     	; 0x1e1a <DIO_SetPinDirection+0x6c>
    1e00:	60 c0       	rjmp	.+192    	; 0x1ec2 <DIO_SetPinDirection+0x114>
    1e02:	29 85       	ldd	r18, Y+9	; 0x09
    1e04:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e06:	22 30       	cpi	r18, 0x02	; 2
    1e08:	31 05       	cpc	r19, r1
    1e0a:	89 f1       	breq	.+98     	; 0x1e6e <DIO_SetPinDirection+0xc0>
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	83 30       	cpi	r24, 0x03	; 3
    1e12:	91 05       	cpc	r25, r1
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <DIO_SetPinDirection+0x6a>
    1e16:	40 c0       	rjmp	.+128    	; 0x1e98 <DIO_SetPinDirection+0xea>
    1e18:	54 c0       	rjmp	.+168    	; 0x1ec2 <DIO_SetPinDirection+0x114>
			{
			case PORT_A:   CLR_BIT(DDRA,Copy_Pin);  break;
    1e1a:	aa e3       	ldi	r26, 0x3A	; 58
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ea e3       	ldi	r30, 0x3A	; 58
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_SetPinDirection+0x8a>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_SetPinDirection+0x86>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	82 c1       	rjmp	.+772    	; 0x2148 <DIO_SetPinDirection+0x39a>
			case PORT_B:   CLR_BIT(DDRB,Copy_Pin);  break;
    1e44:	a7 e3       	ldi	r26, 0x37	; 55
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e7 e3       	ldi	r30, 0x37	; 55
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_SetPinDirection+0xb4>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_SetPinDirection+0xb0>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	6d c1       	rjmp	.+730    	; 0x2148 <DIO_SetPinDirection+0x39a>
			case PORT_C:   CLR_BIT(DDRC,Copy_Pin);  break;
    1e6e:	a4 e3       	ldi	r26, 0x34	; 52
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e4 e3       	ldi	r30, 0x34	; 52
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <DIO_SetPinDirection+0xde>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <DIO_SetPinDirection+0xda>
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	58 c1       	rjmp	.+688    	; 0x2148 <DIO_SetPinDirection+0x39a>
			case PORT_D:   CLR_BIT(DDRD,Copy_Pin);  break;
    1e98:	a1 e3       	ldi	r26, 0x31	; 49
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e1 e3       	ldi	r30, 0x31	; 49
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_SetPinDirection+0x108>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_SetPinDirection+0x104>
    1eba:	80 95       	com	r24
    1ebc:	84 23       	and	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	43 c1       	rjmp	.+646    	; 0x2148 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	40 c1       	rjmp	.+640    	; 0x2148 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == OUTPUT_PIN)
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <DIO_SetPinDirection+0x122>
    1ece:	72 c0       	rjmp	.+228    	; 0x1fb4 <DIO_SetPinDirection+0x206>
		{
			switch(Copy_Port)
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	38 87       	std	Y+8, r19	; 0x08
    1ed8:	2f 83       	std	Y+7, r18	; 0x07
    1eda:	8f 81       	ldd	r24, Y+7	; 0x07
    1edc:	98 85       	ldd	r25, Y+8	; 0x08
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	49 f1       	breq	.+82     	; 0x1f36 <DIO_SetPinDirection+0x188>
    1ee4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee6:	38 85       	ldd	r19, Y+8	; 0x08
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <DIO_SetPinDirection+0x14a>
    1eee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef0:	98 85       	ldd	r25, Y+8	; 0x08
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <DIO_SetPinDirection+0x160>
    1ef6:	5b c0       	rjmp	.+182    	; 0x1fae <DIO_SetPinDirection+0x200>
    1ef8:	2f 81       	ldd	r18, Y+7	; 0x07
    1efa:	38 85       	ldd	r19, Y+8	; 0x08
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	71 f1       	breq	.+92     	; 0x1f5e <DIO_SetPinDirection+0x1b0>
    1f02:	8f 81       	ldd	r24, Y+7	; 0x07
    1f04:	98 85       	ldd	r25, Y+8	; 0x08
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	91 05       	cpc	r25, r1
    1f0a:	e9 f1       	breq	.+122    	; 0x1f86 <DIO_SetPinDirection+0x1d8>
    1f0c:	50 c0       	rjmp	.+160    	; 0x1fae <DIO_SetPinDirection+0x200>
			{
			case PORT_A:    SET_BIT(DDRA,Copy_Pin); break;
    1f0e:	aa e3       	ldi	r26, 0x3A	; 58
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ea e3       	ldi	r30, 0x3A	; 58
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_SetPinDirection+0x17e>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_SetPinDirection+0x17a>
    1f30:	84 2b       	or	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	09 c1       	rjmp	.+530    	; 0x2148 <DIO_SetPinDirection+0x39a>
			case PORT_B:    SET_BIT(DDRB,Copy_Pin); break;
    1f36:	a7 e3       	ldi	r26, 0x37	; 55
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e7 e3       	ldi	r30, 0x37	; 55
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_SetPinDirection+0x1a6>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_SetPinDirection+0x1a2>
    1f58:	84 2b       	or	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	f5 c0       	rjmp	.+490    	; 0x2148 <DIO_SetPinDirection+0x39a>
			case PORT_C:    SET_BIT(DDRC,Copy_Pin); break;
    1f5e:	a4 e3       	ldi	r26, 0x34	; 52
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e4 e3       	ldi	r30, 0x34	; 52
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_SetPinDirection+0x1ce>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_SetPinDirection+0x1ca>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	e1 c0       	rjmp	.+450    	; 0x2148 <DIO_SetPinDirection+0x39a>
			case PORT_D:    SET_BIT(DDRD,Copy_Pin); break;
    1f86:	a1 e3       	ldi	r26, 0x31	; 49
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e1 e3       	ldi	r30, 0x31	; 49
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_SetPinDirection+0x1f6>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_SetPinDirection+0x1f2>
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	cd c0       	rjmp	.+410    	; 0x2148 <DIO_SetPinDirection+0x39a>
			default:	   Local_ErrorState = 1;    break;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	ca c0       	rjmp	.+404    	; 0x2148 <DIO_SetPinDirection+0x39a>
			}
		}

		else if(Copy_Direction == INPUT_PULLUP_PIN)
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <DIO_SetPinDirection+0x20e>
    1fba:	c1 c0       	rjmp	.+386    	; 0x213e <DIO_SetPinDirection+0x390>
		{
			switch(Copy_Port)
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3e 83       	std	Y+6, r19	; 0x06
    1fc4:	2d 83       	std	Y+5, r18	; 0x05
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <DIO_SetPinDirection+0x224>
    1fd0:	3e c0       	rjmp	.+124    	; 0x204e <DIO_SetPinDirection+0x2a0>
    1fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <DIO_SetPinDirection+0x238>
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <DIO_SetPinDirection+0x252>
    1fe4:	a9 c0       	rjmp	.+338    	; 0x2138 <DIO_SetPinDirection+0x38a>
    1fe6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fe8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <DIO_SetPinDirection+0x244>
    1ff0:	55 c0       	rjmp	.+170    	; 0x209c <DIO_SetPinDirection+0x2ee>
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <DIO_SetPinDirection+0x250>
    1ffc:	76 c0       	rjmp	.+236    	; 0x20ea <DIO_SetPinDirection+0x33c>
    1ffe:	9c c0       	rjmp	.+312    	; 0x2138 <DIO_SetPinDirection+0x38a>
			{
			case PORT_A:
				CLR_BIT(DDRA,Copy_Pin);
    2000:	aa e3       	ldi	r26, 0x3A	; 58
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ea e3       	ldi	r30, 0x3A	; 58
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 c0       	rjmp	.+4      	; 0x201c <DIO_SetPinDirection+0x26e>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	2a 95       	dec	r18
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <DIO_SetPinDirection+0x26a>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_Pin);
    2026:	ab e3       	ldi	r26, 0x3B	; 59
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_SetPinDirection+0x296>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_SetPinDirection+0x292>
    2048:	84 2b       	or	r24, r20
    204a:	8c 93       	st	X, r24
    204c:	7d c0       	rjmp	.+250    	; 0x2148 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_B:
				CLR_BIT(DDRB,Copy_Pin);
    204e:	a7 e3       	ldi	r26, 0x37	; 55
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e7 e3       	ldi	r30, 0x37	; 55
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	48 2f       	mov	r20, r24
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_SetPinDirection+0x2bc>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	2a 95       	dec	r18
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_SetPinDirection+0x2b8>
    206e:	80 95       	com	r24
    2070:	84 23       	and	r24, r20
    2072:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_Pin);
    2074:	a8 e3       	ldi	r26, 0x38	; 56
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e8 e3       	ldi	r30, 0x38	; 56
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_SetPinDirection+0x2e4>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_SetPinDirection+0x2e0>
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	56 c0       	rjmp	.+172    	; 0x2148 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_C:
				CLR_BIT(DDRC,Copy_Pin);
    209c:	a4 e3       	ldi	r26, 0x34	; 52
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e4 e3       	ldi	r30, 0x34	; 52
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_SetPinDirection+0x30a>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	2a 95       	dec	r18
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_SetPinDirection+0x306>
    20bc:	80 95       	com	r24
    20be:	84 23       	and	r24, r20
    20c0:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_Pin);
    20c2:	a5 e3       	ldi	r26, 0x35	; 53
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e5 e3       	ldi	r30, 0x35	; 53
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_SetPinDirection+0x332>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_SetPinDirection+0x32e>
    20e4:	84 2b       	or	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	2f c0       	rjmp	.+94     	; 0x2148 <DIO_SetPinDirection+0x39a>
				break;
			case PORT_D:
				CLR_BIT(DDRD,Copy_Pin);
    20ea:	a1 e3       	ldi	r26, 0x31	; 49
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e1 e3       	ldi	r30, 0x31	; 49
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	48 2f       	mov	r20, r24
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <DIO_SetPinDirection+0x358>
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	2a 95       	dec	r18
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <DIO_SetPinDirection+0x354>
    210a:	80 95       	com	r24
    210c:	84 23       	and	r24, r20
    210e:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_Pin);
    2110:	a2 e3       	ldi	r26, 0x32	; 50
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e2 e3       	ldi	r30, 0x32	; 50
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_SetPinDirection+0x380>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_SetPinDirection+0x37c>
    2132:	84 2b       	or	r24, r20
    2134:	8c 93       	st	X, r24
    2136:	08 c0       	rjmp	.+16     	; 0x2148 <DIO_SetPinDirection+0x39a>
				break;
			default:	   Local_ErrorState = 1;    break;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <DIO_SetPinDirection+0x39a>
			}
		}
		else {
			Local_ErrorState = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <DIO_SetPinDirection+0x39a>
		}
	}

	else {
		Local_ErrorState = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
}
    214a:	2a 96       	adiw	r28, 0x0a	; 10
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <DIO_SetPortDirection>:

/***************************************************************************/

uint8 DIO_SetPortDirection(uint8 Copy_Port, uint8 Copy_Direction){
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <DIO_SetPortDirection+0x6>
    2162:	00 d0       	rcall	.+0      	; 0x2164 <DIO_SetPortDirection+0x8>
    2164:	0f 92       	push	r0
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	8a 83       	std	Y+2, r24	; 0x02
    216c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
    216e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3d 83       	std	Y+5, r19	; 0x05
    2178:	2c 83       	std	Y+4, r18	; 0x04
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	91 05       	cpc	r25, r1
    2182:	d1 f0       	breq	.+52     	; 0x21b8 <DIO_SetPortDirection+0x5c>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	2c f4       	brge	.+10     	; 0x2198 <DIO_SetPortDirection+0x3c>
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	61 f0       	breq	.+24     	; 0x21ae <DIO_SetPortDirection+0x52>
    2196:	1f c0       	rjmp	.+62     	; 0x21d6 <DIO_SetPortDirection+0x7a>
    2198:	2c 81       	ldd	r18, Y+4	; 0x04
    219a:	3d 81       	ldd	r19, Y+5	; 0x05
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	81 f0       	breq	.+32     	; 0x21c2 <DIO_SetPortDirection+0x66>
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	81 f0       	breq	.+32     	; 0x21cc <DIO_SetPortDirection+0x70>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <DIO_SetPortDirection+0x7a>
	case PORT_A:    DDRA = Copy_Direction; break;
    21ae:	ea e3       	ldi	r30, 0x3A	; 58
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	80 83       	st	Z, r24
    21b6:	11 c0       	rjmp	.+34     	; 0x21da <DIO_SetPortDirection+0x7e>
	case PORT_B:    DDRB = Copy_Direction; break;
    21b8:	e7 e3       	ldi	r30, 0x37	; 55
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	80 83       	st	Z, r24
    21c0:	0c c0       	rjmp	.+24     	; 0x21da <DIO_SetPortDirection+0x7e>
	case PORT_C:    DDRC = Copy_Direction; break;
    21c2:	e4 e3       	ldi	r30, 0x34	; 52
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	80 83       	st	Z, r24
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <DIO_SetPortDirection+0x7e>
	case PORT_D:    DDRD = Copy_Direction; break;
    21cc:	e1 e3       	ldi	r30, 0x31	; 49
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	80 83       	st	Z, r24
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <DIO_SetPortDirection+0x7e>
	default:	   Local_ErrorState = 1;   break;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_ErrorState;
    21da:	89 81       	ldd	r24, Y+1	; 0x01
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <DIO_SetPinValue>:


/***************************************************************************/

uint8 DIO_SetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8 Copy_Value){
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	28 97       	sbiw	r28, 0x08	; 8
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	8a 83       	std	Y+2, r24	; 0x02
    2202:	6b 83       	std	Y+3, r22	; 0x03
    2204:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
    2206:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pin <= 7 && Copy_Pin >= 0){
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	88 30       	cpi	r24, 0x08	; 8
    220c:	08 f0       	brcs	.+2      	; 0x2210 <DIO_SetPinValue+0x24>
    220e:	f1 c0       	rjmp	.+482    	; 0x23f2 <DIO_SetPinValue+0x206>

		if(Copy_Value == PIN_LOW)
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	88 23       	and	r24, r24
    2214:	09 f0       	breq	.+2      	; 0x2218 <DIO_SetPinValue+0x2c>
    2216:	77 c0       	rjmp	.+238    	; 0x2306 <DIO_SetPinValue+0x11a>
		{
			switch(Copy_Port)
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	38 87       	std	Y+8, r19	; 0x08
    2220:	2f 83       	std	Y+7, r18	; 0x07
    2222:	8f 81       	ldd	r24, Y+7	; 0x07
    2224:	98 85       	ldd	r25, Y+8	; 0x08
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	91 05       	cpc	r25, r1
    222a:	59 f1       	breq	.+86     	; 0x2282 <DIO_SetPinValue+0x96>
    222c:	2f 81       	ldd	r18, Y+7	; 0x07
    222e:	38 85       	ldd	r19, Y+8	; 0x08
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	31 05       	cpc	r19, r1
    2234:	2c f4       	brge	.+10     	; 0x2240 <DIO_SetPinValue+0x54>
    2236:	8f 81       	ldd	r24, Y+7	; 0x07
    2238:	98 85       	ldd	r25, Y+8	; 0x08
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f0       	breq	.+26     	; 0x2258 <DIO_SetPinValue+0x6c>
    223e:	60 c0       	rjmp	.+192    	; 0x2300 <DIO_SetPinValue+0x114>
    2240:	2f 81       	ldd	r18, Y+7	; 0x07
    2242:	38 85       	ldd	r19, Y+8	; 0x08
    2244:	22 30       	cpi	r18, 0x02	; 2
    2246:	31 05       	cpc	r19, r1
    2248:	89 f1       	breq	.+98     	; 0x22ac <DIO_SetPinValue+0xc0>
    224a:	8f 81       	ldd	r24, Y+7	; 0x07
    224c:	98 85       	ldd	r25, Y+8	; 0x08
    224e:	83 30       	cpi	r24, 0x03	; 3
    2250:	91 05       	cpc	r25, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <DIO_SetPinValue+0x6a>
    2254:	40 c0       	rjmp	.+128    	; 0x22d6 <DIO_SetPinValue+0xea>
    2256:	54 c0       	rjmp	.+168    	; 0x2300 <DIO_SetPinValue+0x114>
			{
			case PORT_A:   CLR_BIT(PORTA,Copy_Pin);  break;
    2258:	ab e3       	ldi	r26, 0x3B	; 59
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	eb e3       	ldi	r30, 0x3B	; 59
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	48 2f       	mov	r20, r24
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	02 2e       	mov	r0, r18
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <DIO_SetPinValue+0x8a>
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	0a 94       	dec	r0
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <DIO_SetPinValue+0x86>
    227a:	80 95       	com	r24
    227c:	84 23       	and	r24, r20
    227e:	8c 93       	st	X, r24
    2280:	ba c0       	rjmp	.+372    	; 0x23f6 <DIO_SetPinValue+0x20a>
			case PORT_B:   CLR_BIT(PORTB,Copy_Pin);  break;
    2282:	a8 e3       	ldi	r26, 0x38	; 56
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e8 e3       	ldi	r30, 0x38	; 56
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	48 2f       	mov	r20, r24
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 2e       	mov	r0, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <DIO_SetPinValue+0xb4>
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	0a 94       	dec	r0
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <DIO_SetPinValue+0xb0>
    22a4:	80 95       	com	r24
    22a6:	84 23       	and	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	a5 c0       	rjmp	.+330    	; 0x23f6 <DIO_SetPinValue+0x20a>
			case PORT_C:   CLR_BIT(PORTC,Copy_Pin);  break;
    22ac:	a5 e3       	ldi	r26, 0x35	; 53
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e5 e3       	ldi	r30, 0x35	; 53
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_SetPinValue+0xde>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <DIO_SetPinValue+0xda>
    22ce:	80 95       	com	r24
    22d0:	84 23       	and	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	90 c0       	rjmp	.+288    	; 0x23f6 <DIO_SetPinValue+0x20a>
			case PORT_D:   CLR_BIT(PORTD,Copy_Pin);  break;
    22d6:	a2 e3       	ldi	r26, 0x32	; 50
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e2 e3       	ldi	r30, 0x32	; 50
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	48 2f       	mov	r20, r24
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	02 2e       	mov	r0, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DIO_SetPinValue+0x108>
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	0a 94       	dec	r0
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DIO_SetPinValue+0x104>
    22f8:	80 95       	com	r24
    22fa:	84 23       	and	r24, r20
    22fc:	8c 93       	st	X, r24
    22fe:	7b c0       	rjmp	.+246    	; 0x23f6 <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	78 c0       	rjmp	.+240    	; 0x23f6 <DIO_SetPinValue+0x20a>
			}
		}

		else if(Copy_Value == PIN_HIGH)
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	09 f0       	breq	.+2      	; 0x230e <DIO_SetPinValue+0x122>
    230c:	74 c0       	rjmp	.+232    	; 0x23f6 <DIO_SetPinValue+0x20a>
		{
			switch(Copy_Port)
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	3e 83       	std	Y+6, r19	; 0x06
    2316:	2d 83       	std	Y+5, r18	; 0x05
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	91 05       	cpc	r25, r1
    2320:	49 f1       	breq	.+82     	; 0x2374 <DIO_SetPinValue+0x188>
    2322:	2d 81       	ldd	r18, Y+5	; 0x05
    2324:	3e 81       	ldd	r19, Y+6	; 0x06
    2326:	22 30       	cpi	r18, 0x02	; 2
    2328:	31 05       	cpc	r19, r1
    232a:	2c f4       	brge	.+10     	; 0x2336 <DIO_SetPinValue+0x14a>
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	61 f0       	breq	.+24     	; 0x234c <DIO_SetPinValue+0x160>
    2334:	5b c0       	rjmp	.+182    	; 0x23ec <DIO_SetPinValue+0x200>
    2336:	2d 81       	ldd	r18, Y+5	; 0x05
    2338:	3e 81       	ldd	r19, Y+6	; 0x06
    233a:	22 30       	cpi	r18, 0x02	; 2
    233c:	31 05       	cpc	r19, r1
    233e:	71 f1       	breq	.+92     	; 0x239c <DIO_SetPinValue+0x1b0>
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	83 30       	cpi	r24, 0x03	; 3
    2346:	91 05       	cpc	r25, r1
    2348:	e9 f1       	breq	.+122    	; 0x23c4 <DIO_SetPinValue+0x1d8>
    234a:	50 c0       	rjmp	.+160    	; 0x23ec <DIO_SetPinValue+0x200>
			{
			case PORT_A:    SET_BIT(PORTA,Copy_Pin); break;
    234c:	ab e3       	ldi	r26, 0x3B	; 59
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	eb e3       	ldi	r30, 0x3B	; 59
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <DIO_SetPinValue+0x17e>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <DIO_SetPinValue+0x17a>
    236e:	84 2b       	or	r24, r20
    2370:	8c 93       	st	X, r24
    2372:	41 c0       	rjmp	.+130    	; 0x23f6 <DIO_SetPinValue+0x20a>
			case PORT_B:    SET_BIT(PORTB,Copy_Pin); break;
    2374:	a8 e3       	ldi	r26, 0x38	; 56
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e8 e3       	ldi	r30, 0x38	; 56
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <DIO_SetPinValue+0x1a6>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <DIO_SetPinValue+0x1a2>
    2396:	84 2b       	or	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	2d c0       	rjmp	.+90     	; 0x23f6 <DIO_SetPinValue+0x20a>
			case PORT_C:    SET_BIT(PORTC,Copy_Pin); break;
    239c:	a5 e3       	ldi	r26, 0x35	; 53
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e5 e3       	ldi	r30, 0x35	; 53
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_SetPinValue+0x1ce>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_SetPinValue+0x1ca>
    23be:	84 2b       	or	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	19 c0       	rjmp	.+50     	; 0x23f6 <DIO_SetPinValue+0x20a>
			case PORT_D:    SET_BIT(PORTD,Copy_Pin); break;
    23c4:	a2 e3       	ldi	r26, 0x32	; 50
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e2 e3       	ldi	r30, 0x32	; 50
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <DIO_SetPinValue+0x1f6>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <DIO_SetPinValue+0x1f2>
    23e6:	84 2b       	or	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <DIO_SetPinValue+0x20a>
			default:	   Local_ErrorState = 1;    break;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <DIO_SetPinValue+0x20a>
			}
		}
	}
	else {
		Local_ErrorState = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f8:	28 96       	adiw	r28, 0x08	; 8
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <DIO_SetPortValue>:


/***************************************************************************/

uint8 DIO_SetPortValue(uint8 Copy_Port, uint8 Copy_Value){
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <DIO_SetPortValue+0x6>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <DIO_SetPortValue+0x8>
    2412:	0f 92       	push	r0
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	8a 83       	std	Y+2, r24	; 0x02
    241a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState = 0;
    241c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_Port){
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	3d 83       	std	Y+5, r19	; 0x05
    2426:	2c 83       	std	Y+4, r18	; 0x04
    2428:	8c 81       	ldd	r24, Y+4	; 0x04
    242a:	9d 81       	ldd	r25, Y+5	; 0x05
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	d1 f0       	breq	.+52     	; 0x2466 <DIO_SetPortValue+0x5c>
    2432:	2c 81       	ldd	r18, Y+4	; 0x04
    2434:	3d 81       	ldd	r19, Y+5	; 0x05
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	2c f4       	brge	.+10     	; 0x2446 <DIO_SetPortValue+0x3c>
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	9d 81       	ldd	r25, Y+5	; 0x05
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	61 f0       	breq	.+24     	; 0x245c <DIO_SetPortValue+0x52>
    2444:	1f c0       	rjmp	.+62     	; 0x2484 <DIO_SetPortValue+0x7a>
    2446:	2c 81       	ldd	r18, Y+4	; 0x04
    2448:	3d 81       	ldd	r19, Y+5	; 0x05
    244a:	22 30       	cpi	r18, 0x02	; 2
    244c:	31 05       	cpc	r19, r1
    244e:	81 f0       	breq	.+32     	; 0x2470 <DIO_SetPortValue+0x66>
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	91 05       	cpc	r25, r1
    2458:	81 f0       	breq	.+32     	; 0x247a <DIO_SetPortValue+0x70>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <DIO_SetPortValue+0x7a>
	case PORT_A:    PORTA = Copy_Value; break;
    245c:	eb e3       	ldi	r30, 0x3B	; 59
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	80 83       	st	Z, r24
    2464:	11 c0       	rjmp	.+34     	; 0x2488 <DIO_SetPortValue+0x7e>
	case PORT_B:    PORTB = Copy_Value; break;
    2466:	e8 e3       	ldi	r30, 0x38	; 56
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	80 83       	st	Z, r24
    246e:	0c c0       	rjmp	.+24     	; 0x2488 <DIO_SetPortValue+0x7e>
	case PORT_C:    PORTC = Copy_Value; break;
    2470:	e5 e3       	ldi	r30, 0x35	; 53
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	80 83       	st	Z, r24
    2478:	07 c0       	rjmp	.+14     	; 0x2488 <DIO_SetPortValue+0x7e>
	case PORT_D:    PORTD = Copy_Value; break;
    247a:	e2 e3       	ldi	r30, 0x32	; 50
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	80 83       	st	Z, r24
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <DIO_SetPortValue+0x7e>
	default:	    Local_ErrorState = 1;   break;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    2488:	89 81       	ldd	r24, Y+1	; 0x01
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <DIO_GetPinValue>:

/***************************************************************************/

uint8 DIO_GetPinValue(uint8 Copy_Port, uint8 Copy_Pin, uint8* Return_PValue){
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	27 97       	sbiw	r28, 0x07	; 7
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	8a 83       	std	Y+2, r24	; 0x02
    24b0:	6b 83       	std	Y+3, r22	; 0x03
    24b2:	5d 83       	std	Y+5, r21	; 0x05
    24b4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_ErrorState = 0;
    24b6:	19 82       	std	Y+1, r1	; 0x01
	if((Return_PValue != NULL) && (Copy_Pin <= 7 && Copy_Pin >= 0)){
    24b8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ba:	9d 81       	ldd	r25, Y+5	; 0x05
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	09 f4       	brne	.+2      	; 0x24c2 <DIO_GetPinValue+0x28>
    24c0:	a9 c0       	rjmp	.+338    	; 0x2614 <DIO_GetPinValue+0x17a>
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	88 30       	cpi	r24, 0x08	; 8
    24c6:	08 f0       	brcs	.+2      	; 0x24ca <DIO_GetPinValue+0x30>
    24c8:	a5 c0       	rjmp	.+330    	; 0x2614 <DIO_GetPinValue+0x17a>
		switch(Copy_Port){
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	3f 83       	std	Y+7, r19	; 0x07
    24d2:	2e 83       	std	Y+6, r18	; 0x06
    24d4:	4e 81       	ldd	r20, Y+6	; 0x06
    24d6:	5f 81       	ldd	r21, Y+7	; 0x07
    24d8:	41 30       	cpi	r20, 0x01	; 1
    24da:	51 05       	cpc	r21, r1
    24dc:	c1 f1       	breq	.+112    	; 0x254e <DIO_GetPinValue+0xb4>
    24de:	8e 81       	ldd	r24, Y+6	; 0x06
    24e0:	9f 81       	ldd	r25, Y+7	; 0x07
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	91 05       	cpc	r25, r1
    24e6:	34 f4       	brge	.+12     	; 0x24f4 <DIO_GetPinValue+0x5a>
    24e8:	2e 81       	ldd	r18, Y+6	; 0x06
    24ea:	3f 81       	ldd	r19, Y+7	; 0x07
    24ec:	21 15       	cp	r18, r1
    24ee:	31 05       	cpc	r19, r1
    24f0:	71 f0       	breq	.+28     	; 0x250e <DIO_GetPinValue+0x74>
    24f2:	8d c0       	rjmp	.+282    	; 0x260e <DIO_GetPinValue+0x174>
    24f4:	4e 81       	ldd	r20, Y+6	; 0x06
    24f6:	5f 81       	ldd	r21, Y+7	; 0x07
    24f8:	42 30       	cpi	r20, 0x02	; 2
    24fa:	51 05       	cpc	r21, r1
    24fc:	09 f4       	brne	.+2      	; 0x2500 <DIO_GetPinValue+0x66>
    24fe:	47 c0       	rjmp	.+142    	; 0x258e <DIO_GetPinValue+0xf4>
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	9f 81       	ldd	r25, Y+7	; 0x07
    2504:	83 30       	cpi	r24, 0x03	; 3
    2506:	91 05       	cpc	r25, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <DIO_GetPinValue+0x72>
    250a:	61 c0       	rjmp	.+194    	; 0x25ce <DIO_GetPinValue+0x134>
    250c:	80 c0       	rjmp	.+256    	; 0x260e <DIO_GetPinValue+0x174>
		case PORT_A:    *Return_PValue = GET_BIT(PINA,Copy_Pin); break;
    250e:	e9 e3       	ldi	r30, 0x39	; 57
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	48 2f       	mov	r20, r24
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <DIO_GetPinValue+0x8e>
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	2a 95       	dec	r18
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <DIO_GetPinValue+0x8a>
    252c:	9a 01       	movw	r18, r20
    252e:	28 23       	and	r18, r24
    2530:	39 23       	and	r19, r25
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a9 01       	movw	r20, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <DIO_GetPinValue+0xa6>
    253c:	55 95       	asr	r21
    253e:	47 95       	ror	r20
    2540:	8a 95       	dec	r24
    2542:	e2 f7       	brpl	.-8      	; 0x253c <DIO_GetPinValue+0xa2>
    2544:	ca 01       	movw	r24, r20
    2546:	ec 81       	ldd	r30, Y+4	; 0x04
    2548:	fd 81       	ldd	r31, Y+5	; 0x05
    254a:	80 83       	st	Z, r24
    254c:	65 c0       	rjmp	.+202    	; 0x2618 <DIO_GetPinValue+0x17e>
		case PORT_B:    *Return_PValue = GET_BIT(PINB,Copy_Pin); break;
    254e:	e6 e3       	ldi	r30, 0x36	; 54
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <DIO_GetPinValue+0xce>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	2a 95       	dec	r18
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <DIO_GetPinValue+0xca>
    256c:	9a 01       	movw	r18, r20
    256e:	28 23       	and	r18, r24
    2570:	39 23       	and	r19, r25
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	88 2f       	mov	r24, r24
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a9 01       	movw	r20, r18
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <DIO_GetPinValue+0xe6>
    257c:	55 95       	asr	r21
    257e:	47 95       	ror	r20
    2580:	8a 95       	dec	r24
    2582:	e2 f7       	brpl	.-8      	; 0x257c <DIO_GetPinValue+0xe2>
    2584:	ca 01       	movw	r24, r20
    2586:	ec 81       	ldd	r30, Y+4	; 0x04
    2588:	fd 81       	ldd	r31, Y+5	; 0x05
    258a:	80 83       	st	Z, r24
    258c:	45 c0       	rjmp	.+138    	; 0x2618 <DIO_GetPinValue+0x17e>
		case PORT_C:    *Return_PValue = GET_BIT(PINC,Copy_Pin); break;
    258e:	e3 e3       	ldi	r30, 0x33	; 51
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	48 2f       	mov	r20, r24
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <DIO_GetPinValue+0x10e>
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	2a 95       	dec	r18
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <DIO_GetPinValue+0x10a>
    25ac:	9a 01       	movw	r18, r20
    25ae:	28 23       	and	r18, r24
    25b0:	39 23       	and	r19, r25
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a9 01       	movw	r20, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_GetPinValue+0x126>
    25bc:	55 95       	asr	r21
    25be:	47 95       	ror	r20
    25c0:	8a 95       	dec	r24
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <DIO_GetPinValue+0x122>
    25c4:	ca 01       	movw	r24, r20
    25c6:	ec 81       	ldd	r30, Y+4	; 0x04
    25c8:	fd 81       	ldd	r31, Y+5	; 0x05
    25ca:	80 83       	st	Z, r24
    25cc:	25 c0       	rjmp	.+74     	; 0x2618 <DIO_GetPinValue+0x17e>
		case PORT_D:    *Return_PValue = GET_BIT(PIND,Copy_Pin); break;
    25ce:	e0 e3       	ldi	r30, 0x30	; 48
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	48 2f       	mov	r20, r24
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <DIO_GetPinValue+0x14e>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	2a 95       	dec	r18
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <DIO_GetPinValue+0x14a>
    25ec:	9a 01       	movw	r18, r20
    25ee:	28 23       	and	r18, r24
    25f0:	39 23       	and	r19, r25
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a9 01       	movw	r20, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_GetPinValue+0x166>
    25fc:	55 95       	asr	r21
    25fe:	47 95       	ror	r20
    2600:	8a 95       	dec	r24
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_GetPinValue+0x162>
    2604:	ca 01       	movw	r24, r20
    2606:	ec 81       	ldd	r30, Y+4	; 0x04
    2608:	fd 81       	ldd	r31, Y+5	; 0x05
    260a:	80 83       	st	Z, r24
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <DIO_GetPinValue+0x17e>
		default:	    Local_ErrorState = 1;   break;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <DIO_GetPinValue+0x17e>
		}
	}
	else {
		Local_ErrorState = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    2618:	89 81       	ldd	r24, Y+1	; 0x01
}
    261a:	27 96       	adiw	r28, 0x07	; 7
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <ADC_Init>:
#include "ADC_interface.h"
#include "ADC_config.h"
#include "ADC_private.h"
#include "ADC_register.h"

void ADC_Init(void){
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);


#elif RFERENCE_VOLT == AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
    2634:	a7 e2       	ldi	r26, 0x27	; 39
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e7 e2       	ldi	r30, 0x27	; 39
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	80 64       	ori	r24, 0x40	; 64
    2640:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2642:	a7 e2       	ldi	r26, 0x27	; 39
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e7 e2       	ldi	r30, 0x27	; 39
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8f 77       	andi	r24, 0x7F	; 127
    264e:	8c 93       	st	X, r24
	/* Select the adjust mode */

#if	ADJUST == LEFT_ADJ
	SET_BIT(ADMUX,ADMUX_ADLAR);
#else
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    2650:	a7 e2       	ldi	r26, 0x27	; 39
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e7 e2       	ldi	r30, 0x27	; 39
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7d       	andi	r24, 0xDF	; 223
    265c:	8c 93       	st	X, r24
#endif

	/* Select the prescalar */

	ADCSRA &= PRESCALAR_MASK;
    265e:	a6 e2       	ldi	r26, 0x26	; 38
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e6 e2       	ldi	r30, 0x26	; 38
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	88 7f       	andi	r24, 0xF8	; 248
    266a:	8c 93       	st	X, r24

#elif ADC_PRESCALAR == PRE64
	ADCSRA |= PRE64;

#elif ADC_PRESCALAR == PRE128
	ADCSRA |= PRE128;
    266c:	a6 e2       	ldi	r26, 0x26	; 38
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e6 e2       	ldi	r30, 0x26	; 38
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	87 60       	ori	r24, 0x07	; 7
    2678:	8c 93       	st	X, r24

#endif

	/* Enable the ADC */
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    267a:	a6 e2       	ldi	r26, 0x26	; 38
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e6 e2       	ldi	r30, 0x26	; 38
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	80 68       	ori	r24, 0x80	; 128
    2686:	8c 93       	st	X, r24

}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <ADC_GetChannelReading>:

/*********************************************************************/

uint16 ADC_GetChannelReading (uint8 Copy_Channel){
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	2b 97       	sbiw	r28, 0x0b	; 11
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	89 87       	std	Y+9, r24	; 0x09

	uint32 Counter = 0;
    26a4:	1d 82       	std	Y+5, r1	; 0x05
    26a6:	1e 82       	std	Y+6, r1	; 0x06
    26a8:	1f 82       	std	Y+7, r1	; 0x07
    26aa:	18 86       	std	Y+8, r1	; 0x08
	uint16 Return_Val = 0;
    26ac:	1c 82       	std	Y+4, r1	; 0x04
    26ae:	1b 82       	std	Y+3, r1	; 0x03
	uint16* P_ADCL = &ADCL;
    26b0:	84 e2       	ldi	r24, 0x24	; 36
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01

	/*Select the channel*/
	ADMUX &= MUX_MASK;
    26b8:	a7 e2       	ldi	r26, 0x27	; 39
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e7 e2       	ldi	r30, 0x27	; 39
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 7e       	andi	r24, 0xE0	; 224
    26c4:	8c 93       	st	X, r24
	switch(Copy_Channel){
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3b 87       	std	Y+11, r19	; 0x0b
    26ce:	2a 87       	std	Y+10, r18	; 0x0a
    26d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d4:	83 30       	cpi	r24, 0x03	; 3
    26d6:	91 05       	cpc	r25, r1
    26d8:	09 f4       	brne	.+2      	; 0x26dc <ADC_GetChannelReading+0x4e>
    26da:	40 c0       	rjmp	.+128    	; 0x275c <ADC_GetChannelReading+0xce>
    26dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    26de:	3b 85       	ldd	r19, Y+11	; 0x0b
    26e0:	24 30       	cpi	r18, 0x04	; 4
    26e2:	31 05       	cpc	r19, r1
    26e4:	7c f4       	brge	.+30     	; 0x2704 <ADC_GetChannelReading+0x76>
    26e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	91 05       	cpc	r25, r1
    26ee:	31 f1       	breq	.+76     	; 0x273c <ADC_GetChannelReading+0xae>
    26f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    26f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    26f4:	22 30       	cpi	r18, 0x02	; 2
    26f6:	31 05       	cpc	r19, r1
    26f8:	4c f5       	brge	.+82     	; 0x274c <ADC_GetChannelReading+0xbe>
    26fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    26fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	b1 f0       	breq	.+44     	; 0x272e <ADC_GetChannelReading+0xa0>
    2702:	53 c0       	rjmp	.+166    	; 0x27aa <ADC_GetChannelReading+0x11c>
    2704:	2a 85       	ldd	r18, Y+10	; 0x0a
    2706:	3b 85       	ldd	r19, Y+11	; 0x0b
    2708:	25 30       	cpi	r18, 0x05	; 5
    270a:	31 05       	cpc	r19, r1
    270c:	b9 f1       	breq	.+110    	; 0x277c <ADC_GetChannelReading+0xee>
    270e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2710:	9b 85       	ldd	r25, Y+11	; 0x0b
    2712:	85 30       	cpi	r24, 0x05	; 5
    2714:	91 05       	cpc	r25, r1
    2716:	54 f1       	brlt	.+84     	; 0x276c <ADC_GetChannelReading+0xde>
    2718:	2a 85       	ldd	r18, Y+10	; 0x0a
    271a:	3b 85       	ldd	r19, Y+11	; 0x0b
    271c:	26 30       	cpi	r18, 0x06	; 6
    271e:	31 05       	cpc	r19, r1
    2720:	a9 f1       	breq	.+106    	; 0x278c <ADC_GetChannelReading+0xfe>
    2722:	8a 85       	ldd	r24, Y+10	; 0x0a
    2724:	9b 85       	ldd	r25, Y+11	; 0x0b
    2726:	87 30       	cpi	r24, 0x07	; 7
    2728:	91 05       	cpc	r25, r1
    272a:	c1 f1       	breq	.+112    	; 0x279c <ADC_GetChannelReading+0x10e>
    272c:	3e c0       	rjmp	.+124    	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC0:	ADMUX |= ADC_CH0;	break;
    272e:	e7 e2       	ldi	r30, 0x27	; 39
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	a7 e2       	ldi	r26, 0x27	; 39
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	8c 91       	ld	r24, X
    2738:	80 83       	st	Z, r24
    273a:	37 c0       	rjmp	.+110    	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC1:	ADMUX |= ADC_CH1;	break;
    273c:	a7 e2       	ldi	r26, 0x27	; 39
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e7 e2       	ldi	r30, 0x27	; 39
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	81 60       	ori	r24, 0x01	; 1
    2748:	8c 93       	st	X, r24
    274a:	2f c0       	rjmp	.+94     	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC2:	ADMUX |= ADC_CH2;	break;
    274c:	a7 e2       	ldi	r26, 0x27	; 39
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e7 e2       	ldi	r30, 0x27	; 39
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	82 60       	ori	r24, 0x02	; 2
    2758:	8c 93       	st	X, r24
    275a:	27 c0       	rjmp	.+78     	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC3:	ADMUX |= ADC_CH3;	break;
    275c:	a7 e2       	ldi	r26, 0x27	; 39
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e7 e2       	ldi	r30, 0x27	; 39
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	83 60       	ori	r24, 0x03	; 3
    2768:	8c 93       	st	X, r24
    276a:	1f c0       	rjmp	.+62     	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC4:	ADMUX |= ADC_CH4;	break;
    276c:	a7 e2       	ldi	r26, 0x27	; 39
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e7 e2       	ldi	r30, 0x27	; 39
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	84 60       	ori	r24, 0x04	; 4
    2778:	8c 93       	st	X, r24
    277a:	17 c0       	rjmp	.+46     	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC5:	ADMUX |= ADC_CH5;	break;
    277c:	a7 e2       	ldi	r26, 0x27	; 39
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e7 e2       	ldi	r30, 0x27	; 39
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	85 60       	ori	r24, 0x05	; 5
    2788:	8c 93       	st	X, r24
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC6:	ADMUX |= ADC_CH6;	break;
    278c:	a7 e2       	ldi	r26, 0x27	; 39
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e7 e2       	ldi	r30, 0x27	; 39
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	86 60       	ori	r24, 0x06	; 6
    2798:	8c 93       	st	X, r24
    279a:	07 c0       	rjmp	.+14     	; 0x27aa <ADC_GetChannelReading+0x11c>
		case ADC7:	ADMUX |= ADC_CH7;	break;
    279c:	a7 e2       	ldi	r26, 0x27	; 39
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e7 e2       	ldi	r30, 0x27	; 39
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	87 60       	ori	r24, 0x07	; 7
    27a8:	8c 93       	st	X, r24
	}

	/* Start Single Conversion */
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    27aa:	a6 e2       	ldi	r26, 0x26	; 38
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e6 e2       	ldi	r30, 0x26	; 38
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	80 64       	ori	r24, 0x40	; 64
    27b6:	8c 93       	st	X, r24
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <ADC_GetChannelReading+0x142>

	/* Wait until the conversion complete with timeout to not stuck to inf */
	while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0 && Counter != ADC_TIMEOUT){
		Counter++;
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	af 81       	ldd	r26, Y+7	; 0x07
    27c0:	b8 85       	ldd	r27, Y+8	; 0x08
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	a1 1d       	adc	r26, r1
    27c6:	b1 1d       	adc	r27, r1
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	af 83       	std	Y+7, r26	; 0x07
    27ce:	b8 87       	std	Y+8, r27	; 0x08

	/* Start Single Conversion */
	SET_BIT(ADCSRA, ADCSRA_ADSC);

	/* Wait until the conversion complete with timeout to not stuck to inf */
	while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0 && Counter != ADC_TIMEOUT){
    27d0:	e6 e2       	ldi	r30, 0x26	; 38
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	80 71       	andi	r24, 0x10	; 16
    27dc:	90 70       	andi	r25, 0x00	; 0
    27de:	95 95       	asr	r25
    27e0:	87 95       	ror	r24
    27e2:	95 95       	asr	r25
    27e4:	87 95       	ror	r24
    27e6:	95 95       	asr	r25
    27e8:	87 95       	ror	r24
    27ea:	95 95       	asr	r25
    27ec:	87 95       	ror	r24
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	61 f4       	brne	.+24     	; 0x280a <ADC_GetChannelReading+0x17c>
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	af 81       	ldd	r26, Y+7	; 0x07
    27f8:	b8 85       	ldd	r27, Y+8	; 0x08
    27fa:	80 35       	cpi	r24, 0x50	; 80
    27fc:	23 ec       	ldi	r18, 0xC3	; 195
    27fe:	92 07       	cpc	r25, r18
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	a2 07       	cpc	r26, r18
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	b2 07       	cpc	r27, r18
    2808:	c1 f6       	brne	.-80     	; 0x27ba <ADC_GetChannelReading+0x12c>
		Counter++;
	}

	/* Clear the conversion complete flag */
	SET_BIT(ADCSRA, ADCSRA_ADIF);
    280a:	a6 e2       	ldi	r26, 0x26	; 38
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e6 e2       	ldi	r30, 0x26	; 38
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	80 61       	ori	r24, 0x10	; 16
    2816:	8c 93       	st	X, r24

	#if ADJUST == LEFT_ADJ
	Return_Val =  ADCH;

	#else
	Return_Val = *P_ADCL;
    2818:	e9 81       	ldd	r30, Y+1	; 0x01
    281a:	fa 81       	ldd	r31, Y+2	; 0x02
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	9c 83       	std	Y+4, r25	; 0x04
    2822:	8b 83       	std	Y+3, r24	; 0x03
	#endif

	/* Loop is broken cause of timeout */
	if(Counter == ADC_TIMEOUT){
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	af 81       	ldd	r26, Y+7	; 0x07
    282a:	b8 85       	ldd	r27, Y+8	; 0x08
    282c:	80 35       	cpi	r24, 0x50	; 80
    282e:	33 ec       	ldi	r19, 0xC3	; 195
    2830:	93 07       	cpc	r25, r19
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	a3 07       	cpc	r26, r19
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	b3 07       	cpc	r27, r19
    283a:	11 f4       	brne	.+4      	; 0x2840 <ADC_GetChannelReading+0x1b2>
		Return_Val = 0;
    283c:	1c 82       	std	Y+4, r1	; 0x04
    283e:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Return_Val;
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2844:	2b 96       	adiw	r28, 0x0b	; 11
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <main>:
#include "DIO/DIO_interface.h"
#include "ADC_interface.h"
#include "LCD/CLCD_interface.h"
#include <util/delay.h>

int main(){
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	68 97       	sbiw	r28, 0x18	; 24
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
	float step = .0048828;
    286a:	85 ee       	ldi	r24, 0xE5	; 229
    286c:	9f ef       	ldi	r25, 0xFF	; 255
    286e:	af e9       	ldi	r26, 0x9F	; 159
    2870:	bb e3       	ldi	r27, 0x3B	; 59
    2872:	8d 8b       	std	Y+21, r24	; 0x15
    2874:	9e 8b       	std	Y+22, r25	; 0x16
    2876:	af 8b       	std	Y+23, r26	; 0x17
    2878:	b8 8f       	std	Y+24, r27	; 0x18
	float analog;
	uint16 ADC_reading;
	CLCD_voidInit();
    287a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <CLCD_voidInit>
	ADC_Init();
    287e:	0e 94 16 13 	call	0x262c	; 0x262c <ADC_Init>

	while(1){
		ADC_reading = ADC_GetChannelReading(ADC0);
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	0e 94 47 13 	call	0x268e	; 0x268e <ADC_GetChannelReading>
    2888:	98 8b       	std	Y+16, r25	; 0x10
    288a:	8f 87       	std	Y+15, r24	; 0x0f
		analog = ADC_reading * step * 1000;
    288c:	8f 85       	ldd	r24, Y+15	; 0x0f
    288e:	98 89       	ldd	r25, Y+16	; 0x10
    2890:	cc 01       	movw	r24, r24
    2892:	a0 e0       	ldi	r26, 0x00	; 0
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	2d 89       	ldd	r18, Y+21	; 0x15
    28a8:	3e 89       	ldd	r19, Y+22	; 0x16
    28aa:	4f 89       	ldd	r20, Y+23	; 0x17
    28ac:	58 8d       	ldd	r21, Y+24	; 0x18
    28ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a e7       	ldi	r20, 0x7A	; 122
    28c0:	54 e4       	ldi	r21, 0x44	; 68
    28c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	89 8b       	std	Y+17, r24	; 0x11
    28cc:	9a 8b       	std	Y+18, r25	; 0x12
    28ce:	ab 8b       	std	Y+19, r26	; 0x13
    28d0:	bc 8b       	std	Y+20, r27	; 0x14
		CLCD_voidWrite_Number(analog/10);
    28d2:	69 89       	ldd	r22, Y+17	; 0x11
    28d4:	7a 89       	ldd	r23, Y+18	; 0x12
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	9c 89       	ldd	r25, Y+20	; 0x14
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	51 e4       	ldi	r21, 0x41	; 65
    28e2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidWrite_Number>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a8 ec       	ldi	r26, 0xC8	; 200
    2904:	b2 e4       	ldi	r27, 0x42	; 66
    2906:	8b 87       	std	Y+11, r24	; 0x0b
    2908:	9c 87       	std	Y+12, r25	; 0x0c
    290a:	ad 87       	std	Y+13, r26	; 0x0d
    290c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2910:	7c 85       	ldd	r23, Y+12	; 0x0c
    2912:	8d 85       	ldd	r24, Y+13	; 0x0d
    2914:	9e 85       	ldd	r25, Y+14	; 0x0e
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a e7       	ldi	r20, 0x7A	; 122
    291c:	53 e4       	ldi	r21, 0x43	; 67
    291e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8f 83       	std	Y+7, r24	; 0x07
    2928:	98 87       	std	Y+8, r25	; 0x08
    292a:	a9 87       	std	Y+9, r26	; 0x09
    292c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292e:	6f 81       	ldd	r22, Y+7	; 0x07
    2930:	78 85       	ldd	r23, Y+8	; 0x08
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <main+0xfa>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <main+0x178>
	else if (__tmp > 65535)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <main+0x15a>
    2992:	89 e1       	ldi	r24, 0x19	; 25
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	8b 83       	std	Y+3, r24	; 0x03
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <main+0x148>
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <main+0x13c>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <main+0x184>
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		CLCD_voidClear();
    29e2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <CLCD_voidClear>
    29e6:	4d cf       	rjmp	.-358    	; 0x2882 <main+0x2c>

000029e8 <__divmodsi4>:
    29e8:	97 fb       	bst	r25, 7
    29ea:	09 2e       	mov	r0, r25
    29ec:	05 26       	eor	r0, r21
    29ee:	0e d0       	rcall	.+28     	; 0x2a0c <__divmodsi4_neg1>
    29f0:	57 fd       	sbrc	r21, 7
    29f2:	04 d0       	rcall	.+8      	; 0x29fc <__divmodsi4_neg2>
    29f4:	14 d0       	rcall	.+40     	; 0x2a1e <__udivmodsi4>
    29f6:	0a d0       	rcall	.+20     	; 0x2a0c <__divmodsi4_neg1>
    29f8:	00 1c       	adc	r0, r0
    29fa:	38 f4       	brcc	.+14     	; 0x2a0a <__divmodsi4_exit>

000029fc <__divmodsi4_neg2>:
    29fc:	50 95       	com	r21
    29fe:	40 95       	com	r20
    2a00:	30 95       	com	r19
    2a02:	21 95       	neg	r18
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	4f 4f       	sbci	r20, 0xFF	; 255
    2a08:	5f 4f       	sbci	r21, 0xFF	; 255

00002a0a <__divmodsi4_exit>:
    2a0a:	08 95       	ret

00002a0c <__divmodsi4_neg1>:
    2a0c:	f6 f7       	brtc	.-4      	; 0x2a0a <__divmodsi4_exit>
    2a0e:	90 95       	com	r25
    2a10:	80 95       	com	r24
    2a12:	70 95       	com	r23
    2a14:	61 95       	neg	r22
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	8f 4f       	sbci	r24, 0xFF	; 255
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1c:	08 95       	ret

00002a1e <__udivmodsi4>:
    2a1e:	a1 e2       	ldi	r26, 0x21	; 33
    2a20:	1a 2e       	mov	r1, r26
    2a22:	aa 1b       	sub	r26, r26
    2a24:	bb 1b       	sub	r27, r27
    2a26:	fd 01       	movw	r30, r26
    2a28:	0d c0       	rjmp	.+26     	; 0x2a44 <__udivmodsi4_ep>

00002a2a <__udivmodsi4_loop>:
    2a2a:	aa 1f       	adc	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	ee 1f       	adc	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	a2 17       	cp	r26, r18
    2a34:	b3 07       	cpc	r27, r19
    2a36:	e4 07       	cpc	r30, r20
    2a38:	f5 07       	cpc	r31, r21
    2a3a:	20 f0       	brcs	.+8      	; 0x2a44 <__udivmodsi4_ep>
    2a3c:	a2 1b       	sub	r26, r18
    2a3e:	b3 0b       	sbc	r27, r19
    2a40:	e4 0b       	sbc	r30, r20
    2a42:	f5 0b       	sbc	r31, r21

00002a44 <__udivmodsi4_ep>:
    2a44:	66 1f       	adc	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	88 1f       	adc	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	1a 94       	dec	r1
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <__udivmodsi4_loop>
    2a50:	60 95       	com	r22
    2a52:	70 95       	com	r23
    2a54:	80 95       	com	r24
    2a56:	90 95       	com	r25
    2a58:	9b 01       	movw	r18, r22
    2a5a:	ac 01       	movw	r20, r24
    2a5c:	bd 01       	movw	r22, r26
    2a5e:	cf 01       	movw	r24, r30
    2a60:	08 95       	ret

00002a62 <__prologue_saves__>:
    2a62:	2f 92       	push	r2
    2a64:	3f 92       	push	r3
    2a66:	4f 92       	push	r4
    2a68:	5f 92       	push	r5
    2a6a:	6f 92       	push	r6
    2a6c:	7f 92       	push	r7
    2a6e:	8f 92       	push	r8
    2a70:	9f 92       	push	r9
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	ca 1b       	sub	r28, r26
    2a8c:	db 0b       	sbc	r29, r27
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	09 94       	ijmp

00002a9a <__epilogue_restores__>:
    2a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a9c:	39 88       	ldd	r3, Y+17	; 0x11
    2a9e:	48 88       	ldd	r4, Y+16	; 0x10
    2aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aac:	b9 84       	ldd	r11, Y+9	; 0x09
    2aae:	c8 84       	ldd	r12, Y+8	; 0x08
    2ab0:	df 80       	ldd	r13, Y+7	; 0x07
    2ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aba:	aa 81       	ldd	r26, Y+2	; 0x02
    2abc:	b9 81       	ldd	r27, Y+1	; 0x01
    2abe:	ce 0f       	add	r28, r30
    2ac0:	d1 1d       	adc	r29, r1
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	ed 01       	movw	r28, r26
    2ace:	08 95       	ret

00002ad0 <_exit>:
    2ad0:	f8 94       	cli

00002ad2 <__stop_program>:
    2ad2:	ff cf       	rjmp	.-2      	; 0x2ad2 <__stop_program>
